file C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003        
005194  000004  // generated 12/07/2017 14:00:06
005195  000005        
005196  000006  #MODE RUNFLASH
005197  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005198  000008  #inherit "4DGL_16bitColours.fnc"
005199  000008  #inherit "4DGL_16bitColours.fnc"
005200  000004  */
005201  000005        
005202  000006        
005203  000007        
005204  000008  #CONST
005205  000149  #END
005206  000150        
005207  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005208  000010  #inherit "VisualConst.inc"
005209  000010  #inherit "VisualConst.inc"
005210  000001  // Line Patterns
005211  000002  #constant  LPCOARSE    0xF0F0
005212  000002  #constant  LPCOARSE    0xF0F0
005213  000003  #constant  LPMEDIUM    0x3333
005214  000003  #constant  LPMEDIUM    0x3333
005215  000004  #constant  LPFINE      0xAAAA
005216  000004  #constant  LPFINE      0xAAAA
005217  000005  #constant  LPDASHDOT   0x03CF
005218  000005  #constant  LPDASHDOT   0x03CF
005219  000006  #constant  LPDASHDOTDOT 0x0333
005220  000006  #constant  LPDASHDOTDOT 0x0333
005221  000007  #constant  LPSOLID     0x0000
005222  000007  #constant  LPSOLID     0x0000
005223  000011        
005224  000012        
file C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAXConst.inc

005225  000013  #inherit "BCN3D_SIGMAXConst.inc"
005226  000013  #inherit "BCN3D_SIGMAXConst.inc"
005227  000001  // File generated 12/07/2017 13:59:17
005228  000002  // Warning! This is a generated file, any manual changes will be
005229  000003  // lost during the next generation.
005230  000004        
005231  000005  #constant  Strings3Count    0
005232  000005  #constant  Strings3Count    0
005233  000006  #constant  Strings3Size     1
005234  000006  #constant  Strings3Size     1
005235  000007  #constant  Strings1Count    0
005236  000007  #constant  Strings1Count    0
005237  000008  #constant  Strings1Size     1
005238  000008  #constant  Strings1Size     1
005239  000009  #constant  Strings7Count    1
005240  000009  #constant  Strings7Count    1
005241  000010  #constant  Strings7Size     37
005242  000010  #constant  Strings7Size     37
005243  000011  #constant  Strings8Count    0
005244  000011  #constant  Strings8Count    0
005245  000012  #constant  Strings8Size     1
005246  000012  #constant  Strings8Size     1
005247  000013  #constant  Strings12Count    0
005248  000013  #constant  Strings12Count    0
005249  000014  #constant  Strings12Size     1
005250  000014  #constant  Strings12Size     1
005251  000015  #constant  Strings23Count    0
005252  000015  #constant  Strings23Count    0
005253  000016  #constant  Strings23Size     1
005254  000016  #constant  Strings23Size     1
005255  000017  #constant  Strings24Count    1
005256  000017  #constant  Strings24Count    1
005257  000018  #constant  Strings24Size     19
005258  000018  #constant  Strings24Size     19
005259  000019  #constant  Strings25Count    1
005260  000019  #constant  Strings25Count    1
005261  000020  #constant  Strings25Size     37
005262  000020  #constant  Strings25Size     37
005263  000021  #constant  Strings26Count    1
005264  000021  #constant  Strings26Count    1
005265  000022  #constant  Strings26Size     37
005266  000022  #constant  Strings26Size     37
005267  000023  #constant  Strings16Count    0
005268  000023  #constant  Strings16Count    0
005269  000024  #constant  Strings16Size     1
005270  000024  #constant  Strings16Size     1
005271  000025  #constant  Strings30Count    1
005272  000025  #constant  Strings30Count    1
005273  000026  #constant  Strings30Size     37
005274  000026  #constant  Strings30Size     37
005275  000027  #constant  Strings2Count    1
005276  000027  #constant  Strings2Count    1
005277  000028  #constant  Strings2Size     4
005278  000028  #constant  Strings2Size     4
005279  000029  #constant  Strings0Count    1
005280  000029  #constant  Strings0Count    1
005281  000030  #constant  Strings0Size     4
005282  000030  #constant  Strings0Size     4
005283  000031  #constant  Strings9Count    1
005284  000031  #constant  Strings9Count    1
005285  000032  #constant  Strings9Size     4
005286  000032  #constant  Strings9Size     4
005287  000033  #constant  Strings34Count    1
005288  000033  #constant  Strings34Count    1
005289  000034  #constant  Strings34Size     4
005290  000034  #constant  Strings34Size     4
005291  000035  #constant  Strings36Count    1
005292  000035  #constant  Strings36Count    1
005293  000036  #constant  Strings36Size     4
005294  000036  #constant  Strings36Size     4
005295  000037  #constant  Strings37Count    1
005296  000037  #constant  Strings37Count    1
005297  000038  #constant  Strings37Size     4
005298  000038  #constant  Strings37Size     4
005299  000039  #constant  Strings4Count    1
005300  000039  #constant  Strings4Count    1
005301  000040  #constant  Strings4Size     4
005302  000040  #constant  Strings4Size     4
005303  000041  #constant  Strings40Count    1
005304  000041  #constant  Strings40Count    1
005305  000042  #constant  Strings40Size     16
005306  000042  #constant  Strings40Size     16
005307  000043  #constant  Strings41Count    0
005308  000043  #constant  Strings41Count    0
005309  000044  #constant  Strings41Size     1
005310  000044  #constant  Strings41Size     1
005311  000045  #constant  Strings42Count    0
005312  000045  #constant  Strings42Count    0
005313  000046  #constant  Strings42Size     1
005314  000046  #constant  Strings42Size     1
005315  000047  #constant  Strings5Count    1
005316  000047  #constant  Strings5Count    1
005317  000048  #constant  Strings5Size     7
005318  000048  #constant  Strings5Size     7
005319  000049  #constant  Strings10Count    1
005320  000049  #constant  Strings10Count    1
005321  000050  #constant  Strings10Size     7
005322  000050  #constant  Strings10Size     7
005323  000051  #constant  Strings17Count    1
005324  000051  #constant  Strings17Count    1
005325  000052  #constant  Strings17Size     7
005326  000052  #constant  Strings17Size     7
005327  000053  #constant  Strings13Count    1
005328  000053  #constant  Strings13Count    1
005329  000054  #constant  Strings13Size     7
005330  000054  #constant  Strings13Size     7
005331  000055  #constant  Strings14Count    1
005332  000055  #constant  Strings14Count    1
005333  000056  #constant  Strings14Size     7
005334  000056  #constant  Strings14Size     7
005335  000057  #constant  Strings15Count    1
005336  000057  #constant  Strings15Count    1
005337  000058  #constant  Strings15Size     7
005338  000058  #constant  Strings15Size     7
005339  000059  #constant  Strings18Count    1
005340  000059  #constant  Strings18Count    1
005341  000060  #constant  Strings18Size     7
005342  000060  #constant  Strings18Size     7
005343  000061  #constant  Strings19Count    1
005344  000061  #constant  Strings19Count    1
005345  000062  #constant  Strings19Size     9
005346  000062  #constant  Strings19Size     9
005347  000063  #constant  Strings20Count    1
005348  000063  #constant  Strings20Count    1
005349  000064  #constant  Strings20Size     9
005350  000064  #constant  Strings20Size     9
005351  000065  #constant  Strings21Count    1
005352  000065  #constant  Strings21Count    1
005353  000066  #constant  Strings21Size     9
005354  000066  #constant  Strings21Size     9
005355  000067  #constant  Strings22Count    1
005356  000067  #constant  Strings22Count    1
005357  000068  #constant  Strings22Size     9
005358  000068  #constant  Strings22Size     9
005359  000069  #constant  Strings27Count    0
005360  000069  #constant  Strings27Count    0
005361  000070  #constant  Strings27Size     1
005362  000070  #constant  Strings27Size     1
005363  000071  #constant  Strings28Count    1
005364  000071  #constant  Strings28Count    1
005365  000072  #constant  Strings28Size     22
005366  000072  #constant  Strings28Size     22
005367  000073  #constant  Strings46Count    0
005368  000073  #constant  Strings46Count    0
005369  000074  #constant  Strings46Size     1
005370  000074  #constant  Strings46Size     1
005371  000075  #constant  Strings48Count    0
005372  000075  #constant  Strings48Count    0
005373  000076  #constant  Strings48Size     1
005374  000076  #constant  Strings48Size     1
005375  000077  #constant  Strings6Count    1
005376  000077  #constant  Strings6Count    1
005377  000078  #constant  Strings6Size     4
005378  000078  #constant  Strings6Size     4
005379  000079  #constant  Strings29Count    1
005380  000079  #constant  Strings29Count    1
005381  000080  #constant  Strings29Size     4
005382  000080  #constant  Strings29Size     4
005383  000081  #constant  Strings31Count    1
005384  000081  #constant  Strings31Count    1
005385  000082  #constant  Strings31Size     4
005386  000082  #constant  Strings31Size     4
005387  000083  #constant  Strings32Count    1
005388  000083  #constant  Strings32Count    1
005389  000084  #constant  Strings32Size     4
005390  000084  #constant  Strings32Size     4
005391  000085  #constant  Strings33Count    1
005392  000085  #constant  Strings33Count    1
005393  000086  #constant  Strings33Size     4
005394  000086  #constant  Strings33Size     4
005395  000087  #constant  Strings35Count    1
005396  000087  #constant  Strings35Count    1
005397  000088  #constant  Strings35Size     4
005398  000088  #constant  Strings35Size     4
005399  000089  #constant  Strings38Count    1
005400  000089  #constant  Strings38Count    1
005401  000090  #constant  Strings38Size     4
005402  000090  #constant  Strings38Size     4
005403  000091  #constant  Strings47Count    0
005404  000091  #constant  Strings47Count    0
005405  000092  #constant  Strings47Size     1
005406  000092  #constant  Strings47Size     1
005407  000093  #constant  Strings43Count    0
005408  000093  #constant  Strings43Count    0
005409  000094  #constant  Strings43Size     1
005410  000094  #constant  Strings43Size     1
005411  000095  #constant  Strings53Count    0
005412  000095  #constant  Strings53Count    0
005413  000096  #constant  Strings53Size     1
005414  000096  #constant  Strings53Size     1
005415  000097  #constant  Strings11Count    1
005416  000097  #constant  Strings11Count    1
005417  000098  #constant  Strings11Size     7
005418  000098  #constant  Strings11Size     7
005419  000099  #constant  Strings45Count    0
005420  000099  #constant  Strings45Count    0
005421  000100  #constant  Strings45Size     1
005422  000100  #constant  Strings45Size     1
005423  000101  #constant  Strings39Count    0
005424  000101  #constant  Strings39Count    0
005425  000102  #constant  Strings39Size     1
005426  000102  #constant  Strings39Size     1
005427  000103  #constant  Strings44Count    0
005428  000103  #constant  Strings44Count    0
005429  000104  #constant  Strings44Size     1
005430  000104  #constant  Strings44Size     1
005431  000105  #constant  Strings49Count    1
005432  000105  #constant  Strings49Count    1
005433  000106  #constant  Strings49Size     12
005434  000106  #constant  Strings49Size     12
005435  000107  #constant  Strings52Count    0
005436  000107  #constant  Strings52Count    0
005437  000108  #constant  Strings52Size     1
005438  000108  #constant  Strings52Size     1
005439  000109  #constant  Strings50Count    0
005440  000109  #constant  Strings50Count    0
005441  000110  #constant  Strings50Size     1
005442  000110  #constant  Strings50Size     1
005443  000111  #constant  Strings51Count    0
005444  000111  #constant  Strings51Count    0
005445  000112  #constant  Strings51Size     1
005446  000112  #constant  Strings51Size     1
005447  000113  // object indexes into ImageControl
005448  000114  #CONST
005449  000438  #END
005450  000439        
005451  000440  #constant  Strings3StartH   0x0
005452  000440  #constant  Strings3StartH   0x0
005453  000441  #constant  Strings3StartL   0x0
005454  000441  #constant  Strings3StartL   0x0
005455  000442  #constant  Strings1StartH   0x0
005456  000442  #constant  Strings1StartH   0x0
005457  000443  #constant  Strings1StartL   0x200
005458  000443  #constant  Strings1StartL   0x200
005459  000444  #constant  Strings7StartH   0x0
005460  000444  #constant  Strings7StartH   0x0
005461  000445  #constant  Strings7StartL   0x400
005462  000445  #constant  Strings7StartL   0x400
005463  000446  #constant  Strings8StartH   0x0
005464  000446  #constant  Strings8StartH   0x0
005465  000447  #constant  Strings8StartL   0x600
005466  000447  #constant  Strings8StartL   0x600
005467  000448  #constant  Strings12StartH   0x0
005468  000448  #constant  Strings12StartH   0x0
005469  000449  #constant  Strings12StartL   0x800
005470  000449  #constant  Strings12StartL   0x800
005471  000450  #constant  Strings23StartH   0x0
005472  000450  #constant  Strings23StartH   0x0
005473  000451  #constant  Strings23StartL   0xA00
005474  000451  #constant  Strings23StartL   0xA00
005475  000452  #constant  Strings24StartH   0x0
005476  000452  #constant  Strings24StartH   0x0
005477  000453  #constant  Strings24StartL   0xC00
005478  000453  #constant  Strings24StartL   0xC00
005479  000454  #constant  Strings25StartH   0x0
005480  000454  #constant  Strings25StartH   0x0
005481  000455  #constant  Strings25StartL   0xE00
005482  000455  #constant  Strings25StartL   0xE00
005483  000456  #constant  Strings26StartH   0x0
005484  000456  #constant  Strings26StartH   0x0
005485  000457  #constant  Strings26StartL   0x1000
005486  000457  #constant  Strings26StartL   0x1000
005487  000458  #constant  Strings16StartH   0x0
005488  000458  #constant  Strings16StartH   0x0
005489  000459  #constant  Strings16StartL   0x1200
005490  000459  #constant  Strings16StartL   0x1200
005491  000460  #constant  Strings30StartH   0x0
005492  000460  #constant  Strings30StartH   0x0
005493  000461  #constant  Strings30StartL   0x1400
005494  000461  #constant  Strings30StartL   0x1400
005495  000462  #constant  Strings2StartH   0x0
005496  000462  #constant  Strings2StartH   0x0
005497  000463  #constant  Strings2StartL   0x1600
005498  000463  #constant  Strings2StartL   0x1600
005499  000464  #constant  Strings0StartH   0x0
005500  000464  #constant  Strings0StartH   0x0
005501  000465  #constant  Strings0StartL   0x1800
005502  000465  #constant  Strings0StartL   0x1800
005503  000466  #constant  Strings9StartH   0x0
005504  000466  #constant  Strings9StartH   0x0
005505  000467  #constant  Strings9StartL   0x1A00
005506  000467  #constant  Strings9StartL   0x1A00
005507  000468  #constant  Strings34StartH   0x0
005508  000468  #constant  Strings34StartH   0x0
005509  000469  #constant  Strings34StartL   0x1C00
005510  000469  #constant  Strings34StartL   0x1C00
005511  000470  #constant  Strings36StartH   0x0
005512  000470  #constant  Strings36StartH   0x0
005513  000471  #constant  Strings36StartL   0x1E00
005514  000471  #constant  Strings36StartL   0x1E00
005515  000472  #constant  Strings37StartH   0x0
005516  000472  #constant  Strings37StartH   0x0
005517  000473  #constant  Strings37StartL   0x2000
005518  000473  #constant  Strings37StartL   0x2000
005519  000474  #constant  Strings4StartH   0x0
005520  000474  #constant  Strings4StartH   0x0
005521  000475  #constant  Strings4StartL   0x2200
005522  000475  #constant  Strings4StartL   0x2200
005523  000476  #constant  Strings40StartH   0x0
005524  000476  #constant  Strings40StartH   0x0
005525  000477  #constant  Strings40StartL   0x2400
005526  000477  #constant  Strings40StartL   0x2400
005527  000478  #constant  Strings41StartH   0x0
005528  000478  #constant  Strings41StartH   0x0
005529  000479  #constant  Strings41StartL   0x2600
005530  000479  #constant  Strings41StartL   0x2600
005531  000480  #constant  Strings42StartH   0x0
005532  000480  #constant  Strings42StartH   0x0
005533  000481  #constant  Strings42StartL   0x2800
005534  000481  #constant  Strings42StartL   0x2800
005535  000482  #constant  Strings5StartH   0x0
005536  000482  #constant  Strings5StartH   0x0
005537  000483  #constant  Strings5StartL   0x2A00
005538  000483  #constant  Strings5StartL   0x2A00
005539  000484  #constant  Strings10StartH   0x0
005540  000484  #constant  Strings10StartH   0x0
005541  000485  #constant  Strings10StartL   0x2C00
005542  000485  #constant  Strings10StartL   0x2C00
005543  000486  #constant  Strings17StartH   0x0
005544  000486  #constant  Strings17StartH   0x0
005545  000487  #constant  Strings17StartL   0x2E00
005546  000487  #constant  Strings17StartL   0x2E00
005547  000488  #constant  Strings13StartH   0x0
005548  000488  #constant  Strings13StartH   0x0
005549  000489  #constant  Strings13StartL   0x3000
005550  000489  #constant  Strings13StartL   0x3000
005551  000490  #constant  Strings14StartH   0x0
005552  000490  #constant  Strings14StartH   0x0
005553  000491  #constant  Strings14StartL   0x3200
005554  000491  #constant  Strings14StartL   0x3200
005555  000492  #constant  Strings15StartH   0x0
005556  000492  #constant  Strings15StartH   0x0
005557  000493  #constant  Strings15StartL   0x3400
005558  000493  #constant  Strings15StartL   0x3400
005559  000494  #constant  Strings18StartH   0x0
005560  000494  #constant  Strings18StartH   0x0
005561  000495  #constant  Strings18StartL   0x3600
005562  000495  #constant  Strings18StartL   0x3600
005563  000496  #constant  Strings19StartH   0x0
005564  000496  #constant  Strings19StartH   0x0
005565  000497  #constant  Strings19StartL   0x3800
005566  000497  #constant  Strings19StartL   0x3800
005567  000498  #constant  Strings20StartH   0x0
005568  000498  #constant  Strings20StartH   0x0
005569  000499  #constant  Strings20StartL   0x3A00
005570  000499  #constant  Strings20StartL   0x3A00
005571  000500  #constant  Strings21StartH   0x0
005572  000500  #constant  Strings21StartH   0x0
005573  000501  #constant  Strings21StartL   0x3C00
005574  000501  #constant  Strings21StartL   0x3C00
005575  000502  #constant  Strings22StartH   0x0
005576  000502  #constant  Strings22StartH   0x0
005577  000503  #constant  Strings22StartL   0x3E00
005578  000503  #constant  Strings22StartL   0x3E00
005579  000504  #constant  Strings27StartH   0x0
005580  000504  #constant  Strings27StartH   0x0
005581  000505  #constant  Strings27StartL   0x4000
005582  000505  #constant  Strings27StartL   0x4000
005583  000506  #constant  Strings28StartH   0x0
005584  000506  #constant  Strings28StartH   0x0
005585  000507  #constant  Strings28StartL   0x4200
005586  000507  #constant  Strings28StartL   0x4200
005587  000508  #constant  Strings46StartH   0x0
005588  000508  #constant  Strings46StartH   0x0
005589  000509  #constant  Strings46StartL   0x4400
005590  000509  #constant  Strings46StartL   0x4400
005591  000510  #constant  Strings48StartH   0x0
005592  000510  #constant  Strings48StartH   0x0
005593  000511  #constant  Strings48StartL   0x4600
005594  000511  #constant  Strings48StartL   0x4600
005595  000512  #constant  Strings6StartH   0x0
005596  000512  #constant  Strings6StartH   0x0
005597  000513  #constant  Strings6StartL   0x4800
005598  000513  #constant  Strings6StartL   0x4800
005599  000514  #constant  Strings29StartH   0x0
005600  000514  #constant  Strings29StartH   0x0
005601  000515  #constant  Strings29StartL   0x4A00
005602  000515  #constant  Strings29StartL   0x4A00
005603  000516  #constant  Strings31StartH   0x0
005604  000516  #constant  Strings31StartH   0x0
005605  000517  #constant  Strings31StartL   0x4C00
005606  000517  #constant  Strings31StartL   0x4C00
005607  000518  #constant  Strings32StartH   0x0
005608  000518  #constant  Strings32StartH   0x0
005609  000519  #constant  Strings32StartL   0x4E00
005610  000519  #constant  Strings32StartL   0x4E00
005611  000520  #constant  Strings33StartH   0x0
005612  000520  #constant  Strings33StartH   0x0
005613  000521  #constant  Strings33StartL   0x5000
005614  000521  #constant  Strings33StartL   0x5000
005615  000522  #constant  Strings35StartH   0x0
005616  000522  #constant  Strings35StartH   0x0
005617  000523  #constant  Strings35StartL   0x5200
005618  000523  #constant  Strings35StartL   0x5200
005619  000524  #constant  Strings38StartH   0x0
005620  000524  #constant  Strings38StartH   0x0
005621  000525  #constant  Strings38StartL   0x5400
005622  000525  #constant  Strings38StartL   0x5400
005623  000526  #constant  Strings47StartH   0x0
005624  000526  #constant  Strings47StartH   0x0
005625  000527  #constant  Strings47StartL   0x5600
005626  000527  #constant  Strings47StartL   0x5600
005627  000528  #constant  Strings43StartH   0x0
005628  000528  #constant  Strings43StartH   0x0
005629  000529  #constant  Strings43StartL   0x5800
005630  000529  #constant  Strings43StartL   0x5800
005631  000530  #constant  Strings53StartH   0x0
005632  000530  #constant  Strings53StartH   0x0
005633  000531  #constant  Strings53StartL   0x5A00
005634  000531  #constant  Strings53StartL   0x5A00
005635  000532  #constant  Strings11StartH   0x0
005636  000532  #constant  Strings11StartH   0x0
005637  000533  #constant  Strings11StartL   0x5C00
005638  000533  #constant  Strings11StartL   0x5C00
005639  000534  #constant  Strings45StartH   0x0
005640  000534  #constant  Strings45StartH   0x0
005641  000535  #constant  Strings45StartL   0x5E00
005642  000535  #constant  Strings45StartL   0x5E00
005643  000536  #constant  Strings39StartH   0x0
005644  000536  #constant  Strings39StartH   0x0
005645  000537  #constant  Strings39StartL   0x6000
005646  000537  #constant  Strings39StartL   0x6000
005647  000538  #constant  Strings44StartH   0x0
005648  000538  #constant  Strings44StartH   0x0
005649  000539  #constant  Strings44StartL   0x6200
005650  000539  #constant  Strings44StartL   0x6200
005651  000540  #constant  Strings49StartH   0x0
005652  000540  #constant  Strings49StartH   0x0
005653  000541  #constant  Strings49StartL   0x6400
005654  000541  #constant  Strings49StartL   0x6400
005655  000542  #constant  Strings52StartH   0x0
005656  000542  #constant  Strings52StartH   0x0
005657  000543  #constant  Strings52StartL   0x6600
005658  000543  #constant  Strings52StartL   0x6600
005659  000544  #constant  Strings50StartH   0x0
005660  000544  #constant  Strings50StartH   0x0
005661  000545  #constant  Strings50StartL   0x6800
005662  000545  #constant  Strings50StartL   0x6800
005663  000546  #constant  Strings51StartH   0x0
005664  000546  #constant  Strings51StartH   0x0
005665  000547  #constant  Strings51StartL   0x6A00
005666  000547  #constant  Strings51StartL   0x6A00
005667  000548  #IFNOT EXISTS NOGLOBALS
005668  000549  var hndl ;
005669  000550  #ENDIF
005670  000014        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005671  000015  #inherit "CLPrintStrings.inc"
005672  000015  #inherit "CLPrintStrings.inc"
005673  000001  func PrintStrings(var ID, var *msgid, var String)
005674  000002      var StringID, i, ch, offs32[2], res32[2];
005675  000003      StringID := oStringss[1+ID] ;
005676  000004      if (String)
005677  000005          stringsCV[ID] := -1 ;
005678  000006      else
005679  000007          stringsCV[ID] := msgid ;
005680  000008      endif
005681  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005682  000010      txt_FontID(hFonts[ID]) ;
005683  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005684  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005685  000013        
005686  000014      if (*(StringID + Ofs_String_Transparent))
005687  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005688  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005689  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005690  000018      else
005691  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005692  000020          gfx_Clipping(ON) ;
005693  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005694  000022          gfx_Clipping(OFF) ;
005695  000023        
005696  000024      endif
005697  000025        
005698  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005699  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005700  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005701  000029        
005702  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005703  000031        
005704  000032      if (String)
005705  000033          i := 0 ;
005706  000034          ch := msgid[i++] ;
005707  000035          while (ch != 0)
005708  000036              putch(ch) ;
005709  000037              ch := msgid[i++] ;
005710  000038          wend
005711  000039      else
005712  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005713  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005714  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005715  000043          uadd_3232(res32,res32,offs32) ;
005716  000044          file_Seek(hstrings, res32[1], res32[0]);
005717  000045          repeat
005718  000046              if (*(StringID + Ofs_String_Ansi))
005719  000047                  ch := file_GetC(hstrings) ;
005720  000048              else
005721  000049                  ch := file_GetW(hstrings) ;
005722  000050              endif
005723  000051              putch(ch) ;
005724  000052          until (ch == 0) ;
005725  000053      endif
005726  000054        
005727  000055  endfunc
005728  000056        
005729  000016        
005730  000017  #constant IPDatasize 22
005731  000017  #constant IPDatasize 22
005732  000018        
005733  000019  #CONST
005734  000023  #END
005735  000024        
005736  000025  #CONST
005737  000132  #END
005738  000133        
005739  000678  #END
5740  33B0
5741  33B1
5742  33B2
5743  33B3
5744  33B4
5745  33B5
5746  33B6
5747  33B7
5748  33B8
5749  33B9
5750  33BA
5751  33BB
5752  33BC
5753  33BD
5754  33BE
5755  33BF
5756  33C0
5757  33C1
5758  33C2
5759  33C3
5760  33C4
5761  33C5
5762  33C6
5763  33C7
5764  33C8
5765  33C9
5766  33CA
5767  33CB
5768  33CC
5769  33CD
5770  33CE
5771  33CF
5772  33D0
5773  33D1
5774  33D2
5775  33D3
5776  33D4
5777  33D5
5778  33D6
5779  33D7
5780  33D8
5781  33D9
5782  33DA
5783  33DB
5784  33DC
5785  33DD
5786  33DE
5787  33DF
5788  33E0
5789  33E1
5790  33E2
5791  33E3
5792  33E4
5793  33E5
5794  33E6
5795  33E7
5796  33E8
5797  33E9
5798  33EA
5799  33EB
5800  33EC
5801  33ED
5802  33EE
5803  33EF
5804  33F0
5805  33F1
5806  33F2
5807  33F3
5808  33F4
5809  33F5
5810  33F6
5811  33F7
5812  33F8
5813  33F9
5814  33FA
5815  33FB
5816  33FC
5817  33FD
5818  33FE
5819  33FF
5820  3400
5821  3401
5822  3402
5823  3403
5824  3404
5825  3405
5826  3406
5827  3407
5828  3408
5829  3409
5830  340A
5831  340B
5832  340C
5833  340D
5834  340E
5835  340F
5836  3410
5837  3411
5838  3412
5839  3413
5840  3414
5841  3415
5842  3416
5843  3417
5844  3418
5845  3419
5846  341A
5847  341B
5848  341C
5849  341D
5850  341E
5851  341F
5852  3420
5853  3421
5854  3422
5855  3423
5856  3424
5857  3425
5858  3426
5859  3427
5860  3428
5861  3429
5862  342A
5863  342B
5864  342C
5865  342D
5866  342E
5867  342F
5868  3430
5869  3431
5870  3432
5871  3433
5872  3434
5873  3435
5874  3436
5875  3437
5876  3438
5877  3439
5878  343A
5879  343B
5880  343C
5881  343D
5882  343E
5883  343F
5884  3440
5885  3441
5886  3442
5887  3443
5888  3444
5889  3445
5890  3446
5891  3447
5892  3448
5893  3449
5894  344A
5895  344B
5896  344C
5897  344D
5898  344E
5899  344F
5900  3450
5901  3451
5902  3452
5903  3453
5904  3454
5905  3455
5906  3456
5907  3457
5908  3458
5909  3459
5910  345A
5911  345B
5912  345C
5913  345D
5914  345E
5915  345F
5916  3460
5917  3461
5918  3462
5919  3463
5920  3464
5921  3465
5922  3466
5923  3467
5924  3468
5925  3469
5926  346A
5927  346B
5928  346C
5929  346D
5930  346E
5931  346F
5932  3470
5933  3471
5934  3472
5935  3473
5936  3474
5937  3475
5938  3476
5939  3477
5940  3478
5941  3479
5942  347A
5943  347B
5944  347C
5945  347D
5946  347E
5947  347F
5948  3480
5949  3481
5950  3482
5951  3483
5952  3484
5953  3485
5954  3486
5955  3487
5956  3488
5957  3489
5958  348A
5959  348B
5960  348C
5961  348D
5962  348E
5963  348F
5964  3490
5965  3491
5966  3492
5967  3493
5968  3494
5969  3495
5970  3496
5971  3497
5972  3498
5973  3499
5974  349A
5975  349B
5976  349C
5977  349D
5978  349E
5979  349F
5980  34A0
5981  34A1
5982  34A2
5983  34A3
5984  34A4
5985  34A5
5986  34A6
5987  34A7
5988  34A8
5989  34A9
5990  34AA
5991  34AB
5992  34AC
5993  34AD
5994  34AE
5995  34AF
5996  34B0
5997  34B1
5998  34B2
5999  34B3
6000  34B4
6001  34B5
6002  34B6
6003  34B7
6004  34B8
6005  34B9
6006  34BA
6007  34BB
6008  34BC
6009  34BD
6010  34BE
6011  34BF
6012  34C0
6013  34C1
6014  34C2
6015  34C3
6016  34C4
6017  34C5
6018  34C6
6019  34C7
6020  34C8
6021  34C9
6022  34CA
6023  34CB
6024  34CC
6025  34CD
6026  34CE
6027  34CF
6028  34D0
6029  34D1
6030  34D2
6031  34D3
6032  34D4
6033  34D5
6034  34D6
6035  34D7
6036  34D8
6037  34D9
6038  34DA
6039  34DB
6040  34DC
6041  34DD
6042  34DE
6043  34DF
6044  34E0
6045  34E1
6046  34E2
6047  34E3
6048  34E4
6049  34E5
6050  34E6
6051  34E7
6052  34E8
6053  34E9
6054  34EA
6055  34EB
6056  34EC
6057  34ED
6058  34EE
6059  34EF
6060  34F0
6061  34F1
6062  34F2
6063  34F3
6064  34F4
6065  34F5
6066  34F6
6067  34F7
6068  34F8
6069  34F9
6070  34FA
6071  34FB
6072  34FC
6073  34FD
6074  34FE
6075  34FF
6076  3500
6077  3501
6078  3502
6079  3503
6080  3504
6081  3505
6082  3506
6083  3507
6084  3508
6085  3509
6086  350A
6087  350B
6088  350C
6089  350D
6090  350E
6091  350F
6092  3510
6093  3511
6094  3512
6095  3513
6096  3514
6097  3515
6098  3516
6099  3517
6100  3518
6101  3519
6102  351A
6103  351B
6104  351C
6105  351D
6106  351E
6107  351F
6108  3520
6109  3521
6110  3522
6111  3523
6112  3524
6113  3525
6114  3526
6115  3527
6116  3528
6117  3529
6118  352A
6119  352B
6120  352C
6121  352D
6122  352E
6123  352F
6124  3530
6125  3531
6126  3532
6127  3533
6128  3534
6129  3535
6130  3536
6131  3537
6132  3538
6133  3539
6134  353A
6135  353B
6136  353C
6137  353D
6138  353E
6139  353F
6140  3540
6141  3541
6142  3542
6143  3543
6144  3544
6145  3545
6146  3546
6147  3547
6148  3548
6149  3549
6150  354A
6151  354B
6152  354C
6153  354D
6154  354E
6155  354F
6156  3550
6157  3551
6158  3552
6159  3553
6160  3554
6161  3555
6162  3556
6163  3557
6164  3558
6165  3559
6166  355A
6167  355B
6168  355C
6169  355D
6170  355E
6171  355F
6172  3560
6173  3561
6174  3562
6175  3563
6176  3564
6177  3565
6178  3566
6179  3567
6180  3568
6181  3569
6182  356A
6183  356B
6184  356C
6185  356D
6186  356E
6187  356F
6188  3570
6189  3571
6190  3572
6191  3573
6192  3574
6193  3575
6194  3576
6195  3577
6196  3578
6197  3579
6198  357A
6199  357B
6200  357C
6201  357D
6202  357E
6203  357F
6204  3580
6205  3581
6206  3582
6207  3583
6208  3584
6209  3585
6210  3586
6211  3587
6212  3588
6213  3589
6214  358A
6215  358B
6216  358C
6217  358D
6218  358E
6219  358F
6220  3590
6221  3591
6222  3592
6223  3593
6224  3594
6225  3595
6226  3596
6227  3597
6228  3598
6229  3599
6230  359A
6231  359B
6232  359C
6233  359D
6234  359E
6235  359F
6236  35A0
6237  35A1
6238  35A2
6239  35A3
6240  35A4
6241  35A5
6242  35A6
6243  35A7
6244  35A8
6245  35A9
6246  35AA
6247  35AB
6248  35AC
6249  35AD
6250  35AE
6251  35AF
6252  35B0
6253  35B1
6254  35B2
6255  35B3
6256  35B4
6257  35B5
6258  35B6
6259  35B7
6260  35B8
6261  35B9
6262  35BA
6263  35BB
6264  35BC
6265  35BD
6266  35BE
6267  35BF
6268  35C0
6269  35C1
6270  35C2
6271  35C3
6272  35C4
6273  35C5
6274  35C6
6275  35C7
6276  35C8
6277  35C9
6278  35CA
6279  35CB
6280  35CC
6281  35CD
6282  35CE
6283  35CF
6284  35D0
6285  35D1
6286  35D2
6287  35D3
6288  35D4
6289  35D5
6290  35D6
6291  35D7
6292  35D8
6293  35D9
6294  35DA
6295  35DB
6296  35DC
6297  35DD
6298  35DE
6299  35DF
6300  35E0
6301  35E1
6302  35E2
6303  35E3
6304  35E4
6305  35E5
6306  35E6
6307  35E7
6308  35E8
6309  35E9
6310  35EA
6311  35EB
6312  35EC
6313  35ED
6314  35EE
6315  35EF
6316  35F0
6317  35F1
6318  35F2
6319  35F3
6320  35F4
6321  35F5
6322  35F6
6323  35F7
6324  35F8
6325  35F9
6326  35FA
6327  35FB
6328  35FC
6329  35FD
6330  35FE
6331  35FF
6332  3600
6333  3601
6334  3602
6335  3603
6336  3604
6337  3605
6338  3606
6339  3607
6340  3608
6341  3609
6342  360A
6343  360B
6344  360C
6345  360D
6346  360E
6347  360F
6348  3610
6349  3611
6350  3612
6351  3613
6352  3614
6353  3615
6354  3616
6355  3617
6356  3618
6357  3619
6358  361A
6359  361B
6360  361C
6361  361D
6362  361E
6363  361F
6364  3620
6365  3621
6366  3622
6367  3623
6368  3624
6369  3625
6370  3626
6371  3627
6372  3628
6373  3629
6374  362A
6375  362B
6376  362C
6377  362D
6378  362E
6379  362F
6380  3630
6381  3631
6382  3632
6383  3633
6384  3634
6385  3635
6386  3636
6387  3637
6388  3638
6389  3639
6390  363A
6391  363B
6392  363C
6393  363D
6394  363E
6395  363F
6396  3640
6397  3641
6398  3642
6399  3643
6400  3644
6401  3645
6402  3646
6403  3647
6404  3648
6405  3649
6406  364A
6407  364B
6408  364C
6409  364D
6410  364E
6411  364F
6412  3650
6413  3651
6414  3652
6415  3653
6416  3654
6417  3655
6418  3656
6419  3657
6420  3658
6421  3659
6422  365A
6423  365B
6424  365C
6425  365D
6426  365E
6427  365F
6428  3660
6429  3661
6430  3662
6431  3663
6432  3664
6433  3665
6434  3666
6435  3667
6436  3668
6437  3669
6438  366A
6439  366B
6440  366C
6441  366D
6442  366E
6443  366F
6444  3670
6445  3671
6446  3672
6447  3673
6448  3674
6449  3675
6450  3676
6451  3677
6452  3678
6453  3679
6454  367A
6455  367B
6456  367C
6457  367D
6458  367E
6459  367F
6460  3680
6461  3681
6462  3682
6463  3683
6464  3684
6465  3685
6466  3686
6467  3687
6468  3688
6469  3689
6470  368A
6471  368B
6472  368C
6473  368D
6474  368E
6475  368F
6476  3690
6477  3691
6478  3692
6479  3693
6480  3694
6481  3695
6482  3696
6483  3697
6484  3698
6485  3699
6486  369A
6487  369B
6488  369C
6489  369D
6490  369E
6491  369F
6492  36A0
6493  36A1
6494  36A2
6495  36A3
6496  36A4
6497  36A5
6498  36A6
6499  36A7
6500  36A8
6501  36A9
6502  36AA
6503  36AB
6504  36AC
6505  36AD
6506  36AE
6507  36AF
6508  36B0
6509  36B1
6510  36B2
6511  36B3
6512  36B4
6513  36B5
6514  36B6
6515  36B7
6516  36B8
6517  36B9
6518  36BA
6519  36BB
6520  36BC
6521  36BD
6522  36BE
6523  36BF
6524  36C0
6525  36C1
6526  36C2
6527  36C3
6528  36C4
6529  36C5
6530  36C6
6531  36C7
6532  36C8
6533  36C9
6534  36CA
6535  36CB
6536  36CC
6537  36CD
6538  36CE
6539  36CF
6540  36D0
6541  36D1
6542  36D2
6543  36D3
6544  36D4
6545  36D5
6546  36D6
6547  36D7
6548  36D8
6549  36D9
6550  36DA
6551  36DB
6552  36DC
6553  36DD
6554  36DE
6555  36DF
6556  36E0
6557  36E1
6558  36E2
6559  36E3
6560  36E4
6561  36E5
6562  36E6
6563  36E7
6564  36E8
6565  36E9
6566  36EA
6567  36EB
6568  36EC
6569  36ED
6570  36EE
6571  36EF
6572  36F0
6573  36F1
6574  36F2
6575  36F3
6576  36F4
6577  36F5
6578  36F6
6579  36F7
6580  36F8
6581  36F9
6582  36FA
6583  36FB
6584  36FC
6585  36FD
6586  36FE
6587  36FF
6588  3700
6589  3701
6590  3702
6591  3703
6592  3704
6593  3705
6594  3706
6595  3707
6596  3708
6597  3709
6598  370A
6599  370B
6600  370C
6601  370D
6602  370E
6603  370F
6604  3710
6605  3711
6606  3712
6607  3713
6608  3714
6609  3715
6610  3716
6611  3717
6612  3718
6613  3719
6614  371A
6615  371B
6616  371C
6617  371D
6618  371E
6619  371F
6620  3720
6621  3721
6622  3722
6623  3723
6624  3724
6625  3725
6626  3726
6627  3727
6628  3728
6629  3729
6630  372A
6631  372B
6632  372C
6633  372D
6634  372E
6635  372F
6636  3730
6637  3731
6638  3732
6639  3733
6640  3734
6641  3735
6642  3736
6643  3737
6644  3738
6645  3739
6646  373A
6647  373B
6648  373C
6649  373D
6650  373E
6651  373F
6652  3740
6653  3741
6654  3742
6655  3743
6656  3744
6657  3745
6658  3746
6659  3747
6660  3748
6661  3749
6662  374A
6663  374B
6664  374C
6665  374D
6666  374E
6667  374F
6668  3750
6669  3751
6670  3752
6671  3753
6672  3754
6673  3755
6674  3756
6675  3757
6676  3758
6677  3759
6678  375A
6679  375B
6680  375C
6681  375D
6682  375E
6683  375F
6684  3760
6685  3761
6686  3762
6687  3763
6688  3764
6689  3765
6690  3766
6691  3767
6692  3768
6693  3769
6694  376A
6695  376B
6696  376C
6697  376D
6698  376E
6699  376F
6700  3770
6701  3771
6702  3772
6703  3773
6704  3774
6705  3775
6706  3776
6707  3777
6708  3778
6709  3779
6710  377A
6711  377B
6712  377C
6713  377D
6714  377E
6715  377F
6716  3780
6717  3781
6718  3782
6719  3783
6720  3784
6721  3785
6722  3786
6723  3787
6724  3788
6725  3789
6726  378A
6727  378B
6728  378C
6729  378D
6730  378E
6731  378F
6732  3790
6733  3791
6734  3792
6735  3793
6736  3794
6737  3795
6738  3796
6739  3797
6740  3798
6741  3799
6742  379A
6743  379B
6744  379C
6745  379D
6746  379E
6747  379F
6748  37A0
6749  37A1
6750  37A2
6751  37A3
6752  37A4
6753  37A5
6754  37A6
6755  37A7
6756  37A8
6757  37A9
6758  37AA
6759  37AB
6760  37AC
6761  37AD
6762  37AE
6763  37AF
6764  37B0
6765  37B1
6766  37B2
6767  37B3
6768  37B4
6769  37B5
6770  37B6
6771  37B7
6772  37B8
6773  37B9
6774  37BA
6775  37BB
6776  37BC
6777  37BD
6778  37BE
6779  37BF
6780  37C0
6781  37C1
6782  37C2
6783  37C3
6784  37C4
6785  37C5
6786  37C6
6787  37C7
6788  37C8
6789  37C9
6790  37CA
6791  37CB
6792  37CC
6793  37CD
6794  37CE
6795  37CF
6796  37D0
6797  37D1
6798  37D2
6799  37D3
6800  37D4
6801  37D5
6802  37D6
6803  37D7
6804  37D8
6805  37D9
6806  37DA
6807  37DB
6808  37DC
6809  37DD
6810  37DE
6811  37DF
6812  37E0
6813  37E1
6814  37E2
6815  37E3
6816  37E4
6817  37E5
6818  37E6
6819  37E7
6820  37E8
6821  37E9
6822  37EA
6823  37EB
6824  37EC
6825  37ED
6826  37EE
6827  37EF
6828  37F0
6829  37F1
6830  37F2
6831  37F3
6832  37F4
6833  37F5
6834  37F6
6835  37F7
6836  37F8
6837  37F9
6838  37FA
6839  37FB
6840  37FC
6841  37FD
6842  37FE
6843  37FF
6844  3800
6845  3801
6846  3802
6847  3803
6848  3804
6849  3805
6850  3806
6851  3807
6852  3808
6853  3809
6854  380A
6855  380B
6856  380C
6857  380D
6858  380E
6859  380F
6860  3810
6861  3811
6862  3812
6863  3813
6864  3814
6865  3815
6866  3816
6867  3817
6868  3818
6869  3819
6870  381A
6871  381B
6872  381C
6873  381D
6874  381E
6875  381F
6876  3820
6877  3821
6878  3822
6879  3823
6880  3824
6881  3825
6882  3826
6883  3827
6884  3828
6885  3829
6886  382A
6887  382B
6888  382C
6889  382D
6890  382E
6891  382F
6892  3830
6893  3831
6894  3832
6895  3833
6896  3834
6897  3835
6898  3836
6899  3837
6900  3838
6901  3839
6902  383A
6903  383B
6904  383C
6905  383D
6906  383E
6907  383F
6908  3840
6909  3841
6910  3842
6911  3843
6912  3844
6913  3845
6914  3846
6915  3847
6916  3848
6917  3849
6918  384A
6919  384B
6920  384C
6921  384D
6922  384E
6923  384F
6924  3850
6925  3851
6926  3852
6927  3853
6928  3854
6929  3855
6930  3856
6931  3857
6932  3858
6933  3859
6934  385A
6935  385B
6936  385C
6937  385D
6938  385E
6939  385F
6940  3860
6941  3861
6942  3862
6943  3863
6944  3864
6945  3865
6946  3866
6947  3867
6948  3868
6949  3869
6950  386A
6951  386B
6952  386C
6953  386D
6954  386E
6955  386F
6956  3870
6957  3871
6958  3872
6959  3873
6960  3874
6961  3875
6962  3876
6963  3877
6964  3878
6965  3879
6966  387A
6967  387B
6968  387C
6969  387D
6970  387E
6971  387F
6972  3880
6973  3881
6974  3882
6975  3883
6976  3884
6977  3885
6978  3886
6979  3887
6980  3888
6981  3889
6982  388A
6983  388B
6984  388C
6985  388D
6986  388E
6987  388F
6988  3890
6989  3891
6990  3892
6991  3893
6992  3894
6993  3895
6994  3896
6995  3897
6996  3898
6997  3899
6998  389A
6999  389B
7000  389C
7001  389D
7002  389E
7003  389F
7004  38A0
7005  38A1
7006  38A2
7007  38A3
7008  38A4
7009  38A5
7010  38A6
7011  38A7
7012  38A8
7013  38A9
7014  38AA
7015  38AB
7016  38AC
7017  38AD
7018  38AE
7019  38AF
7020  38B0
7021  38B1
7022  38B2
7023  38B3
7024  38B4
7025  38B5
7026  38B6
7027  38B7
7028  38B8
7029  38B9
7030  38BA
7031  38BB
7032  38BC
7033  38BD
7034  38BE
7035  38BF
7036  38C0
7037  38C1
7038  38C2
7039  38C3
7040  38C4
7041  38C5
7042  38C6
7043  38C7
7044  38C8
7045  38C9
7046  38CA
7047  38CB
7048  38CC
7049  38CD
7050  38CE
7051  38CF
7052  38D0
7053  38D1
7054  38D2
7055  38D3
7056  38D4
7057  38D5
7058  38D6
7059  38D7
7060  38D8
7061  38D9
7062  38DA
7063  38DB
7064  38DC
7065  38DD
7066  38DE
7067  38DF
7068  38E0
7069  38E1
7070  38E2
7071  38E3
7072  38E4
7073  38E5
7074  38E6
7075  38E7
7076  38E8
7077  38E9
7078  38EA
7079  38EB
7080  38EC
7081  38ED
7082  38EE
7083  38EF
7084  38F0
7085  38F1
7086  38F2
7087  38F3
7088  38F4
7089  38F5
7090  38F6
7091  38F7
7092  38F8
7093  38F9
7094  38FA
7095  38FB
7096  38FC
7097  38FD
7098  38FE
7099  38FF
7100  3900
7101  3901
7102  3902
7103  3903
7104  3904
7105  3905
7106  3906
7107  3907
7108  3908
7109  3909
7110  390A
7111  390B
7112  390C
7113  390D
7114  390E
7115  390F
7116  3910
7117  3911
7118  3912
7119  3913
7120  3914
7121  3915
7122  3916
7123  3917
7124  3918
7125  3919
7126  391A
7127  391B
7128  391C
7129  391D
7130  391E
7131  391F
7132  3920
7133  3921
7134  3922
7135  3923
7136  3924
7137  3925
7138  3926
7139  3927
7140  3928
7141  3929
7142  392A
7143  392B
7144  392C
7145  392D
7146  392E
7147  392F
7148  3930
7149  3931
7150  3932
7151  3933
7152  3934
7153  3935
7154  3936
7155  3937
7156  3938
7157  3939
7158  393A
7159  393B
7160  393C
7161  393D
7162  393E
7163  393F
7164  3940
7165  3941
7166  3942
7167  3943
7168  3944
7169  3945
7170  3946
7171  3947
7172  3948
7173  3949
7174  394A
7175  394B
7176  394C
7177  394D
7178  394E
7179  394F
7180  3950
7181  3951
7182  3952
7183  3953
7184  3954
7185  3955
7186  3956
7187  3957
7188  3958
7189  3959
7190  395A
7191  395B
7192  395C
7193  395D
7194  395E
7195  395F
7196  3960
7197  3961
7198  3962
7199  3963
7200  3964
7201  3965
7202  3966
7203  3967
7204  3968
7205  3969
7206  396A
7207  396B
7208  396C
7209  396D
7210  396E
7211  396F
7212  3970
7213  3971
7214  3972
7215  3973
7216  3974
7217  3975
7218  3976
7219  3977
7220  3978
7221  3979
7222  397A
7223  397B
7224  397C
7225  397D
7226  397E
7227  397F
7228  3980
7229  3981
7230  3982
7231  3983
7232  3984
7233  3985
7234  3986
7235  3987
7236  3988
7237  3989
7238  398A
7239  398B
7240  398C
7241  398D
7242  398E
7243  398F
7244  3990
7245  3991
7246  3992
7247  3993
7248  3994
7249  3995
7250  3996
7251  3997
7252  3998
7253  3999
7254  399A
7255  399B
7256  399C
7257  399D
7258  399E
7259  399F
7260  39A0
7261  39A1
7262  39A2
7263  39A3
7264  39A4
7265  39A5
7266  39A6
7267  39A7
7268  39A8
7269  39A9
7270  39AA
7271  39AB
7272  39AC
7273  39AD
7274  39AE
7275  39AF
7276  39B0
7277  39B1
7278  39B2
7279  39B3
7280  39B4
7281  39B5
7282  39B6
7283  39B7
7284  39B8
7285  39B9
7286  39BA
7287  39BB
7288  39BC
7289  39BD
7290  39BE
7291  39BF
7292  39C0
7293  39C1
7294  39C2
7295  39C3
7296  39C4
7297  39C5
7298  39C6
7299  39C7
7300  39C8
7301  39C9
7302  39CA
7303  39CB
7304  39CC
7305  39CD
7306  39CE
7307  39CF
7308  39D0
7309  39D1
7310  39D2
7311  39D3
7312  39D4
7313  39D5
7314  39D6
7315  39D7
7316  39D8
7317  39D9
7318  39DA
7319  39DB
7320  39DC
7321  39DD
7322  39DE
7323  39DF
7324  39E0
7325  39E1
7326  39E2
7327  39E3
7328  39E4
7329  39E5
7330  39E6
7331  39E7
7332  39E8
7333  39E9
7334  39EA
7335  39EB
7336  39EC
7337  39ED
7338  39EE
7339  39EF
7340  39F0
7341  39F1
7342  39F2
7343  39F3
7344  39F4
7345  39F5
7346  39F6
7347  39F7
7348  39F8
7349  39F9
7350  39FA
7351  39FB
7352  39FC
7353  39FD
7354  39FE
7355  39FF
7356  3A00
7357  3A01
7358  3A02
7359  3A03
7360  3A04
7361  3A05
7362  3A06
7363  3A07
7364  3A08
7365  3A09
7366  3A0A
7367  3A0B
7368  3A0C
7369  3A0D
7370  3A0E
7371  3A0F
7372  3A10
7373  3A11
7374  3A12
7375  3A13
7376  3A14
7377  3A15
7378  3A16
7379  3A17
7380  3A18
7381  3A19
7382  3A1A
7383  3A1B
7384  3A1C
7385  3A1D
7386  3A1E
7387  3A1F
7388  3A20
7389  3A21
7390  3A22
7391  3A23
7392  3A24
7393  3A25
7394  3A26
7395  3A27
7396  3A28
7397  3A29
7398  3A2A
7399  3A2B
7400  3A2C
7401  3A2D
7402  3A2E
7403  3A2F
7404  3A30
7405  3A31
7406  3A32
7407  3A33
7408  3A34
7409  3A35
7410  3A36
7411  3A37
7412  3A38
7413  3A39
7414  3A3A
7415  3A3B
7416  3A3C
7417  3A3D
7418  3A3E
7419  3A3F
7420  3A40
7421  3A41
7422  3A42
7423  3A43
7424  3A44
7425  3A45
7426  3A46
7427  3A47
7428  3A48
7429  3A49
7430  3A4A
7431  3A4B
7432  3A4C
7433  3A4D
7434  3A4E
7435  3A4F
7436  3A50
7437  3A51
7438  3A52
7439  3A53
7440  3A54
7441  3A55
7442  3A56
7443  3A57
7444  3A58
7445  3A59
7446  3A5A
7447  3A5B
7448  3A5C
7449  3A5D
7450  3A5E
7451  3A5F
7452  3A60
7453  3A61
7454  3A62
7455  3A63
7456  3A64
7457  3A65
7458  3A66
7459  3A67
7460  3A68
7461  3A69
7462  3A6A
7463  3A6B
7464  3A6C
7465  3A6D
7466  3A6E
7467  3A6F
7468  3A70
7469  3A71
7470  3A72
7471  3A73
7472  3A74
7473  3A75
7474  3A76
7475  3A77
7476  3A78
7477  3A79
7478  3A7A
7479  3A7B
7480  3A7C
7481  3A7D
7482  3A7E
7483  3A7F
7484  3A80
7485  3A81
7486  3A82
7487  3A83
7488  3A84
7489  3A85
7490  3A86
7491  3A87
7492  3A88
7493  3A89
7494  3A8A
7495  3A8B
7496  3A8C
7497  3A8D
7498  3A8E
7499  3A8F
7500  3A90
7501  3A91
7502  3A92
7503  3A93
7504  3A94
7505  3A95
7506  3A96
7507  3A97
7508  3A98
7509  3A99
7510  3A9A
7511  3A9B
7512  3A9C
7513  3A9D
7514  3A9E
7515  3A9F
7516  3AA0
7517  3AA1
7518  3AA2
7519  3AA3
7520  3AA4
7521  3AA5
7522  3AA6
7523  3AA7
7524  3AA8
7525  3AA9
7526  3AAA
7527  3AAB
7528  3AAC
7529  3AAD
7530  3AAE
7531  3AAF
7532  3AB0
7533  3AB1
7534  3AB2
7535  3AB3
7536  3AB4
7537  3AB5
7538  3AB6
7539  3AB7
7540  3AB8
7541  3AB9
7542  3ABA
7543  3ABB
7544  3ABC
7545  3ABD
7546  3ABE
7547  3ABF
7548  3AC0
7549  3AC1
7550  3AC2
7551  3AC3
7552  3AC4
7553  3AC5
7554  3AC6
7555  3AC7
7556  3AC8
7557  3AC9
7558  3ACA
7559  3ACB
7560  3ACC
7561  3ACD
7562  3ACE
7563  3ACF
7564  3AD0
7565  3AD1
7566  3AD2
7567  3AD3
7568  3AD4
7569  3AD5
7570  3AD6
7571  3AD7
7572  3AD8
7573  3AD9
7574  3ADA
7575  3ADB
7576  3ADC
7577  3ADD
7578  3ADE
7579  3ADF
7580  3AE0
7581  3AE1
7582  3AE2
7583  3AE3
7584  3AE4
7585  3AE5
7586  3AE6
7587  3AE7
7588  3AE8
7589  3AE9
7590  3AEA
7591  3AEB
7592  3AEC
7593  3AED
7594  3AEE
7595  3AEF
7596  3AF0
7597  3AF1
7598  3AF2
7599  3AF3
7600  3AF4
7601  3AF5
7602  3AF6
7603  3AF7
7604  3AF8
7605  3AF9
7606  3AFA
7607  3AFB
7608  3AFC
7609  3AFD
7610  3AFE
7611  3AFF
7612  3B00
7613  3B01
7614  3B02
7615  3B03
7616  3B04
7617  3B05
7618  3B06
7619  3B07
7620  3B08
7621  3B09
7622  3B0A
7623  3B0B
7624  3B0C
7625  3B0D
7626  3B0E
7627  3B0F
7628  3B10
7629  3B11
7630  3B12
7631  3B13
7632  3B14
7633  3B15
7634  3B16
7635  3B17
7636  3B18
7637  3B19
7638  3B1A
7639  3B1B
7640  3B1C
7641  3B1D
7642  3B1E
7643  3B1F
7644  3B20
7645  3B21
7646  3B22
7647  3B23
7648  3B24
7649  3B25
7650  3B26
7651  3B27
7652  3B28
7653  3B29
7654  3B2A
7655  3B2B
7656  3B2C
7657  3B2D
7658  3B2E
7659  3B2F
7660  3B30
7661  3B31
7662  3B32
7663  3B33
7664  3B34
7665  3B35
7666  3B36
7667  3B37
7668  3B38
7669  3B39
7670  3B3A
7671  3B3B
7672  3B3C
7673  3B3D
7674  3B3E
7675  3B3F
7676  3B40
7677  3B41
7678  3B42
7679  3B43
7680  3B44
7681  3B45
7682  3B46
7683  3B47
7684  3B48
7685  3B49
7686  3B4A
7687  3B4B
7688  3B4C
7689  3B4D
7690  3B4E
7691  3B4F
7692  3B50
7693  3B51
7694  3B52
7695  3B53
7696  3B54
7697  3B55
7698  3B56
7699  3B57
7700  3B58
7701  3B59
7702  3B5A
7703  3B5B
7704  3B5C
7705  3B5D
7706  3B5E
7707  3B5F
7708  3B60
7709  3B61
7710  3B62
7711  3B63
7712  3B64
7713  3B65
7714  3B66
7715  3B67
7716  3B68
7717  3B69
7718  3B6A
7719  3B6B
7720  3B6C
7721  3B6D
7722  3B6E
7723  3B6F
7724  3B70
7725  3B71
7726  3B72
7727  3B73
7728  3B74
7729  3B75
7730  3B76
7731  3B77
7732  3B78
7733  3B79
7734  3B7A
7735  3B7B
7736  3B7C
7737  3B7D
7738  3B7E
7739  3B7F
7740  3B80
7741  3B81
7742  3B82
7743  3B83
7744  3B84
7745  3B85
7746  3B86
7747  3B87
7748  3B88
7749  3B89
7750  3B8A
7751  3B8B
7752  3B8C
7753  3B8D
7754  3B8E
7755  3B8F
7756  3B90
7757  3B91
7758  3B92
7759  3B93
7760  3B94
7761  3B95
7762  3B96
7763  3B97
7764  3B98
7765  3B99
7766  3B9A
7767  3B9B
7768  3B9C
7769  3B9D
7770  3B9E
7771  3B9F
7772  3BA0
7773  3BA1
7774  3BA2
7775  3BA3
7776  3BA4
7777  3BA5
7778  3BA6
7779  3BA7
7780  3BA8
7781  3BA9
7782  3BAA
7783  3BAB
7784  3BAC
7785  3BAD
7786  3BAE
7787  3BAF
7788  3BB0
7789  3BB1
7790  3BB2
7791  3BB3
7792  3BB4
7793  3BB5
7794  3BB6
7795  3BB7
7796  3BB8
7797  3BB9
7798  3BBA
7799  3BBB
7800  3BBC
7801  3BBD
7802  3BBE
7803  3BBF
7804  3BC0
7805  3BC1
7806  3BC2
7807  3BC3
7808  3BC4
7809  3BC5
7810  3BC6
7811  3BC7
7812  3BC8
7813  3BC9
7814  3BCA
7815  3BCB
7816  3BCC
7817  3BCD
7818  3BCE
7819  3BCF
7820  3BD0
7821  3BD1
7822  3BD2
7823  3BD3
7824  3BD4
7825  3BD5
7826  3BD6
7827  3BD7
7828  3BD8
7829  3BD9
7830  3BDA
7831  3BDB
7832  3BDC
7833  3BDD
7834  3BDE
7835  3BDF
7836  3BE0
7837  3BE1
7838  3BE2
7839  3BE3
7840  3BE4
7841  3BE5
7842  3BE6
7843  3BE7
7844  3BE8
7845  3BE9
7846  3BEA
7847  3BEB
7848  3BEC
7849  3BED
7850  3BEE
7851  3BEF
7852  3BF0
7853  3BF1
7854  3BF2
7855  3BF3
7856  3BF4
7857  3BF5
7858  3BF6
7859  3BF7
7860  3BF8
7861  3BF9
7862  3BFA
7863  3BFB
7864  3BFC
7865  3BFD
7866  3BFE
7867  3BFF
7868  3C00
7869  3C01
7870  3C02
7871  3C03
7872  3C04
7873  3C05
7874  3C06
7875  3C07
7876  3C08
7877  3C09
7878  3C0A
7879  3C0B
7880  3C0C
7881  3C0D
7882  3C0E
7883  3C0F
7884  3C10
7885  3C11
7886  3C12
7887  3C13
7888  3C14
7889  3C15
7890  3C16
7891  3C17
7892  3C18
7893  3C19
7894  3C1A
7895  3C1B
7896  3C1C
7897  3C1D
7898  3C1E
7899  3C1F
7900  3C20
7901  3C21
7902  3C22
7903  3C23
7904  3C24
7905  3C25
7906  3C26
7907  3C27
7908  3C28
7909  3C29
7910  3C2A
7911  3C2B
7912  3C2C
7913  3C2D
7914  3C2E
7915  3C2F
7916  3C30
7917  3C31
7918  3C32
7919  3C33
7920  3C34
7921  3C35
7922  3C36
7923  3C37
7924  3C38
7925  3C39
7926  3C3A
7927  3C3B
7928  3C3C
7929  3C3D
7930  3C3E
7931  3C3F
7932  3C40
7933  3C41
7934  3C42
7935  3C43
7936  3C44
7937  3C45
7938  3C46
7939  3C47
7940  3C48
7941  3C49
7942  3C4A
7943  3C4B
7944  3C4C
7945  3C4D
7946  3C4E
7947  3C4F
7948  3C50
7949  3C51
7950  3C52
7951  3C53
7952  3C54
7953  3C55
7954  3C56
7955  3C57
7956  3C58
7957  3C59
7958  3C5A
7959  3C5B
7960  3C5C
7961  3C5D
7962  3C5E
7963  3C5F
7964  3C60
7965  3C61
7966  3C62
7967  3C63
7968  3C64
7969  3C65
7970  3C66
7971  3C67
7972  3C68
7973  3C69
7974  3C6A
7975  3C6B
7976  3C6C
7977  3C6D
7978  3C6E
7979  3C6F
7980  3C70
7981  3C71
7982  3C72
7983  3C73
7984  3C74
7985  3C75
7986  3C76
7987  3C77
7988  3C78
7989  3C79
7990  3C7A
7991  3C7B
7992  3C7C
7993  3C7D
7994  3C7E
7995  3C7F
7996  3C80
7997  3C81
7998  3C82
7999  3C83
8000  3C84
8001  3C85
8002  3C86
8003  3C87
8004  3C88
8005  3C89
8006  3C8A
8007  3C8B
8008  3C8C
8009  3C8D
8010  3C8E
8011  3C8F
8012  3C90
8013  3C91
8014  3C92
8015  3C93
8016  3C94
8017  3C95
8018  3C96
8019  3C97
8020  3C98
8021  3C99
8022  3C9A
8023  3C9B
8024  3C9C
8025  3C9D
8026  3C9E
8027  3C9F
8028  3CA0
8029  3CA1
8030  3CA2
8031  3CA3
8032  3CA4
8033  3CA5
8034  3CA6
8035  3CA7
8036  3CA8
8037  3CA9
8038  3CAA
8039  3CAB
8040  3CAC
8041  3CAD
8042  3CAE
8043  3CAF
8044  3CB0
8045  3CB1
8046  3CB2
8047  3CB3
8048  3CB4
8049  3CB5
8050  3CB6
8051  3CB7
8052  3CB8
8053  3CB9
8054  3CBA
8055  3CBB
8056  3CBC
8057  3CBD
8058  3CBE
8059  3CBF
8060  3CC0
8061  3CC1
8062  3CC2
8063  3CC3
8064  3CC4
8065  3CC5
8066  3CC6
8067  3CC7
8068  3CC8
8069  3CC9
8070  3CCA
8071  3CCB
8072  3CCC
8073  3CCD
8074  3CCE
8075  3CCF
8076  3CD0
8077  3CD1
8078  3CD2
8079  3CD3
8080  3CD4
8081  3CD5
8082  3CD6
8083  3CD7
8084  3CD8
8085  3CD9
8086  3CDA
8087  3CDB
8088  3CDC
8089  3CDD
8090  3CDE
8091  3CDF
8092  3CE0
8093  3CE1
8094  3CE2
8095  3CE3
8096  3CE4
8097  3CE5
8098  3CE6
8099  3CE7
8100  3CE8
8101  3CE9
8102  3CEA
8103  3CEB
8104  3CEC
8105  3CED
8106  3CEE
8107  3CEF
8108  3CF0
8109  3CF1
8110  3CF2
8111  3CF3
8112  3CF4
8113  3CF5
8114  3CF6
8115  3CF7
8116  3CF8
8117  3CF9
8118  3CFA
8119  3CFB
8120  3CFC
8121  3CFD
8122  3CFE
8123  3CFF
8124  3D00
8125  3D01
8126  3D02
8127  3D03
8128  3D04
8129  3D05
8130  3D06
8131  3D07
8132  3D08
8133  3D09
8134  3D0A
8135  3D0B
8136  3D0C
8137  3D0D
8138  3D0E
8139  3D0F
8140  3D10
8141  3D11
8142  3D12
8143  3D13
8144  3D14
8145  3D15
8146  3D16
8147  3D17
8148  3D18
8149  3D19
8150  3D1A
8151  3D1B
8152  3D1C
8153  3D1D
8154  3D1E
8155  3D1F
8156  3D20
8157  3D21
8158  3D22
8159  3D23
8160  3D24
8161  3D25
8162  3D26
8163  3D27
8164  3D28
8165  3D29
8166  3D2A
8167  3D2B
8168  3D2C
8169  3D2D
8170  3D2E
8171  3D2F
8172  3D30
8173  3D31
8174  3D32
8175  3D33
8176  3D34
8177  3D35
8178  3D36
8179  3D37
8180  3D38
8181  3D39
8182  3D3A
8183  3D3B
8184  3D3C
8185  3D3D
8186  3D3E
8187  3D3F
8188  3D40
8189  3D41
8190  3D42
8191  3D43
8192  3D44
8193  3D45
8194  3D46
8195  3D47
8196  3D48
8197  3D49
8198  3D4A
8199  3D4B
8200  3D4C
8201  3D4D
8202  3D4E
8203  3D4F
8204  3D50
8205  3D51
8206  3D52
8207  3D53
8208  3D54
8209  3D55
8210  3D56
8211  3D57
8212  3D58
8213  3D59
8214  3D5A
8215  3D5B
8216  3D5C
8217  3D5D
8218  3D5E
8219  3D5F
8220  3D60
8221  3D61
8222  3D62
8223  3D63
8224  3D64
8225  3D65
8226  3D66
8227  3D67
8228  3D68
8229  3D69
8230  3D6A
8231  3D6B
8232  3D6C
8233  3D6D
8234  3D6E
8235  3D6F
8236  3D70
8237  3D71
8238  3D72
8239  3D73
8240  3D74
8241  3D75
8242  3D76
8243  3D77
8244  3D78
8245  3D79
8246  3D7A
8247  3D7B
8248  3D7C
8249  3D7D
8250  3D7E
8251  3D7F
8252  3D80
8253  3D81
8254  3D82
8255  3D83
8256  3D84
8257  3D85
8258  3D86
8259  3D87
8260  3D88
8261  3D89
8262  3D8A
8263  3D8B
8264  3D8C
8265  3D8D
8266  3D8E
8267  3D8F
8268  3D90
8269  3D91
8270  3D92
8271  3D93
8272  3D94
8273  3D95
8274  3D96
8275  3D97
8276  3D98
8277  3D99
8278  3D9A
8279  3D9B
8280  3D9C
8281  3D9D
8282  3D9E
8283  3D9F
8284  3DA0
8285  3DA1
8286  3DA2
8287  3DA3
8288  3DA4
8289  3DA5
8290  3DA6
8291  3DA7
8292  3DA8
8293  3DA9
8294  3DAA
8295  3DAB
8296  3DAC
8297  3DAD
8298  3DAE
8299  3DAF
8300  3DB0
8301  3DB1
8302  3DB2
8303  3DB3
8304  3DB4
8305  3DB5
8306  3DB6
8307  3DB7
8308  3DB8
8309  3DB9
8310  3DBA
8311  3DBB
8312  3DBC
8313  3DBD
8314  3DBE
8315  3DBF
8316  3DC0
8317  3DC1
8318  3DC2
8319  3DC3
8320  3DC4
8321  3DC5
8322  3DC6
8323  3DC7
8324  3DC8
8325  3DC9
8326  3DCA
8327  3DCB
8328  3DCC
8329  3DCD
8330  3DCE
8331  3DCF
8332  3DD0
8333  3DD1
8334  3DD2
8335  3DD3
8336  3DD4
8337  3DD5
8338  3DD6
8339  3DD7
8340  3DD8
8341  3DD9
8342  3DDA
8343  3DDB
8344  3DDC
8345  3DDD
8346  3DDE
8347  3DDF
8348  3DE0
8349  3DE1
8350  3DE2
8351  3DE3
8352  3DE4
8353  3DE5
8354  3DE6
8355  3DE7
8356  3DE8
8357  3DE9
8358  3DEA
8359  3DEB
8360  3DEC
8361  3DED
8362  3DEE
8363  3DEF
8364  3DF0
8365  3DF1
8366  3DF2
8367  3DF3
8368  3DF4
8369  3DF5
8370  3DF6
8371  3DF7
8372  3DF8
8373  3DF9
8374  3DFA
8375  3DFB
8376  3DFC
8377  3DFD
8378  3DFE
8379  3DFF
8380  3E00
8381  3E01
8382  3E02
8383  3E03
8384  3E04
8385  3E05
8386  3E06
8387  3E07
8388  3E08
8389  3E09
8390  3E0A
8391  3E0B
8392  3E0C
8393  3E0D
8394  3E0E
8395  3E0F
8396  3E10
8397  3E11
8398  3E12
8399  3E13
8400  3E14
8401  3E15
8402  3E16
8403  3E17
8404  3E18
8405  3E19
8406  3E1A
8407  3E1B
8408  3E1C
8409  3E1D
8410  3E1E
8411  3E1F
8412  3E20
8413  3E21
8414  3E22
8415  3E23
8416  3E24
8417  3E25
8418  3E26
8419  3E27
8420  3E28
8421  3E29
8422  3E2A
8423  3E2B
8424  3E2C
8425  3E2D
8426  3E2E
8427  3E2F
8428  3E30
8429  3E31
8430  3E32
8431  3E33
8432  3E34
8433  3E35
8434  3E36
8435  3E37
8436  3E38
8437  3E39
8438  3E3A
8439  3E3B
8440  3E3C
8441  3E3D
8442  3E3E
8443  3E3F
8444  3E40
8445  3E41
8446  3E42
8447  3E43
8448  3E44
8449  3E45
8450  3E46
8451  3E47
8452  3E48
8453  3E49
8454  3E4A
8455  3E4B
8456  3E4C
8457  3E4D
8458  3E4E
8459  3E4F
8460  3E50
8461  3E51
8462  3E52
8463  3E53
8464  3E54
8465  3E55
8466  3E56
8467  3E57
8468  3E58
8469  3E59
8470  3E5A
8471  3E5B
8472  3E5C
8473  3E5D
8474  3E5E
8475  3E5F
8476  3E60
8477  3E61
8478  3E62
8479  3E63
8480  3E64
8481  3E65
8482  3E66
8483  3E67
8484  3E68
8485  3E69
8486  3E6A
8487  3E6B
8488  3E6C
8489  3E6D
8490  3E6E
8491  3E6F
8492  3E70
8493  3E71
8494  3E72
8495  3E73
8496  3E74
8497  3E75
8498  3E76
8499  3E77
8500  3E78
8501  3E79
8502  3E7A
8503  3E7B
8504  3E7C
8505  3E7D
8506  3E7E
8507  3E7F
8508  3E80
8509  3E81
8510  3E82
8511  3E83
8512  3E84
8513  3E85
8514  3E86
8515  3E87
8516  3E88
8517  3E89
8518  3E8A
8519  3E8B
8520  3E8C
8521  3E8D
8522  3E8E
8523  3E8F
8524  3E90
8525  3E91
8526  3E92
8527  3E93
8528  3E94
8529  3E95
8530  3E96
8531  3E97
8532  3E98
8533  3E99
8534  3E9A
8535  3E9B
8536  3E9C
8537  3E9D
8538  3E9E
8539  3E9F
8540  3EA0
8541  3EA1
8542  3EA2
8543  3EA3
8544  3EA4
8545  3EA5
8546  3EA6
8547  3EA7
8548  3EA8
8549  3EA9
8550  3EAA
8551  3EAB
8552  3EAC
8553  3EAD
8554  3EAE
8555  3EAF
8556  3EB0
8557  3EB1
8558  3EB2
8559  3EB3
8560  3EB4
8561  3EB5
8562  3EB6
8563  3EB7
8564  3EB8
8565  3EB9
8566  3EBA
8567  3EBB
8568  3EBC
8569  3EBD
8570  3EBE
8571  3EBF
8572  3EC0
8573  3EC1
8574  3EC2
8575  3EC3
8576  3EC4
8577  3EC5
8578  3EC6
8579  3EC7
8580  3EC8
8581  3EC9
8582  3ECA
8583  3ECB
8584  3ECC
8585  3ECD
8586  3ECE
8587  3ECF
8588  3ED0
8589  3ED1
8590  3ED2
8591  3ED3
8592  3ED4
8593  3ED5
8594  3ED6
8595  3ED7
8596  3ED8
8597  3ED9
8598  3EDA
8599  3EDB
8600  3EDC
8601  3EDD
8602  3EDE
8603  3EDF
8604  3EE0
8605  3EE1
8606  3EE2
8607  3EE3
8608  3EE4
8609  3EE5
8610  3EE6
8611  3EE7
8612  3EE8
8613  3EE9
8614  3EEA
8615  3EEB
8616  3EEC
8617  3EED
8618  3EEE
8619  3EEF
8620  3EF0
8621  3EF1
8622  3EF2
8623  3EF3
8624  3EF4
8625  3EF5
8626  3EF6
8627  3EF7
8628  3EF8
8629  3EF9
8630  3EFA
8631  3EFB
8632  3EFC
8633  3EFD
8634  3EFE
8635  3EFF
8636  3F00
8637  3F01
8638  3F02
8639  3F03
8640  3F04
8641  3F05
8642  3F06
8643  3F07
8644  3F08
8645  3F09
8646  3F0A
8647  3F0B
8648  3F0C
8649  3F0D
8650  3F0E
8651  3F0F
8652  3F10
8653  3F11
8654  3F12
8655  3F13
8656  3F14
8657  3F15
8658  3F16
8659  3F17
8660  3F18
8661  3F19
8662  3F1A
8663  3F1B
8664  3F1C
8665  3F1D
8666  3F1E
8667  3F1F
8668  3F20
8669  3F21
8670  3F22
8671  3F23
8672  3F24
8673  3F25
8674  3F26
8675  3F27
8676  3F28
8677  3F29
8678  3F2A
8679  3F2B
8680  3F2C
8681  3F2D
8682  3F2E
8683  3F2F
8684  3F30
8685  3F31
8686  3F32
8687  3F33
8688  3F34
8689  3F35
8690  3F36
8691  3F37
8692  3F38
8693  3F39
8694  3F3A
8695  3F3B
8696  3F3C
8697  3F3D
8698  3F3E
8699  3F3F
8700  3F40
8701  3F41
8702  3F42
8703  3F43
8704  3F44
8705  3F45
8706  3F46
8707  3F47
8708  3F48
8709  3F49
8710  3F4A
8711  3F4B
8712  3F4C
8713  3F4D
8714  3F4E
8715  3F4F
8716  3F50
8717  3F51
8718  3F52
8719  3F53
8720  3F54
8721  3F55
8722  3F56
8723  3F57
8724  3F58
8725  3F59
8726  3F5A
8727  3F5B
8728  3F5C
8729  3F5D
8730  3F5E
8731  3F5F
8732  3F60
8733  3F61
8734  3F62
8735  3F63
8736  3F64
8737  3F65
8738  3F66
8739  3F67
8740  3F68
8741  3F69
8742  3F6A
8743  3F6B
8744  3F6C
8745  3F6D
8746  3F6E
8747  3F6F
8748  3F70
8749  3F71
8750  3F72
8751  3F73
8752  3F74
8753  3F75
8754  3F76
8755  3F77
8756  3F78
8757  3F79
8758  3F7A
8759  3F7B
8760  3F7C
8761  3F7D
8762  3F7E
8763  3F7F
8764  3F80
8765  3F81
8766  3F82
8767  3F83
8768  3F84
8769  3F85
8770  3F86
8771  3F87
8772  3F88
8773  3F89
8774  3F8A
8775  3F8B
8776  3F8C
8777  3F8D
8778  3F8E
8779  3F8F
8780  3F90
8781  3F91
8782  3F92
8783  3F93
8784  3F94
8785  3F95
8786  3F96
8787  3F97
8788  3F98
8789  3F99
8790  3F9A
8791  3F9B
8792  3F9C
8793  3F9D
8794  3F9E
8795  3F9F
8796  3FA0
8797  3FA1
8798  3FA2
8799  3FA3
8800  3FA4
8801  3FA5
8802  3FA6
8803  3FA7
8804  3FA8
8805  3FA9
8806  3FAA
8807  3FAB
8808  3FAC
8809  3FAD
8810  3FAE
8811  3FAF
8812  3FB0
8813  3FB1
8814  3FB2
8815  3FB3
8816  3FB4
8817  3FB5
8818  3FB6
8819  3FB7
8820  3FB8
8821  3FB9
8822  3FBA
8823  3FBB
8824  3FBC
8825  3FBD
8826  3FBE
8827  3FBF
8828  3FC0
8829  3FC1
8830  3FC2
8831  3FC3
8832  3FC4
8833  3FC5
8834  3FC6
8835  3FC7
8836  3FC8
8837  3FC9
8838  3FCA
8839  3FCB
8840  3FCC
8841  3FCD
8842  3FCE
8843  3FCF
8844  3FD0
8845  3FD1
8846  3FD2
8847  3FD3
8848  3FD4
8849  3FD5
8850  3FD6
8851  3FD7
8852  3FD8
8853  3FD9
8854  3FDA
8855  3FDB
8856  3FDC
8857  3FDD
8858  3FDE
8859  3FDF
8860  3FE0
8861  3FE1
8862  3FE2
8863  3FE3
8864  3FE4
8865  3FE5
8866  3FE6
8867  3FE7
8868  3FE8
8869  3FE9
8870  3FEA
8871  3FEB
8872  3FEC
8873  3FED
8874  3FEE
8875  3FEF
8876  3FF0
8877  3FF1
8878  3FF2
8879  3FF3
8880  3FF4
8881  3FF5
8882  3FF6
8883  3FF7
8884  3FF8
8885  3FF9
8886  3FFA
8887  3FFB
8888  3FFC
8889  3FFD
8890  3FFE
8891  3FFF
8892  4000
8893  4001
8894  4002
8895  4003
8896  4004
8897  4005
8898  4006
8899  4007
8900  4008
8901  4009
8902  400A
8903  400B
8904  400C
8905  400D
8906  400E
8907  400F
8908  4010
8909  4011
8910  4012
8911  4013
8912  4014
8913  4015
8914  4016
8915  4017
8916  4018
8917  4019
8918  401A
8919  401B
8920  401C
8921  401D
8922  401E
8923  401F
8924  4020
8925  4021
8926  4022
8927  4023
8928  4024
8929  4025
8930  4026
8931  4027
8932  4028
8933  4029
8934  402A
8935  402B
8936  402C
8937  402D
8938  402E
8939  402F
8940  4030
8941  4031
8942  4032
8943  4033
8944  4034
8945  4035
8946  4036
8947  4037
8948  4038
8949  4039
8950  403A
8951  403B
8952  403C
8953  403D
8954  403E
8955  403F
8956  4040
8957  4041
8958  4042
8959  4043
8960  4044
8961  4045
8962  4046
8963  4047
8964  4048
8965  4049
8966  404A
8967  404B
8968  404C
8969  404D
8970  404E
8971  404F
8972  4050
8973  4051
8974  4052
8975  4053
8976  4054
8977  4055
8978  4056
8979  4057
8980  4058
8981  4059
8982  405A
8983  405B
8984  405C
8985  405D
8986  405E
8987  405F
8988  4060
8989  4061
8990  4062
8991  4063
8992  4064
8993  4065
8994  4066
8995  4067
8996  4068
8997  4069
8998  406A
8999  406B
9000  406C
9001  406D
9002  406E
9003  406F
9004  4070
9005  4071
9006  4072
9007  4073
9008  4074
9009  4075
9010  4076
9011  4077
9012  4078
9013  4079
9014  407A
9015  407B
9016  407C
9017  407D
9018  407E
9019  407F
9020  4080
9021  4081
9022  4082
9023  4083
9024  4084
9025  4085
9026  4086
9027  4087
9028  4088
9029  4089
9030  408A
9031  408B
9032  408C
9033  408D
9034  408E
9035  408F
9036  4090
9037  4091
9038  4092
9039  4093
9040  4094
9041  4095
9042  4096
9043  4097
9044  4098
9045  4099
9046  409A
9047  409B
9048  409C
9049  409D
9050  409E
9051  409F
9052  40A0
9053  40A1
9054  40A2
9055  40A3
9056  40A4
9057  40A5
9058  40A6
9059  40A7
9060  40A8
9061  40A9
9062  40AA
9063  40AB
9064  40AC
9065  40AD
9066  40AE
9067  40AF
9068  40B0
9069  40B1
9070  40B2
9071  40B3
9072  40B4
9073  40B5
9074  40B6
9075  40B7
9076  40B8
9077  40B9
9078  40BA
9079  40BB
9080  40BC
9081  40BD
9082  40BE
9083  40BF
9084  40C0
9085  40C1
9086  40C2
9087  40C3
9088  40C4
9089  40C5
9090  40C6
9091  40C7
9092  40C8
9093  40C9
9094  40CA
9095  40CB
9096  40CC
9097  40CD
9098  40CE
9099  40CF
9100  40D0
9101  40D1
9102  40D2
9103  40D3
9104  40D4
9105  40D5
9106  40D6
9107  40D7
9108  40D8
9109  40D9
9110  40DA
9111  40DB
9112  40DC
9113  40DD
9114  40DE
9115  40DF
9116  40E0
9117  40E1
9118  40E2
9119  40E3
9120  40E4
9121  40E5
9122  40E6
9123  40E7
9124  40E8
9125  40E9
9126  40EA
9127  40EB
9128  40EC
9129  40ED
9130  40EE
9131  40EF
9132  40F0
9133  40F1
9134  40F2
9135  40F3
9136  40F4
9137  40F5
9138  40F6
9139  40F7
9140  40F8
9141  40F9
9142  40FA
9143  40FB
9144  40FC
9145  40FD
9146  40FE
9147  40FF
9148  4100
9149  4101
9150  4102
9151  4103
9152  4104
9153  4105
9154  4106
9155  4107
9156  4108
9157  4109
9158  410A
9159  410B
9160  410C
9161  410D
9162  410E
9163  410F
9164  4110
9165  4111
9166  4112
9167  4113
9168  4114
9169  4115
9170  4116
9171  4117
9172  4118
9173  4119
9174  411A
9175  411B
9176  411C
9177  411D
9178  411E
9179  411F
9180  4120
9181  4121
9182  4122
9183  4123
9184  4124
9185  4125
9186  4126
9187  4127
9188  4128
9189  4129
9190  412A
9191  412B
9192  412C
9193  412D
9194  412E
9195  412F
9196  4130
9197  4131
9198  4132
9199  4133
9200  4134
9201  4135
9202  4136
9203  4137
9204  4138
9205  4139
9206  413A
9207  413B
9208  413C
9209  413D
9210  413E
9211  413F
9212  4140
9213  4141
9214  4142
9215  4143
9216  4144
9217  4145
9218  4146
9219  4147
9220  4148
9221  4149
9222  414A
9223  414B
9224  414C
9225  414D
9226  414E
9227  414F
9228  4150
9229  4151
9230  4152
9231  4153
9232  4154
9233  4155
9234  4156
9235  4157
9236  4158
9237  4159
9238  415A
9239  415B
9240  415C
9241  415D
9242  415E
9243  415F
9244  4160
9245  4161
9246  4162
9247  4163
9248  4164
9249  4165
9250  4166
9251  4167
9252  4168
9253  4169
9254  416A
9255  416B
9256  416C
9257  416D
9258  416E
9259  416F
9260  4170
9261  4171
9262  4172
9263  4173
9264  4174
9265  4175
9266  4176
9267  4177
9268  4178
9269  4179
9270  417A
9271  417B
9272  417C
9273  417D
9274  417E
9275  417F
9276  4180
9277  4181
9278  4182
9279  4183
9280  4184
9281  4185
9282  4186
9283  4187
9284  4188
9285  4189
9286  418A
9287  418B
9288  418C
9289  418D
9290  418E
9291  418F
9292  4190
9293  4191
9294  4192
9295  4193
9296  4194
9297  4195
9298  4196
9299  4197
9300  4198
9301  4199
9302  419A
9303  419B
9304  419C
9305  419D
9306  419E
9307  419F
9308  41A0
9309  41A1
9310  41A2
9311  41A3
9312  41A4
9313  41A5
9314  41A6
9315  41A7
9316  41A8
9317  41A9
9318  41AA
9319  41AB
9320  41AC
9321  41AD
9322  41AE
9323  41AF
9324  41B0
9325  41B1
9326  41B2
9327  41B3
9328  41B4
9329  41B5
9330  41B6
9331  41B7
9332  41B8
9333  41B9
9334  41BA
9335  41BB
9336  41BC
9337  41BD
9338  41BE
9339  41BF
9340  41C0
9341  41C1
9342  41C2
9343  41C3
9344  41C4
9345  41C5
9346  41C6
9347  41C7
9348  41C8
9349  41C9
9350  41CA
9351  41CB
9352  41CC
9353  41CD
9354  41CE
9355  41CF
9356  41D0
9357  41D1
9358  41D2
9359  41D3
9360  41D4
9361  41D5
9362  41D6
9363  41D7
9364  41D8
9365  41D9
9366  41DA
9367  41DB
9368  41DC
9369  41DD
9370  41DE
9371  41DF
9372  41E0
9373  41E1
9374  41E2
9375  41E3
9376  41E4
9377  41E5
9378  41E6
9379  41E7
9380  41E8
9381  41E9
9382  41EA
9383  41EB
9384  41EC
9385  41ED
9386  41EE
9387  41EF
9388  41F0
9389  41F1
9390  41F2
9391  41F3
9392  41F4
9393  41F5
9394  41F6
9395  41F7
9396  41F8
9397  41F9
9398  41FA
9399  41FB
9400  41FC
9401  41FD
9402  41FE
9403  41FF
9404  4200
9405  4201
9406  4202
9407  4203
9408  4204
9409  4205
9410  4206
9411  4207
9412  4208
9413  4209
9414  420A
9415  420B
9416  420C
9417  420D
9418  420E
9419  420F
9420  4210
9421  4211
9422  4212
9423  4213
9424  4214
9425  4215
9426  4216
9427  4217
9428  4218
9429  4219
9430  421A
9431  421B
9432  421C
9433  421D
9434  421E
9435  421F
9436  4220
9437  4221
9438  4222
9439  4223
9440  4224
9441  4225
9442  4226
9443  4227
9444  4228
9445  4229
9446  422A
9447  422B
9448  422C
9449  422D
9450  422E
9451  422F
9452  4230
9453  4231
9454  4232
9455  4233
9456  4234
9457  4235
9458  4236
9459  4237
9460  4238
9461  4239
9462  423A
9463  423B
9464  423C
9465  423D
9466  423E
9467  423F
9468  4240
9469  4241
9470  4242
9471  4243
9472  4244
9473  4245
9474  4246
9475  4247
9476  4248
9477  4249
9478  424A
9479  424B
9480  424C
9481  424D
9482  424E
9483  424F
9484  4250
9485  4251
9486  4252
9487  4253
9488  4254
9489  4255
9490  4256
9491  4257
9492  4258
9493  4259
9494  425A
9495  425B
9496  425C
9497  425D
9498  425E
9499  425F
9500  4260
9501  4261
9502  4262
9503  4263
9504  4264
9505  4265
9506  4266
9507  4267
9508  4268
9509  4269
9510  426A
9511  426B
9512  426C
9513  426D
9514  426E
9515  426F
9516  4270
9517  4271
9518  4272
9519  4273
9520  4274
9521  4275
9522  4276
9523  4277
9524  4278
9525  4279
9526  427A
9527  427B
9528  427C
9529  427D
9530  427E
9531  427F
9532  4280
9533  4281
9534  4282
9535  4283
9536  4284
9537  4285
9538  4286
9539  4287
9540  4288
9541  4289
9542  428A
9543  428B
9544  428C
9545  428D
9546  428E
9547  428F
9548  4290
9549  4291
9550  4292
9551  4293
9552  4294
9553  4295
9554  4296
9555  4297
9556  4298
9557  4299
9558  429A
9559  429B
9560  429C
9561  429D
9562  429E
9563  429F
9564  42A0
9565  42A1
9566  42A2
9567  42A3
9568  42A4
9569  42A5
9570  42A6
9571  42A7
9572  42A8
9573  42A9
9574  42AA
9575  42AB
9576  42AC
9577  42AD
9578  42AE
9579  42AF
9580  42B0
9581  42B1
9582  42B2
9583  42B3
9584  42B4
9585  42B5
9586  42B6
9587  42B7
9588  42B8
9589  42B9
9590  42BA
9591  42BB
9592  42BC
9593  42BD
9594  42BE
9595  42BF
9596  42C0
9597  42C1
9598  42C2
9599  42C3
9600  42C4
9601  42C5
9602  42C6
9603  42C7
9604  42C8
9605  42C9
9606  42CA
9607  42CB
9608  42CC
9609  42CD
9610  42CE
9611  42CF
9612  42D0
9613  42D1
9614  42D2
9615  42D3
9616  42D4
9617  42D5
9618  42D6
9619  42D7
9620  42D8
9621  42D9
9622  42DA
9623  42DB
9624  42DC
9625  42DD
9626  42DE
9627  42DF
9628  42E0
9629  42E1
9630  42E2
9631  42E3
9632  42E4
9633  42E5
9634  42E6
9635  42E7
9636  42E8
9637  42E9
9638  42EA
9639  42EB
9640  42EC
9641  42ED
9642  42EE
9643  42EF
9644  42F0
9645  42F1
9646  42F2
9647  42F3
9648  42F4
9649  42F5
9650  42F6
9651  42F7
9652  42F8
9653  42F9
9654  42FA
9655  42FB
9656  42FC
9657  42FD
9658  42FE
9659  42FF
9660  4300
9661  4301
9662  4302
9663  4303
9664  4304
9665  4305
9666  4306
9667  4307
9668  4308
9669  4309
9670  430A
9671  430B
9672  430C
9673  430D
9674  430E
9675  430F
9676  4310
9677  4311
9678  4312
9679  4313
9680  4314
9681  4315
9682  4316
9683  4317
9684  4318
9685  4319
9686  431A
9687  431B
9688  431C
9689  431D
9690  431E
9691  431F
9692  4320
9693  4321
9694  4322
9695  4323
9696  4324
9697  4325
9698  4326
9699  4327
9700  4328
9701  4329
9702  432A
9703  432B
9704  432C
9705  432D
9706  432E
9707  432F
9708  4330
9709  4331
9710  4332
9711  4333
9712  4334
9713  4335
9714  4336
9715  4337
9716  4338
9717  4339
9718  433A
9719  433B
9720  433C
9721  433D
9722  433E
9723  433F
9724  4340
9725  4341
9726  4342
9727  4343
9728  4344
9729  4345
9730  4346
9731  4347
9732  4348
9733  4349
9734  434A
9735  434B
9736  434C
9737  434D
9738  434E
9739  434F
9740  4350
9741  4351
9742  4352
9743  4353
9744  4354
9745  4355
9746  4356
9747  4357
9748  4358
9749  4359
9750  435A
9751  435B
9752  435C
9753  435D
9754  435E
9755  435F
9756  4360
9757  4361
9758  4362
9759  4363
9760  4364
9761  4365
9762  4366
9763  4367
9764  4368
9765  4369
9766  436A
9767  436B
9768  436C
9769  436D
9770  436E
9771  436F
9772  4370
9773  4371
9774  4372
9775  4373
9776  4374
9777  4375
9778  4376
9779  4377
9780  4378
9781  4379
9782  437A
9783  437B
9784  437C
9785  437D
9786  437E
9787  437F
9788  4380
9789  4381
9790  4382
9791  4383
9792  4384
9793  4385
9794  4386
9795  4387
9796  4388
9797  4389
9798  438A
9799  438B
9800  438C
9801  438D
9802  438E
9803  438F
9804  4390
9805  4391
9806  4392
9807  4393
9808  4394
9809  4395
9810  4396
9811  4397
9812  4398
9813  4399
9814  439A
9815  439B
9816  439C
9817  439D
9818  439E
9819  439F
9820  43A0
9821  43A1
9822  43A2
9823  43A3
9824  43A4
9825  43A5
9826  43A6
9827  43A7
9828  43A8
9829  43A9
9830  43AA
9831  43AB
9832  43AC
9833  43AD
9834  43AE
9835  43AF
9836  43B0
9837  43B1
9838  43B2
9839  43B3
9840  43B4
9841  43B5
9842  43B6
9843  43B7
9844  43B8
9845  43B9
9846  43BA
9847  43BB
9848  43BC
9849  43BD
9850  43BE
9851  43BF
9852  43C0
9853  43C1
9854  43C2
9855  43C3
9856  43C4
9857  43C5
9858  43C6
9859  43C7
9860  43C8
9861  43C9
9862  43CA
9863  43CB
9864  43CC
9865  43CD
9866  43CE
9867  43CF
9868  43D0
9869  43D1
9870  43D2
9871  43D3
9872  43D4
9873  43D5
9874  43D6
9875  43D7
9876  43D8
9877  43D9
9878  43DA
9879  43DB
9880  43DC
9881  43DD
9882  43DE
9883  43DF
9884  43E0
9885  43E1
9886  43E2
9887  43E3
9888  43E4
9889  43E5
9890  43E6
9891  43E7
9892  43E8
9893  43E9
9894  43EA
9895  43EB
9896  43EC
9897  43ED
9898  43EE
9899  43EF
9900  43F0
9901  43F1
9902  43F2
9903  43F3
9904  43F4
9905  43F5
9906  43F6
9907  43F7
9908  43F8
9909  43F9
9910  43FA
9911  43FB
9912  43FC
9913  43FD
9914  43FE
9915  43FF
9916  4400
9917  4401
9918  4402
9919  4403
9920  4404
9921  4405
9922  4406
9923  4407
9924  4408
9925  4409
9926  440A
9927  440B
9928  440C
9929  440D
9930  440E
9931  440F
9932  4410
9933  4411
9934  4412
9935  4413
9936  4414
9937  4415
9938  4416
9939  4417
9940  4418
9941  4419
9942  441A
9943  441B
9944  441C
9945  441D
9946  441E
9947  441F
9948  4420
9949  4421
9950  4422
9951  4423
9952  4424
9953  4425
9954  4426
9955  4427
9956  4428
9957  4429
9958  442A
9959  442B
9960  442C
9961  442D
9962  442E
9963  442F
9964  4430
9965  4431
9966  4432
9967  4433
9968  4434
9969  4435
9970  4436
9971  4437
9972  4438
9973  4439
9974  443A
9975  443B
9976  443C
9977  443D
9978  443E
9979  443F
9980  4440
9981  4441
9982  4442
9983  4443
9984  4444
9985  4445
9986  4446
9987  4447
9988  4448
9989  4449
9990  444A
9991  444B
9992  444C
9993  444D
9994  444E
9995  444F
9996  4450
9997  4451
9998  4452
9999  4453
10000  4454
10001  4455
10002  4456
10003  4457
10004  4458
10005  4459
10006  445A
10007  445B
10008  445C
10009  445D
10010  445E
10011  445F
10012  4460
10013  4461
10014  4462
10015  4463
10016  4464
10017  4465
10018  4466
10019  4467
10020  4468
10021  4469
10022  446A
10023  446B
10024  446C
10025  446D
10026  446E
10027  446F
10028  4470
10029  4471
10030  4472
10031  4473
10032  4474
10033  4475
10034  4476
10035  4477
10036  4478
10037  4479
10038  447A
10039  447B
10040  447C
10041  447D
10042  447E
10043  447F
10044  4480
10045  4481
10046  4482
10047  4483
10048  4484
10049  4485
10050  4486
10051  4487
10052  4488
10053  4489
10054  448A
10055  448B
10056  448C
10057  448D
10058  448E
10059  448F
10060  4490
10061  4491
10062  4492
10063  4493
10064  4494
10065  4495
10066  4496
10067  4497
10068  4498
10069  4499
10070  449A
10071  449B
10072  449C
10073  449D
10074  449E
10075  449F
10076  44A0
10077  44A1
10078  44A2
10079  44A3
10080  44A4
10081  44A5
10082  44A6
10083  44A7
10084  44A8
10085  44A9
10086  44AA
10087  44AB
10088  44AC
10089  44AD
10090  44AE
10091  44AF
10092  44B0
10093  44B1
10094  44B2
10095  44B3
10096  44B4
10097  44B5
10098  44B6
10099  44B7
10100  44B8
10101  44B9
10102  44BA
10103  44BB
10104  44BC
10105  44BD
10106  44BE
10107  44BF
10108  44C0
10109  44C1
10110  44C2
10111  44C3
10112  44C4
10113  44C5
10114  44C6
10115  44C7
10116  44C8
10117  44C9
10118  44CA
10119  44CB
10120  44CC
10121  44CD
10122  44CE
10123  44CF
10124  44D0
10125  44D1
10126  44D2
10127  44D3
10128  44D4
10129  44D5
10130  44D6
10131  44D7
10132  44D8
10133  44D9
10134  44DA
10135  44DB
10136  44DC
10137  44DD
10138  44DE
10139  44DF
10140  44E0
10141  44E1
10142  44E2
10143  44E3
10144  44E4
10145  44E5
10146  44E6
10147  44E7
10148  44E8
10149  44E9
10150  44EA
10151  44EB
10152  44EC
10153  44ED
10154  44EE
10155  44EF
10156  44F0
10157  44F1
10158  44F2
10159  44F3
10160  44F4
10161  44F5
10162  44F6
10163  44F7
10164  44F8
10165  44F9
10166  44FA
10167  44FB
10168  44FC
10169  44FD
10170  44FE
10171  44FF
10172  4500
10173  4501
10174  4502
10175  4503
10176  4504
10177  4505
10178  4506
10179  4507
10180  4508
10181  4509
10182  450A
10183  450B
10184  450C
10185  450D
10186  450E
10187  450F
10188  4510
10189  4511
10190  4512
10191  4513
10192  4514
10193  4515
10194  4516
10195  4517
10196  4518
10197  4519
10198  451A
10199  451B
10200  451C
10201  451D
10202  451E
10203  451F
10204  4520
10205  4521
10206  4522
10207  4523
10208  4524
10209  4525
10210  4526
10211  4527
10212  4528
10213  4529
10214  452A
10215  452B
10216  452C
10217  452D
10218  452E
10219  452F
10220  4530
10221  4531
10222  4532
10223  4533
10224  4534
10225  4535
10226  4536
10227  4537
10228  4538
10229  4539
10230  453A
10231  453B
10232  453C
10233  453D
10234  453E
10235  453F
10236  4540
10237  4541
10238  4542
10239  4543
10240  4544
10241  4545
10242  4546
10243  4547
10244  4548
10245  4549
10246  454A
10247  454B
10248  454C
10249  454D
10250  454E
10251  454F
10252  4550
10253  4551
10254  4552
10255  4553
10256  4554
10257  4555
10258  4556
10259  4557
10260  4558
10261  4559
10262  455A
10263  455B
10264  455C
10265  455D
10266  455E
10267  455F
10268  4560
10269  4561
10270  4562
10271  4563
10272  4564
10273  4565
10274  4566
10275  4567
10276  4568
10277  4569
10278  456A
10279  456B
10280  456C
10281  456D
10282  456E
10283  456F
10284  4570
10285  4571
10286  4572
10287  4573
10288  4574
10289  4575
10290  4576
10291  4577
10292  4578
10293  4579
10294  457A
10295  457B
10296  457C
10297  457D
10298  457E
10299  457F
10300  4580
10301  4581
10302  4582
10303  4583
10304  4584
10305  4585
10306  4586
10307  4587
10308  4588
10309  4589
10310  458A
10311  458B
10312  458C
10313  458D
10314  458E
10315  458F
10316  4590
10317  4591
10318  4592
10319  4593
10320  4594
10321  4595
10322  4596
10323  4597
10324  4598
10325  4599
10326  459A
10327  459B
10328  459C
10329  459D
10330  459E
10331  459F
10332  45A0
10333  45A1
10334  45A2
10335  45A3
10336  45A4
10337  45A5
10338  45A6
10339  45A7
10340  45A8
10341  45A9
10342  45AA
10343  45AB
10344  45AC
10345  45AD
10346  45AE
10347  45AF
10348  45B0
10349  45B1
10350  45B2
10351  45B3
10352  45B4
10353  45B5
10354  45B6
10355  45B7
10356  45B8
10357  45B9
10358  45BA
10359  45BB
10360  45BC
10361  45BD
10362  45BE
10363  45BF
10364  45C0
10365  45C1
10366  45C2
10367  45C3
10368  45C4
10369  45C5
10370  45C6
10371  45C7
10372  45C8
10373  45C9
10374  45CA
10375  45CB
10376  45CC
10377  45CD
10378  45CE
10379  45CF
10380  45D0
10381  45D1
10382  45D2
10383  45D3
10384  45D4
10385  45D5
10386  45D6
10387  45D7
10388  45D8
10389  45D9
10390  45DA
10391  45DB
10392  45DC
10393  45DD
10394  45DE
10395  45DF
10396  45E0
10397  45E1
10398  45E2
10399  45E3
10400  45E4
10401  45E5
10402  45E6
10403  45E7
10404  45E8
10405  45E9
10406  45EA
10407  45EB
10408  45EC
10409  45ED
10410  45EE
10411  45EF
10412  45F0
10413  45F1
10414  45F2
10415  45F3
10416  45F4
10417  45F5
10418  45F6
10419  45F7
10420  45F8
10421  45F9
10422  45FA
10423  45FB
10424  45FC
10425  45FD
10426  45FE
10427  45FF
10428  4600
10429  4601
10430  4602
10431  4603
10432  4604
10433  4605
10434  4606
10435  4607
10436  4608
10437  4609
10438  460A
10439  460B
10440  460C
10441  460D
10442  460E
10443  460F
10444  4610
10445  4611
10446  4612
10447  4613
10448  4614
10449  4615
10450  4616
10451  4617
10452  4618
10453  4619
10454  461A
10455  461B
10456  461C
10457  461D
10458  461E
10459  461F
10460  4620
10461  4621
10462  4622
10463  4623
10464  4624
10465  4625
10466  4626
10467  4627
10468  4628
10469  4629
10470  462A
10471  462B
10472  462C
10473  462D
10474  462E
10475  462F
10476  4630
10477  4631
10478  4632
10479  4633
10480  4634
10481  4635
10482  4636
10483  4637
10484  4638
10485  4639
10486  463A
10487  463B
10488  463C
10489  463D
10490  463E
10491  463F
10492  4640
10493  4641
10494  4642
10495  4643
10496  4644
10497  4645
10498  4646
10499  4647
10500  4648
10501  4649
10502  464A
10503  464B
10504  464C
10505  464D
10506  464E
10507  464F
10508  4650
10509  4651
10510  4652
10511  4653
10512  4654
10513  4655
10514  4656
10515  4657
10516  4658
10517  4659
10518  465A
10519  465B
10520  465C
10521  465D
10522  465E
10523  465F
10524  4660
10525  4661
10526  4662
10527  4663
10528  4664
10529  4665
10530  4666
10531  4667
10532  4668
10533  4669
10534  466A
10535  466B
10536  466C
10537  466D
10538  466E
10539  466F
10540  4670
10541  4671
10542  4672
10543  4673
10544  4674
10545  4675
10546  4676
10547  4677
10548  4678
10549  4679
10550  467A
10551  467B
10552  467C
10553  467D
10554  467E
10555  467F
10556  4680
10557  4681
10558  4682
10559  4683
10560  4684
10561  4685
10562  4686
10563  4687
10564  4688
10565  4689
10566  468A
10567  468B
10568  468C
10569  468D
10570  468E
10571  468F
10572  4690
10573  4691
10574  4692
10575  4693
10576  4694
10577  4695
10578  4696
10579  4697
10580  4698
10581  4699
10582  469A
10583  469B
10584  469C
10585  469D
10586  469E
10587  469F
10588  46A0
10589  46A1
10590  46A2
10591  46A3
10592  46A4
10593  46A5
10594  46A6
10595  46A7
10596  46A8
10597  46A9
10598  46AA
10599  46AB
10600  46AC
10601  46AD
10602  46AE
10603  46AF
10604  46B0
10605  46B1
10606  46B2
10607  46B3
10608  46B4
10609  46B5
10610  46B6
10611  46B7
10612  46B8
10613  46B9
10614  46BA
10615  46BB
10616  46BC
10617  46BD
10618  46BE
10619  46BF
10620  46C0
10621  46C1
10622  46C2
10623  46C3
10624  46C4
10625  46C5
10626  46C6
10627  46C7
10628  46C8
10629  46C9
10630  46CA
10631  46CB
10632  46CC
10633  46CD
10634  46CE
10635  46CF
10636  46D0
10637  46D1
10638  46D2
10639  46D3
10640  46D4
10641  46D5
10642  46D6
10643  46D7
10644  46D8
10645  46D9
10646  46DA
10647  46DB
10648  46DC
10649  46DD
10650  46DE
10651  46DF
10652  46E0
10653  46E1
10654  46E2
10655  46E3
10656  46E4
10657  46E5
10658  46E6
10659  46E7
10660  46E8
10661  46E9
10662  46EA
10663  46EB
10664  46EC
10665  46ED
10666  46EE
10667  46EF
10668  46F0
10669  46F1
10670  46F2
10671  46F3
10672  46F4
10673  46F5
10674  46F6
10675  46F7
10676  46F8
10677  46F9
10678  46FA
10679  46FB
10680  46FC
10681  46FD
10682  46FE
10683  46FF
10684  4700
10685  4701
10686  4702
10687  4703
10688  4704
10689  4705
10690  4706
10691  4707
10692  4708
10693  4709
10694  470A
10695  470B
10696  470C
10697  470D
10698  470E
10699  470F
10700  4710
10701  4711
10702  4712
10703  4713
10704  4714
10705  4715
10706  4716
10707  4717
10708  4718
10709  4719
10710  471A
10711  471B
10712  471C
10713  471D
10714  471E
10715  471F
10716  4720
10717  4721
10718  4722
10719  4723
10720  4724
10721  4725
10722  4726
10723  4727
10724  4728
10725  4729
10726  472A
10727  472B
10728  472C
10729  472D
10730  472E
10731  472F
10732  4730
10733  4731
10734  4732
10735  4733
10736  4734
10737  4735
10738  4736
10739  4737
10740  4738
10741  4739
10742  473A
10743  473B
10744  473C
10745  473D
10746  473E
10747  473F
10748  4740
10749  4741
10750  4742
10751  4743
10752  4744
10753  4745
10754  4746
10755  4747
10756  4748
10757  4749
10758  474A
10759  474B
10760  474C
10761  474D
10762  474E
10763  474F
10764  4750
10765  4751
10766  4752
10767  4753
10768  4754
10769  4755
10770  4756
10771  4757
10772  4758
10773  4759
10774  475A
10775  475B
10776  475C
10777  475D
10778  475E
10779  475F
10780  4760
10781  4761
10782  4762
10783  4763
10784  4764
10785  4765
10786  4766
10787  4767
10788  4768
10789  4769
10790  476A
10791  476B
10792  476C
10793  476D
10794  476E
10795  476F
10796  4770
10797  4771
10798  4772
10799  4773
10800  4774
10801  4775
10802  4776
10803  4777
10804  4778
10805  4779
10806  477A
10807  477B
10808  477C
10809  477D
10810  477E
10811  477F
10812  4780
10813  4781
10814  4782
10815  4783
10816  4784
10817  4785
10818  4786
10819  4787
10820  4788
10821  4789
10822  478A
10823  478B
10824  478C
10825  478D
10826  478E
10827  478F
10828  4790
10829  4791
10830  4792
10831  4793
10832  4794
10833  4795
10834  4796
10835  4797
10836  4798
10837  4799
10838  479A
10839  479B
10840  479C
10841  479D
10842  479E
10843  479F
10844  47A0
10845  47A1
10846  47A2
10847  47A3
10848  47A4
10849  47A5
10850  47A6
10851  47A7
10852  47A8
10853  47A9
10854  47AA
10855  47AB
10856  47AC
10857  47AD
10858  47AE
10859  47AF
10860  47B0
10861  47B1
10862  47B2
10863  47B3
10864  47B4
10865  47B5
10866  47B6
10867  47B7
10868  47B8
10869  47B9
10870  47BA
10871  47BB
10872  47BC
10873  47BD
10874  47BE
10875  47BF
10876  47C0
10877  47C1
10878  47C2
10879  47C3
10880  47C4
10881  47C5
10882  47C6
10883  47C7
10884  47C8
10885  47C9
10886  47CA
10887  47CB
10888  47CC
10889  47CD
10890  47CE
10891  47CF
10892  47D0
10893  47D1
10894  47D2
10895  47D3
10896  47D4
10897  47D5
10898  47D6
10899  47D7
10900  47D8
10901  47D9
10902  47DA
10903  47DB
10904  47DC
10905  47DD
10906  47DE
10907  47DF
10908  47E0
10909  47E1
10910  47E2
10911  47E3
10912  47E4
10913  47E5
10914  47E6
10915  47E7
10916  47E8
10917  47E9
10918  47EA
10919  47EB
10920  47EC
10921  47ED
10922  47EE
10923  47EF
10924  47F0
10925  47F1
10926  47F2
10927  47F3
10928  47F4
10929  47F5
10930  47F6
10931  47F7
10932  47F8
10933  47F9
10934  47FA
10935  47FB
10936  47FC
10937  47FD
10938  47FE
10939  47FF
10940  4800
10941  4801
10942  4802
10943  4803
10944  4804
10945  4805
10946  4806
10947  4807
10948  4808
10949  4809
10950  480A
10951  480B
10952  480C
10953  480D
10954  480E
10955  480F
10956  4810
10957  4811
10958  4812
10959  4813
10960  4814
10961  4815
10962  4816
10963  4817
10964  4818
10965  4819
10966  481A
10967  481B
10968  481C
10969  481D
10970  481E
10971  481F
10972  4820
10973  4821
10974  4822
10975  4823
10976  4824
10977  4825
10978  4826
10979  4827
10980  4828
10981  4829
10982  482A
10983  482B
10984  482C
10985  482D
10986  482E
10987  482F
10988  4830
10989  4831
10990  4832
10991  4833
10992  4834
10993  4835
10994  4836
10995  4837
10996  4838
10997  4839
10998  483A
10999  483B
11000  483C
11001  483D
11002  483E
11003  483F
11004  4840
11005  4841
11006  4842
11007  4843
11008  4844
11009  4845
11010  4846
11011  4847
11012  4848
11013  4849
11014  484A
11015  484B
11016  484C
11017  484D
11018  484E
11019  484F
11020  4850
11021  4851
11022  4852
11023  4853
11024  4854
11025  4855
11026  4856
11027  4857
11028  4858
11029  4859
11030  485A
11031  485B
11032  485C
11033  485D
11034  485E
11035  485F
11036  4860
11037  4861
11038  4862
11039  4863
11040  4864
11041  4865
11042  4866
11043  4867
11044  4868
11045  4869
11046  486A
11047  486B
11048  486C
11049  486D
11050  486E
11051  486F
11052  4870
11053  4871
11054  4872
11055  4873
11056  4874
11057  4875
11058  4876
11059  4877
11060  4878
11061  4879
11062  487A
11063  487B
11064  487C
11065  487D
11066  487E
11067  487F
11068  4880
11069  4881
11070  4882
11071  4883
11072  4884
11073  4885
11074  4886
11075  4887
11076  4888
11077  4889
11078  488A
11079  488B
11080  488C
11081  488D
11082  488E
11083  488F
11084  4890
11085  4891
11086  4892
11087  4893
11088  4894
11089  4895
11090  4896
11091  4897
11092  4898
11093  4899
11094  489A
11095  489B
11096  489C
11097  489D
11098  489E
11099  489F
11100  48A0
11101  48A1
11102  48A2
11103  48A3
11104  48A4
11105  48A5
11106  48A6
11107  48A7
11108  48A8
11109  48A9
11110  48AA
11111  48AB
11112  48AC
11113  48AD
11114  48AE
11115  48AF
11116  48B0
11117  48B1
11118  48B2
11119  48B3
11120  48B4
11121  48B5
11122  48B6
11123  48B7
11124  48B8
11125  48B9
11126  48BA
11127  48BB
11128  48BC
11129  48BD
11130  48BE
11131  48BF
11132  48C0
11133  48C1
11134  48C2
11135  48C3
11136  48C4
11137  48C5
11138  48C6
11139  48C7
11140  48C8
11141  48C9
11142  48CA
11143  48CB
11144  48CC
11145  48CD
11146  48CE
11147  48CF
11148  48D0
11149  48D1
11150  48D2
11151  48D3
11152  48D4
11153  48D5
11154  48D6
11155  48D7
11156  48D8
11157  48D9
11158  48DA
11159  48DB
11160  48DC
11161  48DD
11162  48DE
11163  48DF
11164  48E0
11165  48E1
11166  48E2
11167  48E3
11168  48E4
11169  48E5
11170  48E6
11171  48E7
11172  48E8
11173  48E9
11174  48EA
11175  48EB
11176  48EC
11177  48ED
11178  48EE
11179  48EF
11180  48F0
11181  48F1
11182  48F2
11183  48F3
11184  48F4
11185  48F5
11186  48F6
11187  48F7
11188  48F8
11189  48F9
11190  48FA
11191  48FB
11192  48FC
11193  48FD
11194  48FE
11195  48FF
11196  4900
11197  4901
11198  4902
11199  4903
11200  4904
11201  4905
11202  4906
11203  4907
11204  4908
11205  4909
11206  490A
11207  490B
11208  490C
11209  490D
11210  490E
11211  490F
11212  4910
11213  4911
11214  4912
11215  4913
11216  4914
11217  4915
11218  4916
11219  4917
11220  4918
11221  4919
11222  491A
11223  491B
11224  491C
11225  491D
11226  491E
11227  491F
11228  4920
11229  4921
11230  4922
11231  4923
11232  4924
11233  4925
11234  4926
11235  4927
11236  4928
11237  4929
11238  492A
11239  492B
11240  492C
11241  492D
11242  492E
11243  492F
11244  4930
11245  4931
11246  4932
11247  4933
11248  4934
11249  4935
11250  4936
11251  4937
11252  4938
11253  4939
11254  493A
11255  493B
11256  493C
11257  493D
11258  493E
11259  493F
11260  4940
11261  4941
11262  4942
11263  4943
11264  4944
11265  4945
11266  4946
11267  4947
11268  4948
11269  4949
11270  494A
11271  494B
11272  494C
11273  494D
11274  494E
11275  494F
11276  4950
11277  4951
11278  4952
11279  4953
11280  4954
11281  4955
11282  4956
11283  4957
11284  4958
11285  4959
11286  495A
11287  495B
11288  495C
11289  495D
11290  495E
11291  495F
11292  4960
11293  4961
11294  4962
11295  4963
11296  4964
11297  4965
11298  4966
11299  4967
11300  4968
11301  4969
11302  496A
11303  496B
11304  496C
11305  496D
11306  496E
11307  496F
11308  4970
11309  4971
11310  4972
11311  4973
11312  4974
11313  4975
11314  4976
11315  4977
11316  4978
11317  4979
11318  497A
11319  497B
11320  497C
11321  497D
11322  497E
11323  497F
11324  4980
11325  4981
11326  4982
11327  4983
11328  4984
11329  4985
11330  4986
11331  4987
11332  4988
11333  4989
11334  498A
11335  498B
11336  498C
11337  498D
11338  498E
11339  498F
11340  4990
11341  4991
11342  4992
11343  4993
11344  4994
11345  4995
11346  4996
11347  4997
11348  4998
11349  4999
11350  499A
11351  499B
11352  499C
11353  499D
11354  499E
11355  499F
11356  49A0
11357  49A1
11358  49A2
11359  49A3
11360  49A4
11361  49A5
11362  49A6
11363  49A7
11364  49A8
11365  49A9
11366  49AA
11367  49AB
11368  49AC
11369  49AD
11370  49AE
11371  49AF
11372  49B0
11373  49B1
11374  49B2
11375  49B3
11376  49B4
11377  49B5
11378  49B6
11379  49B7
11380  49B8
11381  49B9
11382  49BA
11383  49BB
11384  49BC
11385  49BD
11386  49BE
11387  49BF
11388  49C0
11389  49C1
11390  49C2
11391  49C3
11392  49C4
11393  49C5
11394  49C6
11395  49C7
11396  49C8
11397  49C9
11398  49CA
11399  49CB
11400  49CC
11401  49CD
11402  49CE
11403  49CF
11404  49D0
11405  49D1
11406  49D2
11407  49D3
11408  49D4
11409  49D5
11410  49D6
11411  49D7
11412  49D8
11413  49D9
11414  49DA
11415  49DB
11416  49DC
11417  49DD
11418  49DE
11419  49DF
11420  49E0
11421  49E1
11422  49E2
11423  49E3
11424  49E4
11425  49E5
11426  49E6
11427  49E7
11428  49E8
11429  49E9
11430  49EA
11431  49EB
11432  49EC
11433  49ED
11434  49EE
11435  49EF
11436  49F0
11437  49F1
11438  49F2
11439  49F3
11440  49F4
11441  49F5
11442  49F6
11443  49F7
11444  49F8
11445  49F9
11446  49FA
11447  49FB
11448  49FC
11449  49FD
11450  49FE
11451  49FF
11452  4A00
11453  4A01
11454  4A02
11455  4A03
11456  4A04
11457  4A05
11458  4A06
11459  4A07
11460  4A08
11461  4A09
11462  4A0A
11463  4A0B
11464  4A0C
11465  4A0D
11466  4A0E
11467  4A0F
11468  4A10
11469  4A11
11470  4A12
11471  4A13
11472  4A14
11473  4A15
11474  4A16
11475  4A17
11476  4A18
11477  4A19
11478  4A1A
11479  4A1B
11480  4A1C
11481  4A1D
11482  4A1E
11483  4A1F
11484  4A20
11485  4A21
11486  4A22
11487  4A23
11488  4A24
11489  4A25
11490  4A26
11491  4A27
11492  4A28
11493  4A29
11494  4A2A
11495  4A2B
11496  4A2C
11497  4A2D
11498  4A2E
11499  4A2F
11500  4A30
11501  4A31
11502  4A32
11503  4A33
11504  4A34
11505  4A35
11506  4A36
11507  4A37
11508  4A38
11509  4A39
11510  4A3A
11511  4A3B
11512  4A3C
11513  4A3D
11514  4A3E
11515  4A3F
11516  4A40
11517  4A41
11518  4A42
11519  4A43
11520  4A44
11521  4A45
11522  4A46
11523  4A47
11524  4A48
11525  4A49
11526  4A4A
11527  4A4B
11528  4A4C
11529  4A4D
11530  4A4E
11531  4A4F
11532  4A50
11533  4A51
11534  4A52
11535  4A53
11536  4A54
11537  4A55
11538  4A56
11539  4A57
11540  4A58
11541  4A59
11542  4A5A
11543  4A5B
11544  4A5C
11545  4A5D
11546  4A5E
11547  4A5F
11548  4A60
11549  4A61
11550  4A62
11551  4A63
11552  4A64
11553  4A65
11554  4A66
11555  4A67
11556  4A68
11557  4A69
11558  4A6A
11559  4A6B
11560  4A6C
11561  4A6D
11562  4A6E
11563  4A6F
11564  4A70
11565  4A71
11566  4A72
11567  4A73
11568  4A74
11569  4A75
11570  4A76
11571  4A77
11572  4A78
11573  4A79
11574  4A7A
11575  4A7B
11576  4A7C
11577  4A7D
11578  4A7E
11579  4A7F
11580  4A80
11581  4A81
11582  4A82
11583  4A83
11584  4A84
11585  4A85
11586  4A86
11587  4A87
11588  4A88
11589  4A89
11590  4A8A
11591  4A8B
11592  4A8C
11593  4A8D
11594  4A8E
11595  4A8F
11596  4A90
11597  4A91
11598  4A92
11599  4A93
11600  4A94
11601  4A95
11602  4A96
11603  4A97
11604  4A98
11605  4A99
11606  4A9A
11607  4A9B
11608  4A9C
11609  4A9D
11610  4A9E
11611  4A9F
11612  4AA0
11613  4AA1
11614  4AA2
11615  4AA3
11616  4AA4
11617  4AA5
11618  4AA6
11619  4AA7
11620  4AA8
11621  4AA9
11622  4AAA
11623  4AAB
11624  4AAC
11625  4AAD
11626  4AAE
11627  4AAF
11628  4AB0
11629  4AB1
11630  4AB2
11631  4AB3
11632  4AB4
11633  4AB5
11634  4AB6
11635  4AB7
11636  4AB8
11637  4AB9
11638  4ABA
11639  4ABB
11640  4ABC
11641  4ABD
11642  4ABE
11643  4ABF
11644  4AC0
11645  4AC1
11646  4AC2
11647  4AC3
11648  4AC4
11649  4AC5
11650  4AC6
11651  4AC7
11652  4AC8
11653  4AC9
11654  4ACA
11655  4ACB
11656  4ACC
11657  4ACD
11658  4ACE
11659  4ACF
11660  4AD0
11661  4AD1
11662  4AD2
11663  4AD3
11664  4AD4
11665  4AD5
11666  4AD6
11667  4AD7
11668  4AD8
11669  4AD9
11670  4ADA
11671  4ADB
11672  4ADC
11673  4ADD
11674  4ADE
11675  4ADF
11676  4AE0
11677  4AE1
11678  4AE2
11679  4AE3
11680  4AE4
11681  4AE5
11682  4AE6
11683  4AE7
11684  4AE8
11685  4AE9
11686  4AEA
11687  4AEB
11688  4AEC
11689  4AED
11690  4AEE
11691  4AEF
11692  4AF0
11693  4AF1
11694  4AF2
11695  4AF3
11696  4AF4
11697  4AF5
11698  4AF6
11699  4AF7
11700  4AF8
11701  4AF9
11702  4AFA
11703  4AFB
11704  4AFC
11705  4AFD
11706  4AFE
11707  4AFF
11708  4B00
11709  4B01
11710  4B02
11711  4B03
11712  4B04
11713  4B05
11714  4B06
11715  4B07
11716  4B08
11717  4B09
11718  4B0A
11719  4B0B
11720  4B0C
11721  4B0D
11722  4B0E
11723  4B0F
11724  4B10
11725  4B11
11726  4B12
11727  4B13
11728  4B14
11729  4B15
11730  4B16
11731  4B17
11732  4B18
11733  4B19
11734  4B1A
11735  4B1B
11736  4B1C
11737  4B1D
11738  4B1E
11739  4B1F
11740  4B20
11741  4B21
11742  4B22
11743  4B23
11744  4B24
11745  4B25
11746  4B26
11747  4B27
11748  4B28
11749  4B29
11750  4B2A
11751  4B2B
11752  4B2C
11753  4B2D
11754  4B2E
11755  4B2F
11756  4B30
11757  4B31
11758  4B32
11759  4B33
11760  4B34
11761  4B35
11762  4B36
11763  4B37
11764  4B38
11765  4B39
11766  4B3A
11767  4B3B
11768  4B3C
11769  4B3D
11770  4B3E
11771  4B3F
11772  4B40
11773  4B41
11774  4B42
11775  4B43
11776  4B44
11777  4B45
11778  4B46
11779  4B47
11780  4B48
11781  4B49
11782  4B4A
11783  4B4B
11784  4B4C
11785  4B4D
11786  4B4E
11787  4B4F
11788  4B50
11789  4B51
11790  4B52
11791  4B53
11792  4B54
11793  4B55
11794  4B56
11795  4B57
11796  4B58
11797  4B59
11798  4B5A
11799  4B5B
11800  4B5C
11801  4B5D
11802  4B5E
11803  4B5F
11804  4B60
11805  4B61
11806  4B62
11807  4B63
11808  4B64
11809  4B65
11810  4B66
11811  4B67
11812  4B68
11813  4B69
11814  4B6A
11815  4B6B
11816  4B6C
11817  4B6D
11818  4B6E
11819  4B6F
11820  4B70
11821  4B71
11822  4B72
11823  4B73
11824  4B74
11825  4B75
11826  4B76
11827  4B77
11828  4B78
11829  4B79
11830  4B7A
11831  4B7B
11832  4B7C
11833  4B7D
11834  4B7E
11835  4B7F
11836  4B80
11837  4B81
11838  4B82
11839  4B83
11840  4B84
11841  4B85
11842  4B86
11843  4B87
11844  4B88
11845  4B89
11846  4B8A
11847  4B8B
11848  4B8C
11849  4B8D
11850  4B8E
11851  4B8F
11852  4B90
11853  4B91
11854  4B92
11855  4B93
11856  4B94
11857  4B95
11858  4B96
11859  4B97
11860  4B98
11861  4B99
11862  4B9A
11863  4B9B
11864  4B9C
11865  4B9D
11866  4B9E
11867  4B9F
11868  4BA0
11869  4BA1
11870  4BA2
11871  4BA3
11872  4BA4
11873  4BA5
11874  4BA6
11875  4BA7
11876  4BA8
11877  4BA9
11878  4BAA
11879  4BAB
11880  4BAC
11881  4BAD
11882  4BAE
11883  4BAF
11884  4BB0
11885  4BB1
11886  4BB2
11887  4BB3
11888  4BB4
11889  4BB5
11890  4BB6
11891  4BB7
11892  4BB8
11893  4BB9
11894  4BBA
11895  4BBB
11896  4BBC
11897  4BBD
11898  4BBE
11899  4BBF
11900  4BC0
11901  4BC1
11902  4BC2
11903  4BC3
11904  4BC4
11905  4BC5
11906  4BC6
11907  4BC7
11908  4BC8
11909  4BC9
11910  4BCA
11911  4BCB
11912  4BCC
11913  4BCD
11914  4BCE
11915  4BCF
11916  4BD0
11917  4BD1
11918  4BD2
11919  4BD3
11920  4BD4
11921  4BD5
11922  4BD6
11923  4BD7
11924  4BD8
11925  4BD9
11926  4BDA
11927  4BDB
11928  4BDC
11929  4BDD
11930  4BDE
11931  4BDF
11932  4BE0
11933  4BE1
11934  4BE2
11935  4BE3
11936  4BE4
11937  4BE5
11938  4BE6
11939  4BE7
11940  4BE8
11941  4BE9
11942  4BEA
11943  4BEB
11944  4BEC
11945  4BED
11946  4BEE
11947  4BEF
11948  4BF0
11949  4BF1
11950  4BF2
11951  4BF3
11952  4BF4
11953  4BF5
11954  4BF6
11955  4BF7
11956  4BF8
11957  4BF9
11958  4BFA
11959  4BFB
11960  4BFC
11961  4BFD
11962  4BFE
11963  4BFF
11964  4C00
11965  4C01
11966  4C02
11967  4C03
11968  4C04
11969  4C05
11970  4C06
11971  4C07
11972  4C08
11973  4C09
11974  4C0A
11975  4C0B
11976  4C0C
11977  4C0D
11978  4C0E
11979  4C0F
11980  4C10
11981  4C11
11982  4C12
11983  4C13
11984  4C14
11985  4C15
11986  4C16
11987  4C17
11988  4C18
11989  4C19
11990  4C1A
11991  4C1B
11992  4C1C
11993  4C1D
11994  4C1E
11995  4C1F
11996  4C20
11997  4C21
11998  4C22
11999  4C23
12000  4C24
12001  4C25
12002  4C26
12003  4C27
12004  4C28
12005  4C29
12006  4C2A
12007  4C2B
12008  4C2C
12009  4C2D
12010  4C2E
12011  4C2F
12012  4C30
12013  4C31
12014  4C32
12015  4C33
12016  4C34
12017  4C35
12018  4C36
12019  4C37
12020  4C38
12021  4C39
12022  4C3A
12023  4C3B
12024  4C3C
12025  4C3D
12026  4C3E
12027  4C3F
12028  4C40
12029  4C41
12030  4C42
12031  4C43
12032  4C44
12033  4C45
12034  4C46
12035  4C47
12036  4C48
12037  4C49
12038  4C4A
12039  4C4B
12040  4C4C
12041  4C4D
12042  4C4E
12043  4C4F
12044  4C50
12045  4C51
12046  4C52
12047  4C53
12048  4C54
12049  4C55
12050  4C56
12051  4C57
12052  4C58
12053  4C59
12054  4C5A
12055  4C5B
12056  4C5C
12057  4C5D
12058  4C5E
12059  4C5F
12060  4C60
12061  4C61
12062  4C62
12063  4C63
12064  4C64
12065  4C65
12066  4C66
12067  4C67
12068  4C68
12069  4C69
12070  4C6A
12071  4C6B
12072  4C6C
12073  4C6D
12074  4C6E
12075  4C6F
12076  4C70
12077  4C71
12078  4C72
12079  4C73
12080  4C74
12081  4C75
12082  4C76
12083  4C77
12084  4C78
12085  4C79
12086  4C7A
12087  4C7B
12088  4C7C
12089  4C7D
12090  4C7E
12091  4C7F
12092  4C80
12093  4C81
12094  4C82
12095  4C83
12096  4C84
12097  4C85
12098  4C86
12099  4C87
12100  4C88
12101  4C89
12102  4C8A
12103  4C8B
12104  4C8C
12105  4C8D
12106  4C8E
12107  4C8F
12108  4C90
12109  4C91
12110  4C92
12111  4C93
12112  4C94
12113  4C95
12114  4C96
12115  4C97
12116  4C98
12117  4C99
12118  4C9A
12119  4C9B
12120  4C9C
12121  4C9D
12122  4C9E
12123  4C9F
12124  4CA0
12125  4CA1
12126  4CA2
12127  4CA3
12128  4CA4
12129  4CA5
12130  4CA6
12131  4CA7
12132  4CA8
12133  4CA9
12134  4CAA
12135  4CAB
12136  4CAC
12137  4CAD
12138  4CAE
12139  4CAF
12140  4CB0
12141  4CB1
12142  4CB2
12143  4CB3
12144  4CB4
12145  4CB5
12146  4CB6
12147  4CB7
12148  4CB8
12149  4CB9
12150  4CBA
12151  4CBB
12152  4CBC
12153  4CBD
12154  4CBE
12155  4CBF
12156  4CC0
12157  4CC1
12158  4CC2
12159  4CC3
12160  4CC4
12161  4CC5
12162  4CC6
12163  4CC7
12164  4CC8
12165  4CC9
12166  4CCA
12167  4CCB
12168  4CCC
12169  4CCD
12170  4CCE
12171  4CCF
12172  4CD0
12173  4CD1
12174  4CD2
12175  4CD3
12176  4CD4
12177  4CD5
12178  4CD6
12179  4CD7
12180  4CD8
12181  4CD9
12182  4CDA
12183  4CDB
12184  4CDC
12185  4CDD
12186  4CDE
12187  4CDF
12188  4CE0
12189  4CE1
12190  4CE2
12191  4CE3
12192  4CE4
12193  4CE5
12194  4CE6
12195  4CE7
12196  4CE8
12197  4CE9
12198  4CEA
12199  4CEB
12200  4CEC
12201  4CED
12202  4CEE
12203  4CEF
12204  4CF0
12205  4CF1
12206  4CF2
12207  4CF3
12208  4CF4
12209  4CF5
12210  4CF6
12211  4CF7
12212  4CF8
12213  4CF9
12214  4CFA
12215  4CFB
12216  4CFC
12217  4CFD
12218  4CFE
12219  4CFF
12220  4D00
12221  4D01
12222  4D02
12223  4D03
12224  4D04
12225  4D05
12226  4D06
12227  4D07
12228  4D08
12229  4D09
12230  4D0A
12231  4D0B
12232  4D0C
12233  4D0D
12234  4D0E
12235  4D0F
12236  4D10
12237  4D11
12238  4D12
12239  4D13
12240  4D14
12241  4D15
12242  4D16
12243  4D17
12244  4D18
12245  4D19
12246  4D1A
12247  4D1B
12248  4D1C
12249  4D1D
12250  4D1E
12251  4D1F
12252  4D20
12253  4D21
12254  4D22
12255  4D23
12256  4D24
12257  4D25
12258  4D26
12259  4D27
12260  4D28
12261  4D29
12262  4D2A
12263  4D2B
12264  4D2C
12265  4D2D
12266  4D2E
12267  4D2F
12268  4D30
12269  4D31
12270  4D32
12271  4D33
12272  4D34
12273  4D35
12274  4D36
12275  4D37
12276  4D38
12277  4D39
12278  4D3A
12279  4D3B
12280  4D3C
12281  4D3D
12282  4D3E
12283  4D3F
12284  4D40
12285  4D41
12286  4D42
12287  4D43
12288  4D44
12289  4D45
12290  4D46
12291  4D47
12292  4D48
12293  4D49
12294  4D4A
12295  4D4B
12296  4D4C
12297  4D4D
12298  4D4E
12299  4D4F
12300  4D50
12301  4D51
12302  4D52
12303  4D53
12304  4D54
12305  4D55
12306  4D56
12307  4D57
12308  4D58
12309  4D59
12310  4D5A
12311  4D5B
12312  4D5C
12313  4D5D
12314  4D5E
12315  4D5F
12316  4D60
12317  4D61
12318  4D62
12319  4D63
12320  4D64
12321  4D65
12322  4D66
12323  4D67
12324  4D68
12325  4D69
12326  4D6A
12327  4D6B
12328  4D6C
12329  4D6D
12330  4D6E
12331  4D6F
12332  4D70
12333  4D71
12334  4D72
12335  4D73
12336  4D74
12337  4D75
12338  4D76
12339  4D77
12340  4D78
12341  4D79
12342  4D7A
12343  4D7B
12344  4D7C
12345  4D7D
12346  4D7E
12347  4D7F
12348  4D80
12349  4D81
12350  4D82
12351  4D83
12352  4D84
12353  4D85
12354  4D86
12355  4D87
12356  4D88
12357  4D89
12358  4D8A
12359  4D8B
12360  4D8C
12361  4D8D
12362  4D8E
12363  4D8F
12364  4D90
12365  4D91
12366  4D92
12367  4D93
12368  4D94
12369  4D95
12370  4D96
12371  4D97
12372  4D98
12373  4D99
12374  4D9A
12375  4D9B
12376  4D9C
12377  4D9D
12378  4D9E
12379  4D9F
12380  4DA0
12381  4DA1
12382  4DA2
12383  4DA3
12384  4DA4
12385  4DA5
12386  4DA6
12387  4DA7
12388  4DA8
12389  4DA9
12390  4DAA
12391  4DAB
12392  4DAC
12393  4DAD
12394  4DAE
12395  4DAF
12396  4DB0
12397  4DB1
12398  4DB2
12399  4DB3
12400  4DB4
12401  4DB5
12402  4DB6
12403  4DB7
12404  4DB8
12405  4DB9
12406  4DBA
12407  4DBB
12408  4DBC
12409  4DBD
12410  4DBE
12411  4DBF
12412  4DC0
12413  4DC1
12414  4DC2
12415  4DC3
12416  4DC4
12417  4DC5
12418  4DC6
12419  4DC7
12420  4DC8
12421  4DC9
12422  4DCA
12423  4DCB
12424  4DCC
12425  4DCD
12426  4DCE
12427  4DCF
12428  4DD0
12429  4DD1
12430  4DD2
12431  4DD3
12432  4DD4
12433  4DD5
12434  4DD6
12435  4DD7
12436  4DD8
12437  4DD9
12438  4DDA
12439  4DDB
12440  4DDC
12441  4DDD
12442  4DDE
12443  4DDF
12444  4DE0
12445  4DE1
12446  4DE2
12447  4DE3
12448  4DE4
12449  4DE5
12450  4DE6
12451  4DE7
12452  4DE8
12453  4DE9
12454  4DEA
12455  4DEB
12456  4DEC
12457  4DED
12458  4DEE
12459  4DEF
12460  4DF0
12461  4DF1
12462  4DF2
12463  4DF3
12464  4DF4
12465  4DF5
12466  4DF6
12467  4DF7
12468  4DF8
12469  4DF9
12470  4DFA
12471  4DFB
12472  4DFC
12473  4DFD
12474  4DFE
12475  4DFF
12476  4E00
12477  4E01
12478  4E02
12479  4E03
12480  4E04
12481  4E05
12482  4E06
12483  4E07
12484  4E08
12485  4E09
12486  4E0A
12487  4E0B
12488  4E0C
12489  4E0D
12490  4E0E
12491  4E0F
12492  4E10
12493  4E11
12494  4E12
12495  4E13
12496  4E14
12497  4E15
12498  4E16
12499  4E17
12500  4E18
12501  4E19
12502  4E1A
12503  4E1B
12504  4E1C
12505  4E1D
12506  4E1E
12507  4E1F
12508  4E20
12509  4E21
12510  4E22
12511  4E23
12512  4E24
12513  4E25
12514  4E26
12515  4E27
12516  4E28
12517  4E29
12518  4E2A
12519  4E2B
12520  4E2C
12521  4E2D
12522  4E2E
12523  4E2F
12524  4E30
12525  4E31
12526  4E32
12527  4E33
12528  4E34
12529  4E35
12530  4E36
12531  4E37
12532  4E38
12533  4E39
12534  4E3A
12535  4E3B
12536  4E3C
12537  4E3D
12538  4E3E
12539  4E3F
12540  4E40
12541  4E41
12542  4E42
12543  4E43
12544  4E44
12545  4E45
12546  4E46
12547  4E47
12548  4E48
12549  4E49
12550  4E4A
12551  4E4B
12552  4E4C
12553  4E4D
12554  4E4E
12555  4E4F
12556  4E50
12557  4E51
12558  4E52
12559  4E53
12560  4E54
12561  4E55
12562  4E56
12563  4E57
12564  4E58
12565  4E59
12566  4E5A
12567  4E5B
12568  4E5C
12569  4E5D
12570  4E5E
12571  4E5F
12572  4E60
12573  4E61
12574  4E62
12575  4E63
12576  4E64
12577  4E65
12578  4E66
12579  4E67
12580  4E68
12581  4E69
12582  4E6A
12583  4E6B
12584  4E6C
12585  4E6D
12586  4E6E
12587  4E6F
12588  4E70
12589  4E71
12590  4E72
12591  4E73
12592  4E74
12593  4E75
12594  4E76
12595  4E77
12596  4E78
12597  4E79
12598  4E7A
12599  4E7B
12600  4E7C
12601  4E7D
12602  4E7E
12603  4E7F
12604  4E80
12605  4E81
12606  4E82
12607  4E83
12608  4E84
12609  4E85
12610  4E86
12611  4E87
12612  4E88
12613  4E89
12614  4E8A
12615  4E8B
12616  4E8C
12617  4E8D
12618  4E8E
12619  4E8F
12620  4E90
12621  4E91
12622  4E92
12623  4E93
12624  4E94
12625  4E95
12626  4E96
12627  4E97
12628  4E98
12629  4E99
12630  4E9A
12631  4E9B
12632  4E9C
12633  4E9D
12634  4E9E
12635  4E9F
12636  4EA0
12637  4EA1
12638  4EA2
12639  4EA3
12640  4EA4
12641  4EA5
12642  4EA6
12643  4EA7
12644  4EA8
12645  4EA9
12646  4EAA
12647  4EAB
12648  4EAC
12649  4EAD
12650  4EAE
12651  4EAF
12652  4EB0
12653  4EB1
12654  4EB2
12655  4EB3
12656  4EB4
12657  4EB5
12658  4EB6
12659  4EB7
12660  4EB8
12661  4EB9
12662  4EBA
12663  4EBB
12664  4EBC
12665  4EBD
12666  4EBE
12667  4EBF
12668  4EC0
12669  4EC1
12670  4EC2
12671  4EC3
12672  4EC4
12673  4EC5
12674  4EC6
12675  4EC7
12676  4EC8
12677  4EC9
12678  4ECA
12679  4ECB
12680  4ECC
12681  4ECD
12682  4ECE
12683  4ECF
12684  4ED0
12685  4ED1
12686  4ED2
12687  4ED3
12688  4ED4
12689  4ED5
12690  4ED6
12691  4ED7
12692  4ED8
12693  4ED9
12694  4EDA
12695  4EDB
12696  4EDC
12697  4EDD
12698  4EDE
12699  4EDF
12700  4EE0
12701  4EE1
12702  4EE2
12703  4EE3
12704  4EE4
12705  4EE5
12706  4EE6
12707  4EE7
12708  4EE8
12709  4EE9
12710  4EEA
12711  4EEB
12712  4EEC
12713  4EED
12714  4EEE
12715  4EEF
12716  4EF0
12717  4EF1
12718  4EF2
12719  4EF3
12720  4EF4
12721  4EF5
12722  4EF6
12723  4EF7
12724  4EF8
12725  4EF9
12726  4EFA
12727  4EFB
12728  4EFC
12729  4EFD
12730  4EFE
12731  4EFF
12732  4F00
12733  4F01
12734  4F02
12735  4F03
12736  4F04
12737  4F05
12738  4F06
12739  4F07
12740  4F08
12741  4F09
12742  4F0A
12743  4F0B
12744  4F0C
12745  4F0D
12746  4F0E
12747  4F0F
12748  4F10
12749  4F11
12750  4F12
12751  4F13
12752  4F14
12753  4F15
12754  4F16
12755  4F17
12756  4F18
12757  4F19
12758  4F1A
12759  4F1B
12760  4F1C
12761  4F1D
12762  4F1E
12763  4F1F
12764  4F20
12765  4F21
12766  4F22
12767  4F23
12768  4F24
12769  4F25
12770  4F26
12771  4F27
12772  4F28
12773  4F29
12774  4F2A
12775  4F2B
12776  4F2C
12777  4F2D
12778  4F2E
12779  4F2F
12780  4F30
12781  4F31
12782  4F32
12783  4F33
12784  4F34
12785  4F35
12786  4F36
12787  4F37
12788  4F38
12789  4F39
12790  4F3A
12791  4F3B
12792  4F3C
12793  4F3D
12794  4F3E
12795  4F3F
12796  4F40
12797  4F41
12798  4F42
12799  4F43
12800  4F44
12801  4F45
12802  4F46
12803  4F47
12804  4F48
12805  4F49
12806  4F4A
12807  4F4B
12808  4F4C
12809  4F4D
12810  4F4E
12811  4F4F
12812  4F50
12813  4F51
12814  4F52
12815  4F53
12816  4F54
12817  4F55
12818  4F56
12819  4F57
12820  4F58
12821  4F59
12822  4F5A
12823  4F5B
12824  4F5C
12825  4F5D
12826  4F5E
12827  4F5F
12828  4F60
12829  4F61
12830  4F62
12831  4F63
12832  4F64
12833  4F65
12834  4F66
12835  4F67
12836  4F68
12837  4F69
12838  4F6A
12839  4F6B
12840  4F6C
12841  4F6D
12842  4F6E
12843  4F6F
12844  4F70
12845  4F71
12846  4F72
12847  4F73
12848  4F74
12849  4F75
12850  4F76
12851  4F77
12852  4F78
12853  4F79
12854  4F7A
12855  4F7B
12856  4F7C
12857  4F7D
12858  4F7E
12859  4F7F
12860  4F80
12861  4F81
12862  4F82
12863  4F83
12864  4F84
12865  4F85
12866  4F86
12867  4F87
12868  4F88
12869  4F89
12870  4F8A
12871  4F8B
12872  4F8C
12873  4F8D
12874  4F8E
12875  4F8F
12876  4F90
12877  4F91
12878  4F92
12879  4F93
12880  4F94
12881  4F95
12882  4F96
12883  4F97
12884  4F98
12885  4F99
12886  4F9A
12887  4F9B
12888  4F9C
12889  4F9D
12890  4F9E
12891  4F9F
12892  4FA0
12893  4FA1
12894  4FA2
12895  4FA3
12896  4FA4
12897  4FA5
12898  4FA6
12899  4FA7
12900  4FA8
12901  4FA9
12902  4FAA
12903  4FAB
12904  4FAC
12905  4FAD
12906  4FAE
12907  4FAF
12908  4FB0
12909  4FB1
12910  4FB2
12911  4FB3
12912  4FB4
12913  4FB5
12914  4FB6
12915  4FB7
12916  4FB8
12917  4FB9
12918  4FBA
12919  4FBB
12920  4FBC
12921  4FBD
12922  4FBE
12923  4FBF
12924  4FC0
12925  4FC1
12926  4FC2
12927  4FC3
12928  4FC4
12929  4FC5
12930  4FC6
12931  4FC7
12932  4FC8
12933  4FC9
12934  4FCA
12935  4FCB
12936  4FCC
12937  4FCD
12938  4FCE
12939  4FCF
12940  4FD0
12941  4FD1
12942  4FD2
12943  4FD3
12944  4FD4
12945  4FD5
12946  4FD6
12947  4FD7
12948  4FD8
12949  4FD9
12950  4FDA
12951  4FDB
12952  4FDC
12953  4FDD
12954  4FDE
12955  4FDF
12956  4FE0
12957  4FE1
12958  4FE2
12959  4FE3
12960  4FE4
12961  4FE5
12962  4FE6
12963  4FE7
12964  4FE8
12965  4FE9
12966  4FEA
12967  4FEB
12968  4FEC
12969  4FED
12970  4FEE
12971  4FEF
12972  4FF0
12973  4FF1
12974  4FF2
12975  4FF3
12976  4FF4
12977  4FF5
12978  4FF6
12979  4FF7
12980  4FF8
12981  4FF9
12982  4FFA
12983  4FFB
12984  4FFC
12985  4FFD
12986  4FFE
12987  4FFF
12988  5000
12989  5001
12990  5002
12991  5003
12992  5004
12993  5005
12994  5006
12995  5007
12996  5008
12997  5009
12998  500A
12999  500B
13000  500C
13001  500D
13002  500E
13003  500F
13004  5010
13005  5011
13006  5012
13007  5013
13008  5014
13009  5015
13010  5016
13011  5017
13012  5018
13013  5019
13014  501A
13015  501B
13016  501C
13017  501D
13018  501E
13019  501F
13020  5020
13021  5021
13022  5022
13023  5023
13024  5024
13025  5025
13026  5026
13027  5027
13028  5028
13029  5029
13030  502A
13031  502B
13032  502C
13033  502D
13034  502E
13035  502F
13036  5030
13037  5031
13038  5032
13039  5033
13040  5034
13041  5035
13042  5036
13043  5037
13044  5038
13045  5039
13046  503A
13047  503B
13048  503C
13049  503D
13050  503E
13051  503F
13052  5040
13053  5041
13054  5042
13055  5043
13056  5044
13057  5045
13058  5046
13059  5047
13060  5048
13061  5049
13062  504A
13063  504B
13064  504C
13065  504D
13066  504E
13067  504F
13068  5050
13069  5051
13070  5052
13071  5053
13072  5054
13073  5055
13074  5056
13075  5057
13076  5058
13077  5059
13078  505A
13079  505B
13080  505C
13081  505D
13082  505E
13083  505F
13084  5060
13085  5061
13086  5062
13087  5063
13088  5064
13089  5065
13090  5066
13091  5067
13092  5068
13093  5069
13094  506A
13095  506B
13096  506C
13097  506D
13098  506E
13099  506F
13100  5070
13101  5071
13102  5072
13103  5073
13104  5074
13105  5075
13106  5076
13107  5077
13108  5078
13109  5079
13110  507A
13111  507B
13112  507C
13113  507D
13114  507E
13115  507F
13116  5080
13117  5081
13118  5082
13119  5083
13120  5084
13121  5085
13122  5086
13123  5087
13124  5088
13125  5089
13126  508A
13127  508B
13128  508C
13129  508D
13130  508E
13131  508F
13132  5090
13133  5091
13134  5092
13135  5093
13136  5094
13137  5095
13138  5096
13139  5097
13140  5098
13141  5099
13142  509A
13143  509B
13144  509C
13145  509D
13146  509E
13147  509F
13148  50A0
13149  50A1
13150  50A2
13151  50A3
13152  50A4
13153  50A5
13154  50A6
13155  50A7
13156  50A8
13157  50A9
13158  50AA
13159  50AB
13160  50AC
13161  50AD
13162  50AE
13163  50AF
13164  50B0
13165  50B1
13166  50B2
13167  50B3
13168  50B4
13169  50B5
13170  50B6
13171  50B7
13172  50B8
13173  50B9
13174  50BA
13175  50BB
13176  50BC
13177  50BD
13178  50BE
13179  50BF
13180  50C0
13181  50C1
13182  50C2
13183  50C3
13184  50C4
13185  50C5
13186  50C6
13187  50C7
13188  50C8
13189  50C9
13190  50CA
13191  50CB
13192  50CC
13193  50CD
13194  50CE
13195  50CF
13196  50D0
13197  50D1
13198  50D2
13199  50D3
13200  50D4
13201  50D5
13202  50D6
13203  50D7
13204  50D8
13205  50D9
13206  50DA
13207  50DB
13208  50DC
13209  50DD
13210  50DE
13211  50DF
13212  50E0
13213  50E1
13214  50E2
13215  50E3
13216  50E4
13217  50E5
13218  50E6
13219  50E7
13220  50E8
13221  50E9
13222  50EA
13223  50EB
13224  50EC
13225  50ED
13226  50EE
13227  50EF
13228  50F0
13229  50F1
13230  50F2
13231  50F3
13232  50F4
13233  50F5
13234  50F6
13235  50F7
13236  50F8
13237  50F9
13238  50FA
13239  50FB
13240  50FC
13241  50FD
13242  50FE
13243  50FF
13244  5100
13245  5101
13246  5102
13247  5103
13248  5104
13249  5105
13250  5106
13251  5107
13252  5108
13253  5109
13254  510A
13255  510B
13256  510C
13257  510D
13258  510E
13259  510F
13260  5110
13261  5111
13262  5112
13263  5113
13264  5114
13265  5115
13266  5116
13267  5117
13268  5118
13269  5119
13270  511A
13271  511B
13272  511C
13273  511D
13274  511E
13275  511F
13276  5120
13277  5121
13278  5122
13279  5123
13280  5124
13281  5125
13282  5126
13283  5127
13284  5128
13285  5129
13286  512A
13287  512B
13288  512C
13289  512D
13290  512E
13291  512F
13292  5130
13293  5131
13294  5132
13295  5133
13296  5134
13297  5135
13298  5136
13299  5137
13300  5138
13301  5139
13302  513A
13303  513B
13304  513C
13305  513D
13306  513E
13307  513F
13308  5140
13309  5141
13310  5142
13311  5143
13312  5144
13313  5145
13314  5146
13315  5147
13316  5148
13317  5149
13318  514A
13319  514B
13320  514C
13321  514D
13322  514E
13323  514F
13324  5150
13325  5151
13326  5152
13327  5153
13328  5154
13329  5155
13330  5156
13331  5157
13332  5158
13333  5159
13334  515A
13335  515B
13336  515C
13337  515D
13338  515E
13339  515F
13340  5160
13341  5161
13342  5162
13343  5163
13344  5164
13345  5165
13346  5166
13347  5167
13348  5168
13349  5169
13350  516A
13351  516B
13352  516C
13353  516D
13354  516E
13355  516F
13356  5170
13357  5171
13358  5172
13359  5173
13360  5174
13361  5175
13362  5176
13363  5177
13364  5178
13365  5179
13366  517A
13367  517B
13368  517C
13369  517D
13370  517E
13371  517F
13372  5180
13373  5181
13374  5182
13375  5183
13376  5184
13377  5185
13378  5186
13379  5187
13380  5188
13381  5189
13382  518A
13383  518B
13384  518C
13385  518D
13386  518E
13387  518F
13388  5190
13389  5191
13390  5192
13391  5193
13392  5194
13393  5195
13394  5196
13395  5197
13396  5198
13397  5199
13398  519A
13399  519B
13400  519C
13401  519D
13402  519E
13403  519F
13404  51A0
13405  51A1
13406  51A2
13407  51A3
13408  51A4
13409  51A5
13410  51A6
13411  51A7
13412  51A8
13413  51A9
13414  51AA
13415  51AB
13416  51AC
13417  51AD
13418  51AE
13419  51AF
13420  51B0
13421  51B1
13422  51B2
13423  51B3
13424  51B4
13425  51B5
13426  51B6
13427  51B7
13428  51B8
13429  51B9
13430  51BA
13431  51BB
13432  51BC
13433  51BD
13434  51BE
13435  51BF
13436  51C0
13437  51C1
13438  51C2
13439  51C3
13440  51C4
13441  51C5
13442  51C6
13443  51C7
13444  51C8
13445  51C9
13446  51CA
13447  51CB
13448  51CC
13449  51CD
13450  51CE
13451  51CF
13452  51D0
13453  51D1
13454  51D2
13455  51D3
13456  51D4
13457  51D5
13458  51D6
13459  51D7
13460  51D8
13461  51D9
13462  51DA
13463  51DB
13464  51DC
13465  51DD
13466  51DE
13467  51DF
13468  51E0
13469  51E1
13470  51E2
13471  51E3
13472  51E4
13473  51E5
13474  51E6
13475  51E7
13476  51E8
13477  51E9
13478  51EA
13479  51EB
13480  51EC
13481  51ED
13482  51EE
13483  51EF
13484  51F0
13485  51F1
13486  51F2
13487  51F3
13488  51F4
13489  51F5
13490  51F6
13491  51F7
13492  51F8
13493  51F9
13494  51FA
13495  51FB
13496  51FC
13497  51FD
13498  51FE
13499  51FF
13500  5200
13501  5201
13502  5202
13503  5203
13504  5204
13505  5205
13506  5206
13507  5207
13508  5208
13509  5209
13510  520A
13511  520B
13512  520C
13513  520D
13514  520E
13515  520F
13516  5210
13517  5211
13518  5212
13519  5213
13520  5214
13521  5215
13522  5216
13523  5217
13524  5218
13525  5219
13526  521A
13527  521B
13528  521C
13529  521D
13530  521E
13531  521F
13532  5220
13533  5221
13534  5222
13535  5223
13536  5224
13537  5225
13538  5226
13539  5227
13540  5228
13541  5229
13542  522A
13543  522B
13544  522C
13545  522D
13546  522E
13547  522F
13548  5230
13549  5231
13550  5232
13551  5233
13552  5234
13553  5235
13554  5236
13555  5237
13556  5238
13557  5239
13558  523A
13559  523B
13560  523C
13561  523D
13562  523E
13563  523F
13564  5240
13565  5241
13566  5242
13567  5243
13568  5244
13569  5245
13570  5246
13571  5247
13572  5248
13573  5249
13574  524A
13575  524B
13576  524C
13577  524D
13578  524E
13579  524F
13580  5250
13581  5251
13582  5252
13583  5253
13584  5254
13585  5255
13586  5256
13587  5257
13588  5258
13589  5259
13590  525A
13591  525B
13592  525C
13593  525D
13594  525E
13595  525F
13596  5260
13597  5261
13598  5262
13599  5263
13600  5264
13601  5265
13602  5266
13603  5267
13604  5268
13605  5269
13606  526A
13607  526B
13608  526C
13609  526D
13610  526E
13611  526F
13612  5270
13613  5271
13614  5272
13615  5273
13616  5274
13617  5275
13618  5276
13619  5277
13620  5278
13621  5279
13622  527A
13623  527B
13624  527C
13625  527D
13626  527E
13627  527F
13628  5280
13629  5281
13630  5282
13631  5283
13632  5284
13633  5285
13634  5286
13635  5287
13636  5288
13637  5289
13638  528A
13639  528B
13640  528C
13641  528D
13642  528E
13643  528F
13644  5290
13645  5291
13646  5292
13647  5293
13648  5294
13649  5295
13650  5296
13651  5297
13652  5298
13653  5299
13654  529A
13655  529B
13656  529C
13657  529D
13658  529E
13659  529F
13660  52A0
13661  52A1
13662  52A2
13663  52A3
13664  52A4
13665  52A5
13666  52A6
13667  52A7
13668  52A8
13669  52A9
13670  52AA
13671  52AB
13672  52AC
13673  52AD
13674  52AE
13675  52AF
13676  52B0
13677  52B1
13678  52B2
13679  52B3
13680  52B4
13681  52B5
13682  52B6
13683  52B7
13684  52B8
13685  52B9
13686  52BA
13687  52BB
13688  52BC
13689  52BD
13690  52BE
13691  52BF
13692  52C0
13693  52C1
13694  52C2
13695  52C3
13696  52C4
13697  52C5
13698  52C6
13699  52C7
13700  52C8
13701  52C9
13702  52CA
13703  52CB
13704  52CC
13705  52CD
13706  52CE
13707  52CF
13708  52D0
13709  52D1
13710  52D2
13711  52D3
13712  52D4
13713  52D5
13714  52D6
13715  52D7
13716  52D8
13717  52D9
13718  52DA
13719  52DB
13720  52DC
13721  52DD
13722  52DE
13723  52DF
13724  52E0
13725  52E1
13726  52E2
13727  52E3
13728  52E4
13729  52E5
13730  52E6
13731  52E7
13732  52E8
13733  52E9
13734  52EA
13735  52EB
13736  52EC
13737  52ED
13738  52EE
13739  52EF
13740  52F0
13741  52F1
13742  52F2
13743  52F3
13744  52F4
13745  52F5
13746  52F6
13747  52F7
13748  52F8
13749  52F9
13750  52FA
13751  52FB
13752  52FC
13753  52FD
13754  52FE
13755  52FF
13756  5300
13757  5301
13758  5302
13759  5303
13760  5304
13761  5305
13762  5306
13763  5307
13764  5308
13765  5309
13766  530A
13767  530B
13768  530C
13769  530D
13770  530E
13771  530F
13772  5310
13773  5311
13774  5312
13775  5313
13776  5314
13777  5315
13778  5316
13779  5317
13780  5318
13781  5319
13782  531A
13783  531B
13784  531C
13785  531D
13786  531E
13787  531F
13788  5320
13789  5321
13790  5322
13791  5323
13792  5324
13793  5325
13794  5326
13795  5327
13796  5328
13797  5329
13798  532A
13799  532B
13800  532C
13801  532D
13802  532E
13803  532F
13804  5330
13805  5331
13806  5332
13807  5333
13808  5334
13809  5335
13810  5336
13811  5337
13812  5338
13813  5339
13814  533A
13815  533B
13816  533C
13817  533D
13818  533E
13819  533F
13820  5340
13821  5341
13822  5342
13823  5343
13824  5344
13825  5345
13826  5346
13827  5347
13828  5348
13829  5349
13830  534A
13831  534B
13832  534C
13833  534D
13834  534E
13835  534F
13836  5350
13837  5351
13838  5352
13839  5353
13840  5354
13841  5355
13842  5356
13843  5357
13844  5358
13845  5359
13846  535A
13847  535B
13848  535C
13849  535D
13850  535E
13851  535F
13852  5360
13853  5361
13854  5362
13855  5363
13856  5364
13857  5365
13858  5366
13859  5367
13860  5368
13861  5369
13862  536A
13863  536B
13864  536C
13865  536D
13866  536E
13867  536F
13868  5370
13869  5371
13870  5372
13871  5373
13872  5374
13873  5375
13874  5376
13875  5377
13876  5378
13877  5379
13878  537A
13879  537B
13880  537C
13881  537D
13882  537E
13883  537F
13884  5380
13885  5381
13886  5382
13887  5383
13888  5384
13889  5385
13890  5386
13891  5387
13892  5388
13893  5389
13894  538A
13895  538B
13896  538C
13897  538D
13898  538E
13899  538F
13900  5390
13901  5391
13902  5392
13903  5393
13904  5394
13905  5395
13906  5396
13907  5397
13908  5398
13909  5399
13910  539A
13911  539B
13912  539C
13913  539D
13914  539E
13915  539F
13916  53A0
13917  53A1
13918  53A2
13919  53A3
13920  53A4
13921  53A5
13922  53A6
13923  53A7
13924  53A8
13925  53A9
13926  53AA
13927  53AB
13928  53AC
13929  53AD
13930  53AE
13931  53AF
13932  53B0
13933  53B1
13934  53B2
13935  53B3
13936  53B4
13937  53B5
13938  53B6
13939  53B7
13940  53B8
13941  53B9
13942  53BA
13943  53BB
13944  53BC
13945  53BD
13946  53BE
13947  53BF
13948  53C0
13949  53C1
13950  53C2
13951  53C3
13952  53C4
13953  53C5
13954  53C6
13955  53C7
13956  53C8
13957  53C9
13958  53CA
13959  53CB
13960  53CC
13961  53CD
13962  53CE
13963  53CF
13964  53D0
13965  53D1
13966  53D2
13967  53D3
13968  53D4
13969  53D5
13970  53D6
13971  53D7
13972  53D8
13973  53D9
13974  53DA
13975  53DB
13976  53DC
13977  53DD
13978  53DE
13979  53DF
13980  53E0
13981  53E1
13982  53E2
13983  53E3
13984  53E4
13985  53E5
13986  53E6
13987  53E7
13988  53E8
13989  53E9
13990  53EA
13991  53EB
13992  53EC
13993  53ED
13994  53EE
13995  53EF
13996  53F0
13997  53F1
13998  53F2
13999  53F3
14000  53F4
14001  53F5
14002  53F6
14003  53F7
14004  53F8
14005  53F9
14006  53FA
14007  53FB
14008  53FC
14009  53FD
14010  53FE
14011  53FF
14012  5400
14013  5401
14014  5402
14015  5403
14016  5404
14017  5405
14018  5406
14019  5407
14020  5408
14021  5409
14022  540A
14023  540B
14024  540C
14025  540D
14026  540E
14027  540F
14028  5410
14029  5411
14030  5412
14031  5413
14032  5414
14033  5415
14034  5416
14035  5417
14036  5418
14037  5419
14038  541A
14039  541B
14040  541C
14041  541D
14042  541E
14043  541F
14044  5420
14045  5421
14046  5422
14047  5423
14048  5424
14049  5425
14050  5426
14051  5427
14052  5428
14053  5429
14054  542A
14055  542B
14056  542C
14057  542D
14058  542E
14059  542F
14060  5430
14061  5431
14062  5432
14063  5433
14064  5434
14065  5435
14066  5436
14067  5437
14068  5438
14069  5439
14070  543A
14071  543B
14072  543C
14073  543D
14074  543E
14075  543F
14076  5440
14077  5441
14078  5442
14079  5443
14080  5444
14081  5445
14082  5446
14083  5447
14084  5448
14085  5449
14086  544A
14087  544B
14088  544C
14089  544D
14090  544E
14091  544F
14092  5450
14093  5451
14094  5452
14095  5453
14096  5454
14097  5455
14098  5456
14099  5457
14100  5458
14101  5459
14102  545A
14103  545B
14104  545C
14105  545D
14106  545E
14107  545F
14108  5460
14109  5461
14110  5462
14111  5463
14112  5464
14113  5465
14114  5466
14115  5467
14116  5468
14117  5469
14118  546A
14119  546B
14120  546C
14121  546D
14122  546E
14123  546F
14124  5470
14125  5471
14126  5472
14127  5473
14128  5474
14129  5475
14130  5476
14131  5477
14132  5478
14133  5479
14134  547A
14135  547B
14136  547C
14137  547D
14138  547E
14139  547F
14140  5480
14141  5481
14142  5482
14143  5483
14144  5484
14145  5485
14146  5486
14147  5487
14148  5488
14149  5489
14150  548A
14151  548B
14152  548C
14153  548D
14154  548E
14155  548F
14156  5490
14157  5491
14158  5492
14159  5493
14160  5494
14161  5495
14162  5496
14163  5497
14164  5498
14165  5499
14166  549A
14167  549B
14168  549C
14169  549D
14170  549E
14171  549F
14172  54A0
14173  54A1
14174  54A2
14175  54A3
14176  54A4
14177  54A5
14178  54A6
14179  54A7
14180  54A8
14181  54A9
14182  54AA
14183  54AB
14184  54AC
14185  54AD
14186  54AE
14187  54AF
14188  54B0
14189  54B1
14190  54B2
14191  54B3
14192  54B4
14193  54B5
14194  54B6
14195  54B7
14196  54B8
14197  54B9
14198  54BA
14199  54BB
14200  54BC
14201  54BD
14202  54BE
14203  54BF
14204  54C0
14205  54C1
14206  54C2
14207  54C3
14208  54C4
14209  54C5
14210  54C6
14211  54C7
14212  54C8
14213  54C9
14214  54CA
14215  54CB
14216  54CC
14217  54CD
14218  54CE
14219  54CF
14220  54D0
14221  54D1
14222  54D2
14223  54D3
14224  54D4
14225  54D5
14226  54D6
14227  54D7
14228  54D8
14229  54D9
14230  54DA
14231  54DB
14232  54DC
14233  54DD
14234  54DE
14235  54DF
14236  54E0
14237  54E1
14238  54E2
14239  54E3
14240  54E4
14241  54E5
14242  54E6
14243  54E7
14244  54E8
14245  54E9
14246  54EA
14247  54EB
14248  54EC
14249  54ED
14250  54EE
14251  54EF
14252  54F0
14253  54F1
14254  54F2
14255  54F3
14256  54F4
14257  54F5
14258  54F6
14259  54F7
14260  54F8
14261  54F9
14262  54FA
14263  54FB
14264  54FC
14265  54FD
14266  54FE
14267  54FF
14268  5500
14269  5501
14270  5502
14271  5503
14272  5504
14273  5505
14274  5506
14275  5507
14276  5508
14277  5509
14278  550A
14279  550B
14280  550C
14281  550D
14282  550E
14283  550F
14284  5510
14285  5511
14286  5512
14287  5513
14288  5514
14289  5515
14290  5516
14291  5517
14292  5518
14293  5519
14294  551A
14295  551B
14296  551C
14297  551D
14298  551E
14299  551F
14300  5520
14301  5521
14302  5522
14303  5523
14304  5524
14305  5525
14306  5526
14307  5527
14308  5528
14309  5529
14310  552A
14311  552B
14312  552C
14313  552D
14314  552E
14315  552F
14316  5530
14317  5531
14318  5532
14319  5533
14320  5534
14321  5535
14322  5536
14323  5537
14324  5538
14325  5539
14326  553A
14327  553B
14328  553C
14329  553D
14330  553E
14331  553F
14332  5540
14333  5541
14334  5542
14335  5543
14336  5544
14337  5545
14338  5546
14339  5547
14340  5548
14341  5549
14342  554A
14343  554B
14344  554C
14345  554D
14346  554E
14347  554F
14348  5550
14349  5551
14350  5552
14351  5553
14352  5554
14353  5555
14354  5556
14355  5557
14356  5558
14357  5559
14358  555A
14359  555B
14360  555C
14361  555D
14362  555E
14363  555F
14364  5560
14365  5561
14366  5562
14367  5563
14368  5564
14369  5565
14370  5566
14371  5567
14372  5568
14373  5569
14374  556A
14375  556B
14376  556C
14377  556D
14378  556E
14379  556F
14380  5570
14381  5571
14382  5572
14383  5573
14384  5574
14385  5575
14386  5576
14387  5577
14388  5578
14389  5579
14390  557A
14391  557B
14392  557C
14393  557D
14394  557E
14395  557F
14396  5580
14397  5581
14398  5582
14399  5583
14400  5584
14401  5585
14402  5586
14403  5587
14404  5588
14405  5589
14406  558A
14407  558B
14408  558C
14409  558D
14410  558E
14411  558F
14412  5590
14413  5591
14414  5592
14415  5593
14416  5594
14417  5595
14418  5596
14419  5597
14420  5598
14421  5599
14422  559A
14423  559B
14424  559C
14425  559D
14426  559E
14427  559F
14428  55A0
14429  55A1
14430  55A2
14431  55A3
14432  55A4
14433  55A5
14434  55A6
14435  55A7
14436  55A8
14437  55A9
14438  55AA
14439  55AB
14440  55AC
14441  55AD
14442  55AE
14443  55AF
14444  55B0
14445  55B1
14446  55B2
14447  55B3
14448  55B4
14449  55B5
14450  55B6
14451  55B7
14452  55B8
14453  55B9
14454  55BA
14455  55BB
14456  55BC
14457  55BD
14458  55BE
14459  55BF
14460  55C0
14461  55C1
14462  55C2
14463  55C3
14464  55C4
14465  55C5
14466  55C6
14467  55C7
14468  55C8
14469  55C9
14470  55CA
14471  55CB
14472  55CC
14473  55CD
14474  55CE
14475  55CF
14476  55D0
14477  55D1
14478  55D2
14479  55D3
14480  55D4
14481  55D5
14482  55D6
14483  55D7
14484  55D8
14485  55D9
14486  55DA
14487  55DB
14488  55DC
14489  55DD
14490  55DE
14491  55DF
14492  55E0
14493  55E1
14494  55E2
14495  55E3
14496  55E4
14497  55E5
14498  55E6
14499  55E7
14500  55E8
14501  55E9
14502  55EA
14503  55EB
14504  55EC
14505  55ED
14506  55EE
14507  55EF
14508  55F0
14509  55F1
14510  55F2
14511  55F3
14512  55F4
14513  55F5
14514  55F6
14515  55F7
14516  55F8
14517  55F9
14518  55FA
14519  55FB
14520  55FC
14521  55FD
14522  55FE
14523  55FF
14524  5600
14525  5601
14526  5602
14527  5603
14528  5604
14529  5605
14530  5606
14531  5607
14532  5608
14533  5609
14534  560A
14535  560B
14536  560C
14537  560D
14538  560E
14539  560F
14540  5610
14541  5611
14542  5612
14543  5613
14544  5614
14545  5615
14546  5616
14547  5617
14548  5618
14549  5619
14550  561A
14551  561B
14552  561C
14553  561D
14554  561E
14555  561F
14556  5620
14557  5621
14558  5622
14559  5623
14560  5624
14561  5625
14562  5626
14563  5627
14564  5628
14565  5629
14566  562A
14567  562B
14568  562C
14569  562D
14570  562E
14571  562F
14572  5630
14573  5631
14574  5632
14575  5633
14576  5634
14577  5635
14578  5636
14579  5637
14580  5638
14581  5639
14582  563A
14583  563B
14584  563C
14585  563D
14586  563E
14587  563F
14588  5640
14589  5641
14590  5642
14591  5643
14592  5644
14593  5645
14594  5646
14595  5647
14596  5648
14597  5649
14598  564A
14599  564B
14600  564C
14601  564D
14602  564E
14603  564F
14604  5650
14605  5651
14606  5652
14607  5653
14608  5654
14609  5655
14610  5656
14611  5657
14612  5658
14613  5659
14614  565A
14615  565B
14616  565C
14617  565D
14618  565E
14619  565F
14620  5660
14621  5661
14622  5662
14623  5663
14624  5664
14625  5665
14626  5666
14627  5667
14628  5668
14629  5669
14630  566A
14631  566B
14632  566C
14633  566D
14634  566E
14635  566F
14636  5670
14637  5671
14638  5672
14639  5673
14640  5674
14641  5675
14642  5676
14643  5677
14644  5678
14645  5679
14646  567A
14647  567B
14648  567C
14649  567D
14650  567E
14651  567F
14652  5680
14653  5681
14654  5682
14655  5683
14656  5684
14657  5685
14658  5686
14659  5687
14660  5688
14661  5689
14662  568A
14663  568B
14664  568C
14665  568D
14666  568E
14667  568F
14668  5690
14669  5691
14670  5692
14671  5693
14672  5694
14673  5695
14674  5696
14675  5697
14676  5698
14677  5699
14678  569A
14679  569B
14680  569C
14681  569D
14682  569E
14683  569F
14684  56A0
14685  56A1
14686  56A2
14687  56A3
14688  56A4
14689  56A5
14690  56A6
14691  56A7
14692  56A8
14693  56A9
14694  56AA
14695  56AB
14696  56AC
14697  56AD
14698  56AE
14699  56AF
14700  56B0
14701  56B1
14702  56B2
14703  56B3
14704  56B4
14705  56B5
14706  56B6
14707  56B7
14708  56B8
14709  56B9
14710  56BA
14711  56BB
14712  56BC
14713  56BD
14714  56BE
14715  56BF
14716  56C0
14717  56C1
14718  56C2
14719  56C3
14720  56C4
14721  56C5
14722  56C6
14723  56C7
14724  56C8
14725  56C9
14726  56CA
14727  56CB
14728  56CC
14729  56CD
14730  56CE
14731  56CF
14732  56D0
14733  56D1
14734  56D2
14735  56D3
14736  56D4
14737  56D5
14738  56D6
14739  56D7
14740  56D8
14741  56D9
14742  56DA
14743  56DB
14744  56DC
14745  56DD
14746  56DE
14747  56DF
14748  56E0
14749  56E1
14750  56E2
14751  56E3
14752  56E4
14753  56E5
14754  56E6
14755  56E7
14756  56E8
14757  56E9
14758  56EA
14759  56EB
14760  56EC
14761  56ED
14762  56EE
14763  56EF
14764  56F0
14765  56F1
14766  56F2
14767  56F3
14768  56F4
14769  56F5
14770  56F6
14771  56F7
14772  56F8
14773  56F9
14774  56FA
14775  56FB
14776  56FC
14777  56FD
14778  56FE
14779  56FF
14780  5700
14781  5701
14782  5702
14783  5703
14784  5704
14785  5705
14786  5706
14787  5707
14788  5708
14789  5709
14790  570A
14791  570B
14792  570C
14793  570D
14794  570E
14795  570F
14796  5710
14797  5711
14798  5712
14799  5713
14800  5714
14801  5715
14802  5716
14803  5717
14804  5718
14805  5719
14806  571A
14807  571B
14808  571C
14809  571D
14810  571E
14811  571F
14812  5720
14813  5721
14814  5722
14815  5723
14816  5724
14817  5725
14818  5726
14819  5727
14820  5728
14821  5729
14822  572A
14823  572B
14824  572C
14825  572D
14826  572E
14827  572F
14828  5730
14829  5731
14830  5732
14831  5733
14832  5734
14833  5735
14834  5736
14835  5737
14836  5738
14837  5739
14838  573A
14839  573B
14840  573C
14841  573D
14842  573E
14843  573F
14844  5740
14845  5741
14846  5742
14847  5743
14848  5744
14849  5745
14850  5746
14851  5747
14852  5748
14853  5749
14854  574A
14855  574B
14856  574C
14857  574D
14858  574E
14859  574F
14860  5750
14861  5751
14862  5752
14863  5753
14864  5754
14865  5755
14866  5756
14867  5757
14868  5758
14869  5759
14870  575A
14871  575B
14872  575C
14873  575D
14874  575E
14875  575F
14876  5760
14877  5761
14878  5762
14879  5763
14880  5764
14881  5765
14882  5766
14883  5767
14884  5768
14885  5769
14886  576A
14887  576B
14888  576C
14889  576D
14890  576E
14891  576F
14892  5770
14893  5771
14894  5772
14895  5773
14896  5774
14897  5775
14898  5776
14899  5777
14900  5778
14901  5779
14902  577A
14903  577B
14904  577C
14905  577D
14906  577E
14907  577F
14908  5780
14909  5781
14910  5782
14911  5783
14912  5784
14913  5785
14914  5786
14915  5787
14916  5788
14917  5789
14918  578A
14919  578B
14920  578C
14921  578D
14922  578E
14923  578F
14924  5790
14925  5791
14926  5792
14927  5793
14928  5794
14929  5795
14930  5796
14931  5797
14932  5798
14933  5799
14934  579A
14935  579B
14936  579C
14937  579D
14938  579E
14939  579F
14940  57A0
14941  57A1
14942  57A2
14943  57A3
14944  57A4
14945  57A5
14946  57A6
14947  57A7
14948  57A8
14949  57A9
14950  57AA
14951  57AB
14952  57AC
14953  57AD
14954  57AE
14955  57AF
14956  57B0
14957  57B1
14958  57B2
14959  57B3
14960  57B4
14961  57B5
14962  57B6
14963  57B7
14964  57B8
14965  57B9
14966  57BA
14967  57BB
14968  57BC
14969  57BD
14970  57BE
14971  57BF
14972  57C0
14973  57C1
14974  57C2
14975  57C3
14976  57C4
14977  57C5
14978  57C6
14979  57C7
14980  57C8
14981  57C9
14982  57CA
14983  57CB
14984  57CC
14985  57CD
14986  57CE
14987  57CF
14988  57D0
14989  57D1
14990  57D2
14991  57D3
14992  57D4
14993  57D5
14994  57D6
14995  57D7
14996  57D8
14997  57D9
14998  57DA
14999  57DB
15000  57DC
15001  57DD
15002  57DE
15003  57DF
15004  57E0
15005  57E1
15006  57E2
15007  57E3
15008  57E4
15009  57E5
15010  57E6
15011  57E7
15012  57E8
15013  57E9
15014  57EA
15015  57EB
15016  57EC
15017  57ED
15018  57EE
15019  57EF
15020  57F0
15021  57F1
15022  57F2
15023  57F3
15024  57F4
15025  57F5
15026  57F6
15027  57F7
15028  57F8
15029  57F9
15030  57FA
15031  57FB
15032  57FC
15033  57FD
15034  57FE
15035  57FF
15036  5800
15037  5801
15038  5802
15039  5803
15040  5804
15041  5805
15042  5806
15043  5807
15044  5808
15045  5809
15046  580A
15047  580B
15048  580C
15049  580D
15050  580E
15051  580F
15052  5810
15053  5811
15054  5812
15055  5813
15056  5814
15057  5815
15058  5816
15059  5817
15060  5818
15061  5819
15062  581A
15063  581B
15064  581C
15065  581D
15066  581E
15067  581F
15068  5820
15069  5821
15070  5822
15071  5823
15072  5824
15073  5825
15074  5826
15075  5827
15076  5828
15077  5829
15078  582A
15079  582B
15080  582C
15081  582D
15082  582E
15083  582F
15084  5830
15085  5831
15086  5832
15087  5833
15088  5834
15089  5835
15090  5836
15091  5837
15092  5838
15093  5839
15094  583A
15095  583B
15096  583C
15097  583D
15098  583E
15099  583F
15100  5840
15101  5841
15102  5842
15103  5843
15104  5844
15105  5845
15106  5846
15107  5847
15108  5848
15109  5849
15110  584A
15111  584B
15112  584C
15113  584D
15114  584E
15115  584F
15116  5850
15117  5851
15118  5852
15119  5853
15120  5854
15121  5855
15122  5856
15123  5857
15124  5858
15125  5859
15126  585A
15127  585B
15128  585C
15129  585D
15130  585E
15131  585F
15132  5860
15133  5861
15134  5862
15135  5863
15136  5864
15137  5865
15138  5866
15139  5867
15140  5868
15141  5869
15142  586A
15143  586B
15144  586C
15145  586D
15146  586E
15147  586F
15148  5870
15149  5871
15150  5872
15151  5873
15152  5874
15153  5875
15154  5876
15155  5877
15156  5878
15157  5879
15158  587A
15159  587B
15160  587C
15161  587D
15162  587E
15163  587F
15164  5880
15165  5881
15166  5882
15167  5883
15168  5884
15169  5885
15170  5886
15171  5887
15172  5888
15173  5889
15174  588A
15175  588B
15176  588C
15177  588D
15178  588E
15179  588F
15180  5890
15181  5891
15182  5892
15183  5893
15184  5894
15185  5895
15186  5896
15187  5897
15188  5898
15189  5899
15190  589A
15191  589B
15192  589C
15193  589D
15194  589E
15195  589F
15196  58A0
15197  58A1
15198  58A2
15199  58A3
15200  58A4
15201  58A5
15202  58A6
15203  58A7
15204  58A8
15205  58A9
15206  58AA
15207  58AB
15208  58AC
15209  58AD
15210  58AE
15211  58AF
15212  58B0
15213  58B1
15214  58B2
15215  58B3
15216  58B4
15217  58B5
15218  58B6
15219  58B7
15220  58B8
15221  58B9
15222  58BA
15223  58BB
15224  58BC
15225  58BD
15226  58BE
15227  58BF
15228  58C0
15229  58C1
15230  58C2
15231  58C3
15232  58C4
15233  58C5
15234  58C6
15235  58C7
15236  58C8
15237  58C9
15238  58CA
15239  58CB
15240  58CC
15241  58CD
15242  58CE
15243  58CF
15244  58D0
15245  58D1
15246  58D2
15247  58D3
15248  58D4
15249  58D5
15250  58D6
15251  58D7
15252  58D8
15253  58D9
15254  58DA
15255  58DB
15256  58DC
15257  58DD
15258  58DE
15259  58DF
15260  58E0
15261  58E1
15262  58E2
15263  58E3
15264  58E4
15265  58E5
15266  58E6
15267  58E7
15268  58E8
15269  58E9
15270  58EA
15271  58EB
15272  58EC
15273  58ED
15274  58EE
15275  58EF
15276  58F0
15277  58F1
15278  58F2
15279  58F3
15280  58F4
15281  58F5
15282  58F6
15283  58F7
15284  58F8
15285  58F9
15286  58FA
15287  58FB
15288  58FC
15289  58FD
15290  58FE
15291  58FF
15292  5900
15293  5901
15294  5902
15295  5903
15296  5904
15297  5905
15298  5906
15299  5907
15300  5908
15301  5909
15302  590A
15303  590B
15304  590C
15305  590D
15306  590E
15307  590F
15308  5910
15309  5911
15310  5912
15311  5913
15312  5914
15313  5915
15314  5916
15315  5917
15316  5918
15317  5919
15318  591A
15319  591B
15320  591C
15321  591D
15322  591E
15323  591F
15324  5920
15325  5921
15326  5922
15327  5923
15328  5924
15329  5925
15330  5926
15331  5927
15332  5928
15333  5929
15334  592A
15335  592B
15336  592C
15337  592D
15338  592E
15339  592F
15340  5930
15341  5931
15342  5932
15343  5933
15344  5934
15345  5935
15346  5936
15347  5937
15348  5938
15349  5939
15350  593A
15351  593B
15352  593C
15353  593D
15354  593E
15355  593F
15356  5940
15357  5941
15358  5942
15359  5943
15360  5944
15361  5945
15362  5946
15363  5947
15364  5948
15365  5949
15366  594A
15367  594B
15368  594C
15369  594D
15370  594E
15371  594F
15372  5950
15373  5951
15374  5952
15375  5953
15376  5954
15377  5955
15378  5956
15379  5957
15380  5958
15381  5959
15382  595A
15383  595B
15384  595C
15385  595D
15386  595E
15387  595F
15388  5960
15389  5961
15390  5962
15391  5963
15392  5964
15393  5965
15394  5966
15395  5967
15396  5968
15397  5969
15398  596A
15399  596B
15400  596C
15401  596D
15402  596E
15403  596F
15404  5970
15405  5971
15406  5972
15407  5973
15408  5974
15409  5975
15410  5976
15411  5977
15412  5978
15413  5979
15414  597A
15415  597B
15416  597C
15417  597D
15418  597E
15419  597F
15420  5980
15421  5981
15422  5982
15423  5983
15424  5984
15425  5985
15426  5986
15427  5987
15428  5988
15429  5989
15430  598A
15431  598B
15432  598C
15433  598D
15434  598E
15435  598F
15436  5990
15437  5991
15438  5992
15439  5993
15440  5994
15441  5995
15442  5996
15443  5997
15444  5998
15445  5999
15446  599A
15447  599B
15448  599C
15449  599D
15450  599E
15451  599F
15452  59A0
15453  59A1
15454  59A2
15455  59A3
15456  59A4
15457  59A5
15458  59A6
15459  59A7
15460  59A8
15461  59A9
15462  59AA
15463  59AB
15464  59AC
15465  59AD
15466  59AE
15467  59AF
15468  59B0
15469  59B1
15470  59B2
15471  59B3
15472  59B4
15473  59B5
15474  59B6
15475  59B7
15476  59B8
15477  59B9
15478  59BA
15479  59BB
15480  59BC
15481  59BD
15482  59BE
15483  59BF
15484  59C0
15485  59C1
15486  59C2
15487  59C3
15488  59C4
15489  59C5
15490  59C6
15491  59C7
15492  59C8
15493  59C9
15494  59CA
15495  59CB
15496  59CC
15497  59CD
15498  59CE
15499  59CF
15500  59D0
15501  59D1
15502  59D2
15503  59D3
15504  59D4
15505  59D5
15506  59D6
15507  59D7
15508  59D8
15509  59D9
15510  59DA
15511  59DB
15512  59DC
15513  59DD
15514  59DE
15515  59DF
15516  59E0
15517  59E1
15518  59E2
15519  59E3
15520  59E4
15521  59E5
15522  59E6
15523  59E7
15524  59E8
15525  59E9
15526  59EA
15527  59EB
15528  59EC
15529  59ED
15530  59EE
15531  59EF
15532  59F0
15533  59F1
15534  59F2
15535  59F3
15536  59F4
15537  59F5
15538  59F6
15539  59F7
15540  59F8
15541  59F9
15542  59FA
15543  59FB
15544  59FC
15545  59FD
15546  59FE
15547  59FF
15548  5A00
15549  5A01
15550  5A02
15551  5A03
15552  5A04
15553  5A05
15554  5A06
15555  5A07
15556  5A08
15557  5A09
15558  5A0A
15559  5A0B
15560  5A0C
15561  5A0D
15562  5A0E
15563  5A0F
15564  5A10
15565  5A11
15566  5A12
15567  5A13
15568  5A14
15569  5A15
15570  5A16
15571  5A17
15572  5A18
15573  5A19
15574  5A1A
15575  5A1B
15576  5A1C
15577  5A1D
15578  5A1E
15579  5A1F
15580  5A20
15581  5A21
15582  5A22
15583  5A23
15584  5A24
15585  5A25
15586  5A26
15587  5A27
15588  5A28
15589  5A29
15590  5A2A
15591  5A2B
15592  5A2C
15593  5A2D
15594  5A2E
15595  5A2F
15596  5A30
15597  5A31
15598  5A32
15599  5A33
15600  5A34
15601  5A35
15602  5A36
15603  5A37
15604  5A38
15605  5A39
15606  5A3A
15607  5A3B
15608  5A3C
15609  5A3D
15610  5A3E
15611  5A3F
15612  5A40
15613  5A41
15614  5A42
15615  5A43
15616  5A44
15617  5A45
15618  5A46
15619  5A47
15620  5A48
15621  5A49
15622  5A4A
15623  5A4B
15624  5A4C
15625  5A4D
15626  5A4E
15627  5A4F
15628  5A50
15629  5A51
15630  5A52
15631  5A53
15632  5A54
15633  5A55
15634  5A56
15635  5A57
15636  5A58
15637  5A59
15638  5A5A
15639  5A5B
15640  5A5C
15641  5A5D
15642  5A5E
15643  5A5F
15644  5A60
15645  5A61
15646  5A62
15647  5A63
15648  5A64
15649  5A65
15650  5A66
15651  5A67
15652  5A68
15653  5A69
15654  5A6A
15655  5A6B
15656  5A6C
15657  5A6D
15658  5A6E
15659  5A6F
15660  5A70
15661  5A71
15662  5A72
15663  5A73
15664  5A74
15665  5A75
15666  5A76
15667  5A77
15668  5A78
15669  5A79
15670  5A7A
15671  5A7B
15672  5A7C
15673  5A7D
15674  5A7E
15675  5A7F
15676  5A80
15677  5A81
15678  5A82
15679  5A83
15680  5A84
15681  5A85
15682  5A86
15683  5A87
15684  5A88
15685  5A89
15686  5A8A
15687  5A8B
15688  5A8C
15689  5A8D
15690  5A8E
15691  5A8F
15692  5A90
15693  5A91
15694  5A92
15695  5A93
15696  5A94
15697  5A95
15698  5A96
15699  5A97
15700  5A98
15701  5A99
15702  5A9A
15703  5A9B
15704  5A9C
15705  5A9D
15706  5A9E
15707  5A9F
15708  5AA0
15709  5AA1
15710  5AA2
15711  5AA3
15712  5AA4
15713  5AA5
15714  5AA6
15715  5AA7
15716  5AA8
15717  5AA9
15718  5AAA
15719  5AAB
15720  5AAC
15721  5AAD
15722  5AAE
15723  5AAF
15724  5AB0
15725  5AB1
15726  5AB2
15727  5AB3
15728  5AB4
15729  5AB5
15730  5AB6
15731  5AB7
15732  5AB8
15733  5AB9
15734  5ABA
15735  5ABB
15736  5ABC
15737  5ABD
15738  5ABE
15739  5ABF
15740  5AC0
15741  5AC1
15742  5AC2
15743  5AC3
15744  5AC4
15745  5AC5
15746  5AC6
15747  5AC7
15748  5AC8
15749  5AC9
15750  5ACA
15751  5ACB
15752  5ACC
15753  5ACD
15754  5ACE
15755  5ACF
15756  5AD0
15757  5AD1
15758  5AD2
15759  5AD3
15760  5AD4
15761  5AD5
15762  5AD6
15763  5AD7
15764  5AD8
15765  5AD9
15766  5ADA
15767  5ADB
15768  5ADC
15769  5ADD
15770  5ADE
15771  5ADF
15772  5AE0
15773  5AE1
15774  5AE2
15775  5AE3
15776  5AE4
15777  5AE5
15778  5AE6
15779  5AE7
15780  5AE8
15781  5AE9
15782  5AEA
15783  5AEB
15784  5AEC
15785  5AED
15786  5AEE
15787  5AEF
15788  5AF0
15789  5AF1
15790  5AF2
15791  5AF3
15792  5AF4
15793  5AF5
15794  5AF6
15795  5AF7
15796  5AF8
15797  5AF9
15798  5AFA
15799  5AFB
15800  5AFC
15801  5AFD
15802  5AFE
15803  5AFF
15804  5B00
15805  5B01
15806  5B02
15807  5B03
15808  5B04
15809  5B05
15810  5B06
15811  5B07
15812  5B08
15813  5B09
15814  5B0A
15815  5B0B
15816  5B0C
15817  5B0D
15818  5B0E
15819  5B0F
15820  5B10
15821  5B11
15822  5B12
15823  5B13
15824  5B14
15825  5B15
15826  5B16
15827  5B17
15828  5B18
15829  5B19
15830  5B1A
15831  5B1B
15832  5B1C
15833  5B1D
15834  5B1E
15835  5B1F
15836  5B20
15837  5B21
15838  5B22
15839  5B23
15840  5B24
15841  5B25
15842  5B26
15843  5B27
15844  5B28
15845  5B29
15846  5B2A
15847  5B2B
15848  5B2C
15849  5B2D
15850  5B2E
15851  5B2F
15852  5B30
15853  5B31
15854  5B32
15855  5B33
15856  5B34
15857  5B35
15858  5B36
15859  5B37
15860  5B38
15861  5B39
15862  5B3A
15863  5B3B
15864  5B3C
15865  5B3D
15866  5B3E
15867  5B3F
15868  5B40
15869  5B41
15870  5B42
15871  5B43
15872  5B44
15873  5B45
15874  5B46
15875  5B47
15876  5B48
15877  5B49
15878  5B4A
15879  5B4B
15880  5B4C
15881  5B4D
15882  5B4E
15883  5B4F
15884  5B50
15885  5B51
15886  5B52
15887  5B53
15888  5B54
15889  5B55
15890  5B56
15891  5B57
15892  5B58
15893  5B59
15894  5B5A
15895  5B5B
15896  5B5C
15897  5B5D
15898  5B5E
15899  5B5F
15900  5B60
15901  5B61
15902  5B62
15903  5B63
15904  5B64
15905  5B65
15906  5B66
15907  5B67
15908  5B68
15909  5B69
15910  5B6A
15911  5B6B
15912  5B6C
15913  5B6D
15914  5B6E
15915  5B6F
15916  5B70
15917  5B71
15918  5B72
15919  5B73
15920  5B74
15921  5B75
15922  5B76
15923  5B77
15924  5B78
15925  5B79
15926  5B7A
15927  5B7B
15928  5B7C
15929  5B7D
15930  5B7E
15931  5B7F
15932  5B80
15933  5B81
15934  5B82
15935  5B83
15936  5B84
15937  5B85
15938  5B86
15939  5B87
15940  5B88
15941  5B89
15942  5B8A
15943  5B8B
15944  5B8C
15945  5B8D
15946  5B8E
15947  5B8F
15948  5B90
15949  5B91
15950  5B92
15951  5B93
15952  5B94
15953  5B95
15954  5B96
15955  5B97
15956  5B98
15957  5B99
15958  5B9A
15959  5B9B
15960  5B9C
15961  5B9D
15962  5B9E
15963  5B9F
15964  5BA0
15965  5BA1
15966  5BA2
15967  5BA3
15968  5BA4
15969  5BA5
15970  5BA6
15971  5BA7
15972  5BA8
15973  5BA9
15974  5BAA
15975  5BAB
15976  5BAC
15977  5BAD
15978  5BAE
15979  5BAF
15980  5BB0
15981  5BB1
15982  5BB2
15983  5BB3
15984  5BB4
15985  5BB5
15986  5BB6
15987  5BB7
15988  5BB8
15989  5BB9
15990  5BBA
15991  5BBB
15992  5BBC
15993  5BBD
15994  5BBE
15995  5BBF
15996  5BC0
15997  5BC1
15998  5BC2
15999  5BC3
16000  5BC4
16001  5BC5
16002  5BC6
16003  5BC7
16004  5BC8
16005  5BC9
16006  5BCA
16007  5BCB
16008  5BCC
16009  5BCD
16010  5BCE
16011  5BCF
16012  5BD0
16013  5BD1
16014  5BD2
16015  5BD3
16016  5BD4
16017  5BD5
16018  5BD6
16019  5BD7
16020  5BD8
16021  5BD9
16022  5BDA
16023  5BDB
16024  5BDC
16025  5BDD
16026  5BDE
16027  5BDF
16028  5BE0
16029  5BE1
16030  5BE2
16031  5BE3
16032  5BE4
16033  5BE5
16034  5BE6
16035  5BE7
16036  5BE8
16037  5BE9
16038  5BEA
16039  5BEB
16040  5BEC
16041  5BED
16042  5BEE
16043  5BEF
16044  5BF0
16045  5BF1
16046  5BF2
16047  5BF3
16048  5BF4
16049  5BF5
16050  5BF6
16051  5BF7
16052  5BF8
16053  5BF9
16054  5BFA
16055  5BFB
16056  5BFC
16057  5BFD
16058  5BFE
16059  5BFF
16060  5C00
16061  5C01
16062  5C02
16063  5C03
16064  5C04
16065  5C05
16066  5C06
16067  5C07
16068  5C08
16069  5C09
16070  5C0A
16071  5C0B
16072  5C0C
16073  5C0D
16074  5C0E
16075  5C0F
16076  5C10
16077  5C11
16078  5C12
16079  5C13
16080  5C14
16081  5C15
16082  5C16
16083  5C17
16084  5C18
16085  5C19
16086  5C1A
16087  5C1B
16088  5C1C
16089  5C1D
16090  5C1E
16091  5C1F
16092  5C20
16093  5C21
16094  5C22
16095  5C23
16096  5C24
16097  5C25
16098  5C26
16099  5C27
16100  5C28
16101  5C29
16102  5C2A
16103  5C2B
16104  5C2C
16105  5C2D
16106  5C2E
16107  5C2F
16108  5C30
16109  5C31
16110  5C32
16111  5C33
16112  5C34
16113  5C35
16114  5C36
16115  5C37
16116  5C38
16117  5C39
16118  5C3A
16119  5C3B
16120  5C3C
16121  5C3D
16122  5C3E
16123  5C3F
16124  5C40
16125  5C41
16126  5C42
16127  5C43
16128  5C44
16129  5C45
16130  5C46
16131  5C47
16132  5C48
16133  5C49
16134  5C4A
16135  5C4B
16136  5C4C
16137  5C4D
16138  5C4E
16139  5C4F
16140  5C50
16141  5C51
16142  5C52
16143  5C53
16144  5C54
16145  5C55
16146  5C56
16147  5C57
16148  5C58
16149  5C59
16150  5C5A
16151  5C5B
16152  5C5C
16153  5C5D
16154  5C5E
16155  5C5F
16156  5C60
16157  5C61
16158  5C62
16159  5C63
16160  5C64
16161  5C65
16162  5C66
16163  5C67
16164  5C68
16165  5C69
16166  5C6A
16167  5C6B
16168  5C6C
16169  5C6D
16170  5C6E
16171  5C6F
16172  5C70
16173  5C71
16174  5C72
16175  5C73
16176  5C74
16177  5C75
16178  5C76
16179  5C77
16180  5C78
16181  5C79
16182  5C7A
16183  5C7B
16184  5C7C
16185  5C7D
16186  5C7E
16187  5C7F
16188  5C80
16189  5C81
16190  5C82
16191  5C83
16192  5C84
16193  5C85
16194  5C86
16195  5C87
16196  5C88
16197  5C89
16198  5C8A
16199  5C8B
16200  5C8C
16201  5C8D
16202  5C8E
16203  5C8F
16204  5C90
16205  5C91
16206  5C92
16207  5C93
16208  5C94
16209  5C95
16210  5C96
16211  5C97
16212  5C98
16213  5C99
16214  5C9A
16215  5C9B
16216  5C9C
16217  5C9D
16218  5C9E
16219  5C9F
16220  5CA0
16221  5CA1
16222  5CA2
16223  5CA3
16224  5CA4
16225  5CA5
16226  5CA6
16227  5CA7
16228  5CA8
16229  5CA9
16230  5CAA
16231  5CAB
16232  5CAC
16233  5CAD
16234  5CAE
16235  5CAF
16236  5CB0
16237  5CB1
16238  5CB2
16239  5CB3
16240  5CB4
16241  5CB5
16242  5CB6
16243  5CB7
16244  5CB8
16245  5CB9
16246  5CBA
16247  5CBB
16248  5CBC
16249  5CBD
16250  5CBE
16251  5CBF
16252  5CC0
16253  5CC1
16254  5CC2
16255  5CC3
16256  5CC4
16257  5CC5
16258  5CC6
16259  5CC7
16260  5CC8
16261  5CC9
16262  5CCA
16263  5CCB
16264  5CCC
16265  5CCD
16266  5CCE
16267  5CCF
16268  5CD0
16269  5CD1
16270  5CD2
16271  5CD3
16272  5CD4
16273  5CD5
16274  5CD6
16275  5CD7
16276  5CD8
16277  5CD9
16278  5CDA
16279  5CDB
16280  5CDC
16281  5CDD
16282  5CDE
16283  5CDF
16284  5CE0
16285  5CE1
16286  5CE2
16287  5CE3
16288  5CE4
16289  5CE5
16290  5CE6
16291  5CE7
16292  5CE8
16293  5CE9
16294  5CEA
16295  5CEB
16296  5CEC
16297  5CED
16298  5CEE
16299  5CEF
16300  5CF0
16301  5CF1
16302  5CF2
16303  5CF3
16304  5CF4
16305  5CF5
16306  5CF6
16307  5CF7
16308  5CF8
16309  5CF9
16310  5CFA
16311  5CFB
16312  5CFC
16313  5CFD
16314  5CFE
16315  5CFF
16316  5D00
16317  5D01
16318  5D02
16319  5D03
16320  5D04
16321  5D05
16322  5D06
16323  5D07
16324  5D08
16325  5D09
16326  5D0A
16327  5D0B
16328  5D0C
16329  5D0D
16330  5D0E
16331  5D0F
16332  5D10
16333  5D11
16334  5D12
16335  5D13
16336  5D14
16337  5D15
16338  5D16
16339  5D17
16340  5D18
16341  5D19
16342  5D1A
16343  5D1B
16344  5D1C
16345  5D1D
16346  5D1E
16347  5D1F
16348  5D20
16349  5D21
16350  5D22
16351  5D23
16352  5D24
16353  5D25
16354  5D26
16355  5D27
16356  5D28
16357  5D29
16358  5D2A
16359  5D2B
16360  5D2C
16361  5D2D
16362  5D2E
16363  5D2F
16364  5D30
16365  5D31
16366  5D32
16367  5D33
16368  5D34
16369  5D35
16370  5D36
16371  5D37
16372  5D38
16373  5D39
16374  5D3A
16375  5D3B
16376  5D3C
16377  5D3D
16378  5D3E
16379  5D3F
16380  5D40
16381  5D41
16382  5D42
16383  5D43
16384  5D44
16385  5D45
16386  5D46
16387  5D47
16388  5D48
16389  5D49
16390  5D4A
16391  5D4B
16392  5D4C
16393  5D4D
16394  5D4E
16395  5D4F
16396  5D50
16397  5D51
16398  5D52
16399  5D53
16400  5D54
16401  5D55
16402  5D56
16403  5D57
16404  5D58
16405  5D59
16406  5D5A
16407  5D5B
16408  5D5C
16409  5D5D
16410  5D5E
16411  5D5F
16412  5D60
16413  5D61
16414  5D62
16415  5D63
16416  5D64
16417  5D65
16418  5D66
16419  5D67
16420  5D68
16421  5D69
16422  5D6A
16423  5D6B
16424  5D6C
16425  5D6D
16426  5D6E
16427  5D6F
16428  5D70
16429  5D71
16430  5D72
16431  5D73
16432  5D74
16433  5D75
16434  5D76
16435  5D77
16436  5D78
16437  5D79
16438  5D7A
16439  5D7B
16440  5D7C
16441  5D7D
16442  5D7E
16443  5D7F
16444  5D80
16445  5D81
16446  5D82
16447  5D83
16448  5D84
16449  5D85
16450  5D86
16451  5D87
16452  5D88
16453  5D89
16454  5D8A
16455  5D8B
16456  5D8C
16457  5D8D
16458  5D8E
16459  5D8F
16460  5D90
16461  5D91
16462  5D92
16463  5D93
16464  5D94
16465  5D95
16466  5D96
16467  5D97
16468  5D98
16469  5D99
16470  5D9A
16471  5D9B
16472  5D9C
16473  5D9D
16474  5D9E
16475  5D9F
16476  5DA0
16477  5DA1
16478  5DA2
16479  5DA3
16480  5DA4
16481  5DA5
16482  5DA6
16483  5DA7
16484  5DA8
16485  5DA9
16486  5DAA
16487  5DAB
16488  5DAC
16489  5DAD
16490  5DAE
16491  5DAF
16492  5DB0
16493  5DB1
16494  5DB2
16495  5DB3
16496  5DB4
16497  5DB5
16498  5DB6
16499  5DB7
16500  5DB8
16501  5DB9
16502  5DBA
16503  5DBB
16504  5DBC
16505  5DBD
16506  5DBE
16507  5DBF
16508  5DC0
16509  5DC1
16510  5DC2
16511  5DC3
16512  5DC4
16513  5DC5
16514  5DC6
16515  5DC7
16516  5DC8
16517  5DC9
16518  5DCA
16519  5DCB
16520  5DCC
16521  5DCD
16522  5DCE
16523  5DCF
16524  5DD0
16525  5DD1
16526  5DD2
16527  5DD3
16528  5DD4
16529  5DD5
16530  5DD6
16531  5DD7
16532  5DD8
16533  5DD9
16534  5DDA
16535  5DDB
16536  5DDC
16537  5DDD
16538  5DDE
16539  5DDF
16540  5DE0
16541  5DE1
16542  5DE2
16543  5DE3
16544  5DE4
16545  5DE5
16546  5DE6
16547  5DE7
16548  5DE8
16549  5DE9
16550  5DEA
16551  5DEB
16552  5DEC
16553  5DED
16554  5DEE
16555  5DEF
16556  5DF0
16557  5DF1
16558  5DF2
16559  5DF3
16560  5DF4
16561  5DF5
16562  5DF6
16563  5DF7
16564  5DF8
16565  5DF9
16566  5DFA
16567  5DFB
16568  5DFC
16569  5DFD
16570  5DFE
16571  5DFF
16572  5E00
16573  5E01
16574  5E02
16575  5E03
16576  5E04
16577  5E05
16578  5E06
16579  5E07
16580  5E08
16581  5E09
16582  5E0A
16583  5E0B
16584  5E0C
16585  5E0D
16586  5E0E
16587  5E0F
16588  5E10
16589  5E11
16590  5E12
16591  5E13
16592  5E14
16593  5E15
16594  5E16
16595  5E17
16596  5E18
16597  5E19
16598  5E1A
16599  5E1B
16600  5E1C
16601  5E1D
16602  5E1E
16603  5E1F
16604  5E20
16605  5E21
16606  5E22
16607  5E23
16608  5E24
16609  5E25
16610  5E26
16611  5E27
16612  5E28
16613  5E29
16614  5E2A
16615  5E2B
16616  5E2C
16617  5E2D
16618  5E2E
16619  5E2F
16620  5E30
16621  5E31
16622  5E32
16623  5E33
16624  5E34
16625  5E35
16626  5E36
16627  5E37
16628  5E38
16629  5E39
16630  5E3A
16631  5E3B
16632  5E3C
16633  5E3D
16634  5E3E
16635  5E3F
16636  5E40
16637  5E41
16638  5E42
16639  5E43
16640  5E44
16641  5E45
16642  5E46
16643  5E47
16644  5E48
16645  5E49
16646  5E4A
16647  5E4B
16648  5E4C
16649  5E4D
16650  5E4E
16651  5E4F
16652  5E50
16653  5E51
16654  5E52
16655  5E53
16656  5E54
16657  5E55
16658  5E56
16659  5E57
16660  5E58
16661  5E59
16662  5E5A
16663  5E5B
16664  5E5C
16665  5E5D
16666  5E5E
16667  5E5F
16668  5E60
16669  5E61
16670  5E62
16671  5E63
16672  5E64
16673  5E65
16674  5E66
16675  5E67
16676  5E68
16677  5E69
16678  5E6A
16679  5E6B
16680  5E6C
16681  5E6D
16682  5E6E
16683  5E6F
16684  5E70
16685  5E71
16686  5E72
16687  5E73
16688  5E74
16689  5E75
16690  5E76
16691  5E77
16692  5E78
16693  5E79
16694  5E7A
16695  5E7B
16696  5E7C
16697  5E7D
16698  5E7E
16699  5E7F
16700  5E80
16701  5E81
16702  5E82
16703  5E83
16704  5E84
16705  5E85
16706  5E86
16707  5E87
16708  5E88
16709  5E89
16710  5E8A
16711  5E8B
16712  5E8C
16713  5E8D
16714  5E8E
16715  5E8F
16716  5E90
16717  5E91
16718  5E92
16719  5E93
16720  5E94
16721  5E95
16722  5E96
16723  5E97
16724  5E98
16725  5E99
16726  5E9A
16727  5E9B
16728  5E9C
16729  5E9D
16730  5E9E
16731  5E9F
16732  5EA0
16733  5EA1
16734  5EA2
16735  5EA3
16736  5EA4
16737  5EA5
16738  5EA6
16739  5EA7
16740  5EA8
16741  5EA9
16742  5EAA
16743  5EAB
16744  5EAC
16745  5EAD
16746  5EAE
16747  5EAF
16748  5EB0
16749  5EB1
16750  5EB2
16751  5EB3
16752  5EB4
16753  5EB5
16754  5EB6
16755  5EB7
16756  5EB8
16757  5EB9
16758  5EBA
16759  5EBB
16760  5EBC
16761  5EBD
16762  5EBE
16763  5EBF
16764  5EC0
16765  5EC1
16766  5EC2
16767  5EC3
16768  5EC4
16769  5EC5
16770  5EC6
16771  5EC7
16772  5EC8
16773  5EC9
16774  5ECA
16775  5ECB
16776  5ECC
16777  5ECD
16778  5ECE
16779  5ECF
16780  5ED0
16781  5ED1
16782  5ED2
16783  5ED3
16784  5ED4
16785  5ED5
16786  5ED6
16787  5ED7
16788  5ED8
16789  5ED9
16790  5EDA
16791  5EDB
16792  5EDC
16793  5EDD
16794  5EDE
16795  5EDF
16796  5EE0
16797  5EE1
16798  5EE2
16799  5EE3
16800  5EE4
16801  5EE5
16802  5EE6
16803  5EE7
16804  5EE8
16805  5EE9
16806  5EEA
16807  5EEB
16808  5EEC
16809  5EED
16810  5EEE
16811  5EEF
16812  5EF0
16813  5EF1
16814  5EF2
16815  5EF3
16816  5EF4
16817  5EF5
16818  5EF6
16819  5EF7
16820  5EF8
16821  5EF9
16822  5EFA
16823  5EFB
16824  5EFC
16825  5EFD
16826  5EFE
16827  5EFF
16828  5F00
16829  5F01
16830  5F02
16831  5F03
16832  5F04
16833  5F05
16834  5F06
16835  5F07
16836  5F08
16837  5F09
16838  5F0A
16839  5F0B
16840  5F0C
16841  5F0D
16842  5F0E
16843  5F0F
16844  5F10
16845  5F11
16846  5F12
16847  5F13
16848  5F14
16849  5F15
16850  5F16
16851  5F17
16852  5F18
16853  5F19
16854  5F1A
16855  5F1B
16856  5F1C
16857  5F1D
16858  5F1E
16859  5F1F
16860  5F20
16861  5F21
16862  5F22
16863  5F23
16864  5F24
16865  5F25
16866  5F26
16867  5F27
16868  5F28
16869  5F29
16870  5F2A
16871  5F2B
16872  5F2C
16873  5F2D
16874  5F2E
16875  5F2F
16876  5F30
16877  5F31
16878  5F32
16879  5F33
16880  5F34
16881  5F35
16882  5F36
16883  5F37
16884  5F38
16885  5F39
16886  5F3A
16887  5F3B
16888  5F3C
16889  5F3D
16890  5F3E
16891  5F3F
16892  5F40
16893  5F41
16894  5F42
16895  5F43
16896  5F44
16897  5F45
16898  5F46
16899  5F47
16900  5F48
16901  5F49
16902  5F4A
16903  5F4B
16904  5F4C
16905  5F4D
16906  5F4E
16907  5F4F
16908  5F50
16909  5F51
16910  5F52
16911  5F53
16912  5F54
16913  5F55
16914  5F56
16915  5F57
16916  5F58
16917  5F59
16918  5F5A
16919  5F5B
16920  5F5C
16921  5F5D
16922  5F5E
16923  5F5F
16924  5F60
16925  5F61
16926  5F62
16927  5F63
16928  5F64
16929  5F65
16930  5F66
16931  5F67
16932  5F68
16933  5F69
16934  5F6A
16935  5F6B
16936  5F6C
16937  5F6D
16938  5F6E
16939  5F6F
16940  5F70
16941  5F71
16942  5F72
16943  5F73
16944  5F74
16945  5F75
16946  5F76
16947  5F77
16948  5F78
16949  5F79
16950  5F7A
16951  5F7B
16952  5F7C
16953  5F7D
16954  5F7E
16955  5F7F
16956  5F80
16957  5F81
16958  5F82
16959  5F83
16960  5F84
16961  5F85
16962  5F86
16963  5F87
16964  5F88
16965  5F89
16966  5F8A
16967  5F8B
16968  5F8C
16969  5F8D
16970  5F8E
16971  5F8F
16972  5F90
16973  5F91
16974  5F92
16975  5F93
16976  5F94
16977  5F95
16978  5F96
16979  5F97
16980  5F98
16981  5F99
16982  5F9A
16983  5F9B
16984  5F9C
16985  5F9D
16986  5F9E
16987  5F9F
16988  5FA0
16989  5FA1
16990  5FA2
16991  5FA3
16992  5FA4
16993  5FA5
16994  5FA6
16995  5FA7
16996  5FA8
16997  5FA9
16998  5FAA
16999  5FAB
17000  5FAC
17001  5FAD
17002  5FAE
17003  5FAF
17004  5FB0
17005  5FB1
17006  5FB2
17007  5FB3
17008  5FB4
17009  5FB5
17010  5FB6
17011  5FB7
17012  5FB8
17013  5FB9
17014  5FBA
17015  5FBB
17016  5FBC
17017  5FBD
17018  5FBE
17019  5FBF
17020  5FC0
17021  5FC1
17022  5FC2
17023  5FC3
17024  5FC4
17025  5FC5
17026  5FC6
17027  5FC7
17028  5FC8
17029  5FC9
17030  5FCA
17031  5FCB
17032  5FCC
17033  5FCD
17034  5FCE
17035  5FCF
17036  5FD0
17037  5FD1
17038  5FD2
17039  5FD3
17040  5FD4
17041  5FD5
17042  5FD6
17043  5FD7
17044  5FD8
17045  5FD9
17046  5FDA
17047  5FDB
17048  5FDC
17049  5FDD
17050  5FDE
17051  5FDF
17052  5FE0
17053  5FE1
17054  5FE2
17055  5FE3
17056  5FE4
17057  5FE5
17058  5FE6
17059  5FE7
17060  5FE8
17061  5FE9
17062  5FEA
17063  5FEB
17064  5FEC
17065  5FED
17066  5FEE
17067  5FEF
17068  5FF0
17069  5FF1
17070  5FF2
17071  5FF3
17072  5FF4
17073  5FF5
17074  5FF6
17075  5FF7
17076  5FF8
17077  5FF9
17078  5FFA
17079  5FFB
17080  5FFC
17081  5FFD
17082  5FFE
17083  5FFF
17084  6000
17085  6001
17086  6002
17087  6003
17088  6004
17089  6005
17090  6006
17091  6007
17092  6008
17093  6009
17094  600A
17095  600B
17096  600C
17097  600D
17098  600E
17099  600F
17100  6010
17101  6011
17102  6012
17103  6013
17104  6014
17105  6015
17106  6016
17107  6017
17108  6018
17109  6019
17110  601A
17111  601B
17112  601C
17113  601D
17114  601E
17115  601F
17116  6020
17117  6021
17118  6022
17119  6023
17120  6024
17121  6025
17122  6026
17123  6027
17124  6028
17125  6029
17126  602A
17127  602B
17128  602C
17129  602D
17130  602E
17131  602F
17132  6030
17133  6031
17134  6032
17135  6033
17136  6034
17137  6035
17138  6036
17139  6037
17140  6038
17141  6039
17142  603A
17143  603B
17144  603C
17145  603D
17146  603E
17147  603F
17148  6040
17149  6041
17150  6042
17151  6043
17152  6044
17153  6045
17154  6046
17155  6047
17156  6048
17157  6049
17158  604A
17159  604B
17160  604C
17161  604D
17162  604E
17163  604F
17164  6050
17165  6051
17166  6052
17167  6053
17168  6054
17169  6055
17170  6056
17171  6057
17172  6058
17173  6059
17174  605A
17175  605B
17176  605C
17177  605D
17178  605E
17179  605F
17180  6060
17181  6061
17182  6062
17183  6063
17184  6064
17185  6065
17186  6066
17187  6067
17188  6068
17189  6069
17190  606A
17191  606B
17192  606C
17193  606D
17194  606E
17195  606F
17196  6070
17197  6071
17198  6072
17199  6073
17200  6074
17201  6075
17202  6076
17203  6077
17204  6078
17205  6079
17206  607A
17207  607B
17208  607C
17209  607D
17210  607E
17211  607F
17212  6080
17213  6081
17214  6082
17215  6083
17216  6084
17217  6085
17218  6086
17219  6087
17220  6088
17221  6089
17222  608A
17223  608B
17224  608C
17225  608D
17226  608E
17227  608F
17228  6090
17229  6091
17230  6092
17231  6093
17232  6094
17233  6095
17234  6096
17235  6097
17236  6098
17237  6099
17238  609A
17239  609B
17240  609C
17241  609D
17242  609E
17243  609F
17244  60A0
17245  60A1
17246  60A2
17247  60A3
17248  60A4
17249  60A5
17250  60A6
17251  60A7
17252  60A8
17253  60A9
17254  60AA
17255  60AB
17256  60AC
17257  60AD
17258  60AE
17259  60AF
17260  60B0
17261  60B1
17262  60B2
17263  60B3
17264  60B4
17265  60B5
17266  60B6
17267  60B7
17268  60B8
17269  60B9
17270  60BA
17271  60BB
17272  60BC
17273  60BD
17274  60BE
17275  60BF
17276  60C0
17277  60C1
17278  60C2
17279  60C3
17280  60C4
17281  60C5
17282  60C6
17283  60C7
17284  60C8
17285  60C9
17286  60CA
17287  60CB
17288  60CC
17289  60CD
17290  60CE
17291  60CF
17292  60D0
17293  60D1
17294  60D2
17295  60D3
17296  60D4
17297  60D5
17298  60D6
17299  60D7
17300  60D8
17301  60D9
17302  60DA
17303  60DB
17304  60DC
17305  60DD
17306  60DE
17307  60DF
17308  60E0
17309  60E1
17310  60E2
17311  60E3
17312  60E4
17313  60E5
17314  60E6
17315  60E7
17316  60E8
17317  60E9
17318  60EA
17319  60EB
17320  60EC
17321  60ED
17322  60EE
17323  60EF
17324  60F0
17325  60F1
17326  60F2
17327  60F3
17328  60F4
17329  60F5
17330  60F6
17331  60F7
17332  60F8
17333  60F9
17334  60FA
17335  60FB
17336  60FC
17337  60FD
17338  60FE
17339  60FF
17340  6100
17341  6101
17342  6102
17343  6103
17344  6104
17345  6105
17346  6106
17347  6107
17348  6108
17349  6109
17350  610A
17351  610B
17352  610C
17353  610D
17354  610E
17355  610F
17356  6110
17357  6111
17358  6112
17359  6113
17360  6114
17361  6115
17362  6116
17363  6117
17364  6118
17365  6119
17366  611A
17367  611B
17368  611C
17369  611D
17370  611E
17371  611F
17372  6120
17373  6121
17374  6122
17375  6123
17376  6124
17377  6125
17378  6126
17379  6127
17380  6128
17381  6129
17382  612A
17383  612B
17384  612C
17385  612D
17386  612E
17387  612F
17388  6130
17389  6131
17390  6132
17391  6133
17392  6134
17393  6135
17394  6136
17395  6137
17396  6138
17397  6139
17398  613A
17399  613B
17400  613C
17401  613D
17402  613E
17403  613F
17404  6140
17405  6141
17406  6142
17407  6143
17408  6144
17409  6145
17410  6146
17411  6147
17412  6148
17413  6149
17414  614A
17415  614B
17416  614C
17417  614D
17418  614E
17419  614F
17420  6150
17421  6151
17422  6152
17423  6153
17424  6154
17425  6155
17426  6156
17427  6157
17428  6158
17429  6159
17430  615A
17431  615B
17432  615C
17433  615D
17434  615E
17435  615F
17436  6160
17437  6161
17438  6162
17439  6163
17440  6164
17441  6165
17442  6166
17443  6167
17444  6168
17445  6169
17446  616A
17447  616B
17448  616C
17449  616D
17450  616E
17451  616F
17452  6170
17453  6171
17454  6172
17455  6173
17456  6174
17457  6175
17458  6176
17459  6177
17460  6178
17461  6179
17462  617A
17463  617B
17464  617C
17465  617D
17466  617E
17467  617F
17468  6180
17469  6181
17470  6182
17471  6183
17472  6184
17473  6185
17474  6186
17475  6187
17476  6188
17477  6189
17478  618A
17479  618B
17480  618C
17481  618D
17482  618E
17483  618F
17484  6190
17485  6191
17486  6192
17487  6193
17488  6194
17489  6195
17490  6196
17491  6197
17492  6198
17493  6199
17494  619A
17495  619B
17496  619C
17497  619D
17498  619E
17499  619F
17500  61A0
17501  61A1
17502  61A2
17503  61A3
17504  61A4
17505  61A5
17506  61A6
17507  61A7
17508  61A8
17509  61A9
17510  61AA
17511  61AB
17512  61AC
17513  61AD
17514  61AE
17515  61AF
17516  61B0
17517  61B1
17518  61B2
17519  61B3
17520  61B4
17521  61B5
17522  61B6
17523  61B7
17524  61B8
17525  61B9
17526  61BA
17527  61BB
17528  61BC
17529  61BD
17530  61BE
17531  61BF
17532  61C0
17533  61C1
17534  61C2
17535  61C3
17536  61C4
17537  61C5
17538  61C6
17539  61C7
17540  61C8
17541  61C9
17542  61CA
17543  61CB
17544  61CC
17545  61CD
17546  61CE
17547  61CF
17548  61D0
17549  61D1
17550  61D2
17551  61D3
17552  61D4
17553  61D5
17554  61D6
17555  61D7
17556  61D8
17557  61D9
17558  61DA
17559  61DB
17560  61DC
17561  61DD
17562  61DE
17563  61DF
17564  61E0
17565  61E1
17566  61E2
17567  61E3
17568  61E4
17569  61E5
17570  61E6
17571  61E7
17572  61E8
17573  61E9
17574  61EA
17575  61EB
17576  61EC
17577  61ED
17578  61EE
17579  61EF
17580  61F0
17581  61F1
17582  61F2
17583  61F3
17584  61F4
17585  61F5
17586  61F6
17587  61F7
17588  61F8
17589  61F9
17590  61FA
17591  61FB
17592  61FC
17593  61FD
17594  61FE
17595  61FF
17596  6200
17597  6201
17598  6202
17599  6203
17600  6204
17601  6205
17602  6206
17603  6207
17604  6208
17605  6209
17606  620A
17607  620B
17608  620C
17609  620D
17610  620E
17611  620F
17612  6210
17613  6211
17614  6212
17615  6213
17616  6214
17617  6215
17618  6216
17619  6217
17620  6218
17621  6219
17622  621A
17623  621B
17624  621C
17625  621D
17626  621E
17627  621F
17628  6220
17629  6221
17630  6222
17631  6223
17632  6224
17633  6225
17634  6226
17635  6227
17636  6228
17637  6229
17638  622A
17639  622B
17640  622C
17641  622D
17642  622E
17643  622F
17644  6230
17645  6231
17646  6232
17647  6233
17648  6234
17649  6235
17650  6236
17651  6237
17652  6238
17653  6239
17654  623A
17655  623B
17656  623C
17657  623D
17658  623E
17659  623F
17660  6240
17661  6241
17662  6242
17663  6243
17664  6244
17665  6245
17666  6246
17667  6247
17668  6248
17669  6249
17670  624A
17671  624B
17672  624C
17673  624D
17674  624E
17675  624F
17676  6250
17677  6251
17678  6252
17679  6253
17680  6254
17681  6255
17682  6256
17683  6257
17684  6258
17685  6259
17686  625A
17687  625B
17688  625C
17689  625D
17690  625E
17691  625F
17692  6260
17693  6261
17694  6262
17695  6263
17696  6264
17697  6265
17698  6266
17699  6267
17700  6268
17701  6269
17702  626A
17703  626B
17704  626C
17705  626D
17706  626E
17707  626F
17708  6270
17709  6271
17710  6272
17711  6273
17712  6274
17713  6275
17714  6276
17715  6277
17716  6278
17717  6279
17718  627A
17719  627B
17720  627C
17721  627D
17722  627E
17723  627F
17724  6280
17725  6281
17726  6282
17727  6283
17728  6284
17729  6285
17730  6286
17731  6287
17732  6288
17733  6289
17734  628A
17735  628B
17736  628C
17737  628D
17738  628E
17739  628F
17740  6290
17741  6291
17742  6292
17743  6293
17744  6294
17745  6295
17746  6296
17747  6297
17748  6298
17749  6299
17750  629A
17751  629B
17752  629C
17753  629D
17754  629E
17755  629F
17756  62A0
17757  62A1
17758  62A2
17759  62A3
17760  62A4
17761  62A5
17762  62A6
17763  62A7
17764  62A8
17765  62A9
17766  62AA
17767  62AB
17768  62AC
17769  62AD
17770  62AE
17771  62AF
17772  62B0
17773  62B1
17774  62B2
17775  62B3
17776  62B4
17777  62B5
17778  62B6
17779  62B7
17780  62B8
17781  62B9
17782  62BA
17783  62BB
17784  62BC
17785  62BD
17786  62BE
17787  62BF
17788  62C0
17789  62C1
17790  62C2
17791  62C3
17792  62C4
17793  62C5
17794  62C6
17795  62C7
17796  62C8
17797  62C9
17798  62CA
17799  62CB
17800  62CC
17801  62CD
17802  62CE
17803  62CF
17804  62D0
17805  62D1
17806  62D2
17807  62D3
17808  62D4
17809  62D5
17810  62D6
17811  62D7
17812  62D8
17813  62D9
17814  62DA
17815  62DB
17816  62DC
17817  62DD
17818  62DE
17819  62DF
17820  62E0
17821  62E1
17822  62E2
17823  62E3
17824  62E4
17825  62E5
17826  62E6
17827  62E7
17828  62E8
17829  62E9
17830  62EA
17831  62EB
17832  62EC
17833  62ED
17834  62EE
17835  62EF
17836  62F0
17837  62F1
17838  62F2
17839  62F3
17840  62F4
17841  62F5
17842  62F6
17843  62F7
17844  62F8
17845  62F9
17846  62FA
17847  62FB
17848  62FC
17849  62FD
17850  62FE
17851  62FF
17852  6300
17853  6301
17854  6302
17855  6303
17856  6304
17857  6305
17858  6306
17859  6307
17860  6308
17861  6309
17862  630A
17863  630B
17864  630C
17865  630D
17866  630E
17867  630F
17868  6310
17869  6311
17870  6312
17871  6313
17872  6314
17873  6315
17874  6316
17875  6317
17876  6318
17877  6319
17878  631A
17879  631B
17880  631C
17881  631D
17882  631E
17883  631F
17884  6320
17885  6321
17886  6322
17887  6323
17888  6324
17889  6325
17890  6326
17891  6327
17892  6328
17893  6329
17894  632A
17895  632B
17896  632C
17897  632D
17898  632E
17899  632F
17900  6330
17901  6331
17902  6332
17903  6333
17904  6334
17905  6335
17906  6336
17907  6337
17908  6338
17909  6339
17910  633A
17911  633B
17912  633C
17913  633D
17914  633E
17915  633F
17916  6340
17917  6341
17918  6342
17919  6343
17920  6344
17921  6345
17922  6346
17923  6347
17924  6348
17925  6349
17926  634A
17927  634B
17928  634C
17929  634D
17930  634E
17931  634F
17932  6350
17933  6351
17934  6352
17935  6353
17936  6354
17937  6355
17938  6356
17939  6357
17940  6358
17941  6359
17942  635A
17943  635B
17944  635C
17945  635D
17946  635E
17947  635F
17948  6360
17949  6361
17950  6362
17951  6363
17952  6364
17953  6365
17954  6366
17955  6367
17956  6368
17957  6369
17958  636A
17959  636B
17960  636C
17961  636D
17962  636E
17963  636F
17964  6370
17965  6371
17966  6372
17967  6373
17968  6374
17969  6375
17970  6376
17971  6377
17972  6378
17973  6379
17974  637A
17975  637B
17976  637C
17977  637D
17978  637E
17979  637F
17980  6380
17981  6381
17982  6382
17983  6383
17984  6384
17985  6385
17986  6386
17987  6387
17988  6388
17989  6389
17990  638A
17991  638B
17992  638C
17993  638D
17994  638E
17995  638F
17996  6390
17997  6391
17998  6392
17999  6393
18000  6394
18001  6395
18002  6396
18003  6397
18004  6398
18005  6399
18006  639A
18007  639B
18008  639C
18009  639D
18010  639E
18011  639F
18012  63A0
18013  63A1
18014  63A2
18015  63A3
18016  63A4
18017  63A5
18018  63A6
18019  63A7
18020  63A8
18021  63A9
18022  63AA
18023  63AB
18024  63AC
18025  63AD
18026  63AE
18027  63AF
18028  63B0
18029  63B1
18030  63B2
18031  63B3
18032  63B4
18033  63B5
18034  63B6
18035  63B7
18036  63B8
18037  63B9
18038  63BA
18039  63BB
18040  63BC
18041  63BD
18042  63BE
18043  63BF
18044  63C0
18045  63C1
18046  63C2
18047  63C3
18048  63C4
18049  63C5
18050  63C6
18051  63C7
18052  63C8
18053  63C9
18054  63CA
18055  63CB
18056  63CC
18057  63CD
18058  63CE
18059  63CF
18060  63D0
18061  63D1
18062  63D2
18063  63D3
18064  63D4
18065  63D5
18066  63D6
18067  63D7
18068  63D8
18069  63D9
18070  63DA
18071  63DB
18072  63DC
18073  63DD
18074  63DE
18075  63DF
18076  63E0
18077  63E1
18078  63E2
18079  63E3
18080  63E4
18081  63E5
18082  63E6
18083  63E7
18084  63E8
18085  63E9
18086  63EA
18087  63EB
18088  63EC
18089  63ED
18090  63EE
18091  63EF
18092  63F0
18093  63F1
18094  63F2
18095  63F3
18096  63F4
18097  63F5
18098  63F6
18099  63F7
18100  63F8
18101  63F9
18102  63FA
18103  63FB
18104  63FC
18105  63FD
18106  63FE
18107  63FF
18108  6400
18109  6401
18110  6402
18111  6403
18112  6404
18113  6405
18114  6406
18115  6407
18116  6408
18117  6409
18118  640A
18119  640B
18120  640C
18121  640D
18122  640E
18123  640F
18124  6410
18125  6411
18126  6412
18127  6413
18128  6414
18129  6415
18130  6416
18131  6417
18132  6418
18133  6419
18134  641A
18135  641B
18136  641C
18137  641D
18138  641E
18139  641F
18140  6420
18141  6421
18142  6422
18143  6423
18144  6424
18145  6425
18146  6426
18147  6427
18148  6428
18149  6429
18150  642A
18151  642B
18152  642C
18153  642D
18154  642E
18155  642F
18156  6430
18157  6431
18158  6432
18159  6433
18160  6434
18161  6435
18162  6436
18163  6437
18164  6438
18165  6439
18166  643A
18167  643B
18168  643C
18169  643D
18170  643E
18171  643F
18172  6440
18173  6441
18174  6442
18175  6443
18176  6444
18177  6445
18178  6446
18179  6447
18180  6448
18181  6449
18182  644A
18183  644B
18184  644C
18185  644D
18186  644E
18187  644F
18188  6450
18189  6451
18190  6452
18191  6453
18192  6454
18193  6455
18194  6456
18195  6457
18196  6458
18197  6459
18198  645A
18199  645B
18200  645C
18201  645D
18202  645E
18203  645F
18204  6460
18205  6461
18206  6462
18207  6463
18208  6464
18209  6465
18210  6466
18211  6467
18212  6468
18213  6469
18214  646A
18215  646B
18216  646C
18217  646D
18218  646E
18219  646F
18220  6470
18221  6471
18222  6472
18223  6473
18224  6474
18225  6475
18226  6476
18227  6477
18228  6478
18229  6479
18230  647A
18231  647B
18232  647C
18233  647D
18234  647E
18235  647F
18236  6480
18237  6481
18238  6482
18239  6483
18240  6484
18241  6485
18242  6486
18243  6487
18244  6488
18245  6489
18246  648A
18247  648B
18248  648C
18249  648D
18250  648E
18251  648F
18252  6490
18253  6491
18254  6492
18255  6493
18256  6494
18257  6495
18258  6496
18259  6497
18260  6498
18261  6499
18262  649A
18263  649B
18264  649C
18265  649D
18266  649E
18267  649F
18268  64A0
18269  64A1
18270  64A2
18271  64A3
18272  64A4
18273  64A5
18274  64A6
18275  64A7
18276  64A8
18277  64A9
18278  64AA
18279  64AB
18280  64AC
18281  64AD
18282  64AE
18283  64AF
18284  64B0
18285  64B1
18286  64B2
18287  64B3
18288  64B4
18289  64B5
18290  64B6
18291  64B7
18292  64B8
18293  64B9
18294  64BA
18295  64BB
18296  64BC
18297  64BD
18298  64BE
18299  64BF
18300  64C0
18301  64C1
18302  64C2
18303  64C3
18304  64C4
18305  64C5
18306  64C6
18307  64C7
18308  64C8
18309  64C9
18310  64CA
18311  64CB
18312  64CC
18313  64CD
18314  64CE
18315  64CF
18316  64D0
18317  64D1
18318  64D2
18319  64D3
18320  64D4
18321  64D5
18322  64D6
18323  64D7
18324  64D8
18325  64D9
18326  64DA
18327  64DB
18328  64DC
18329  64DD
18330  64DE
18331  64DF
18332  64E0
18333  64E1
18334  64E2
18335  64E3
18336  64E4
18337  64E5
18338  64E6
18339  64E7
18340  64E8
18341  64E9
18342  64EA
18343  64EB
18344  64EC
18345  64ED
18346  64EE
18347  64EF
18348  64F0
18349  64F1
18350  64F2
18351  64F3
18352  64F4
18353  64F5
18354  64F6
18355  64F7
18356  64F8
18357  64F9
18358  64FA
18359  64FB
18360  64FC
18361  64FD
18362  64FE
18363  64FF
18364  6500
18365  6501
18366  6502
18367  6503
18368  6504
18369  6505
18370  6506
18371  6507
18372  6508
18373  6509
18374  650A
18375  650B
18376  650C
18377  650D
18378  650E
18379  650F
18380  6510
18381  6511
18382  6512
18383  6513
18384  6514
18385  6515
18386  6516
18387  6517
18388  6518
18389  6519
18390  651A
18391  651B
18392  651C
18393  651D
18394  651E
18395  651F
18396  6520
18397  6521
18398  6522
18399  6523
18400  6524
18401  6525
18402  6526
18403  6527
18404  6528
18405  6529
18406  652A
18407  652B
18408  652C
18409  652D
18410  652E
18411  652F
18412  6530
18413  6531
18414  6532
18415  6533
18416  6534
18417  6535
18418  6536
18419  6537
18420  6538
18421  6539
18422  653A
18423  653B
18424  653C
18425  653D
18426  653E
18427  653F
18428  6540
18429  6541
18430  6542
18431  6543
18432  6544
18433  6545
18434  6546
18435  6547
18436  6548
18437  6549
18438  654A
18439  654B
18440  654C
18441  654D
18442  654E
18443  654F
18444  6550
18445  6551
18446  6552
18447  6553
18448  6554
18449  6555
18450  6556
18451  6557
18452  6558
18453  6559
18454  655A
18455  655B
18456  655C
18457  655D
18458  655E
18459  655F
18460  6560
18461  6561
18462  6562
18463  6563
18464  6564
18465  6565
18466  6566
18467  6567
18468  6568
18469  6569
18470  656A
18471  656B
18472  656C
18473  656D
18474  656E
18475  656F
18476  6570
18477  6571
18478  6572
18479  6573
18480  6574
18481  6575
18482  6576
18483  6577
18484  6578
18485  6579
18486  657A
18487  657B
18488  657C
18489  657D
18490  657E
18491  657F
18492  6580
18493  6581
18494  6582
18495  6583
18496  6584
18497  6585
18498  6586
18499  6587
18500  6588
18501  6589
18502  658A
18503  658B
18504  658C
18505  658D
18506  658E
18507  658F
18508  6590
18509  6591
18510  6592
18511  6593
18512  6594
18513  6595
18514  6596
18515  6597
18516  6598
18517  6599
18518  659A
18519  659B
18520  659C
18521  659D
18522  659E
18523  659F
18524  65A0
18525  65A1
18526  65A2
18527  65A3
18528  65A4
18529  65A5
18530  65A6
18531  65A7
18532  65A8
18533  65A9
18534  65AA
18535  65AB
18536  65AC
18537  65AD
18538  65AE
18539  65AF
18540  65B0
18541  65B1
18542  65B2
18543  65B3
18544  65B4
18545  65B5
18546  65B6
18547  65B7
18548  65B8
18549  65B9
18550  65BA
18551  65BB
18552  65BC
18553  65BD
18554  65BE
18555  65BF
18556  65C0
18557  65C1
18558  65C2
18559  65C3
18560  65C4
18561  65C5
18562  65C6
18563  65C7
18564  65C8
18565  65C9
18566  65CA
18567  65CB
18568  65CC
18569  65CD
18570  65CE
18571  65CF
18572  65D0
18573  65D1
18574  65D2
18575  65D3
18576  65D4
18577  65D5
18578  65D6
18579  65D7
18580  65D8
18581  65D9
18582  65DA
18583  65DB
18584  65DC
18585  65DD
18586  65DE
18587  65DF
18588  65E0
18589  65E1
18590  65E2
18591  65E3
18592  65E4
18593  65E5
18594  65E6
18595  65E7
18596  65E8
18597  65E9
18598  65EA
18599  65EB
18600  65EC
18601  65ED
18602  65EE
18603  65EF
18604  65F0
18605  65F1
18606  65F2
18607  65F3
18608  65F4
18609  65F5
18610  65F6
18611  65F7
18612  65F8
18613  65F9
18614  65FA
18615  65FB
18616  65FC
18617  65FD
18618  65FE
18619  65FF
18620  6600
18621  6601
18622  6602
18623  6603
18624  6604
18625  6605
18626  6606
18627  6607
18628  6608
18629  6609
18630  660A
18631  660B
18632  660C
18633  660D
18634  660E
18635  660F
18636  6610
18637  6611
18638  6612
18639  6613
18640  6614
18641  6615
18642  6616
18643  6617
18644  6618
18645  6619
18646  661A
18647  661B
18648  661C
18649  661D
18650  661E
18651  661F
18652  6620
18653  6621
18654  6622
18655  6623
18656  6624
18657  6625
18658  6626
18659  6627
18660  6628
18661  6629
18662  662A
18663  662B
18664  662C
18665  662D
18666  662E
18667  662F
18668  6630
18669  6631
18670  6632
18671  6633
18672  6634
18673  6635
18674  6636
18675  6637
18676  6638
18677  6639
18678  663A
18679  663B
18680  663C
18681  663D
18682  663E
18683  663F
18684  6640
18685  6641
18686  6642
18687  6643
18688  6644
18689  6645
18690  6646
18691  6647
18692  6648
18693  6649
18694  664A
18695  664B
18696  664C
18697  664D
18698  664E
18699  664F
18700  6650
18701  6651
18702  6652
18703  6653
18704  6654
18705  6655
18706  6656
18707  6657
18708  6658
18709  6659
18710  665A
18711  665B
18712  665C
18713  665D
18714  665E
18715  665F
18716  6660
18717  6661
18718  6662
18719  6663
18720  6664
18721  6665
18722  6666
18723  6667
18724  6668
18725  6669
18726  666A
18727  666B
18728  666C
18729  666D
18730  666E
18731  666F
18732  6670
18733  6671
18734  6672
18735  6673
18736  6674
18737  6675
18738  6676
18739  6677
18740  6678
18741  6679
18742  667A
18743  667B
18744  667C
18745  667D
18746  667E
18747  667F
18748  6680
18749  6681
18750  6682
18751  6683
18752  6684
18753  6685
18754  6686
18755  6687
18756  6688
18757  6689
18758  668A
18759  668B
18760  668C
18761  668D
18762  668E
18763  668F
18764  6690
18765  6691
18766  6692
18767  6693
18768  6694
18769  6695
18770  6696
18771  6697
18772  6698
18773  6699
18774  669A
18775  669B
18776  669C
18777  669D
18778  669E
18779  669F
18780  66A0
18781  66A1
18782  66A2
18783  66A3
18784  66A4
18785  66A5
18786  66A6
18787  66A7
18788  66A8
18789  66A9
18790  66AA
18791  66AB
18792  66AC
18793  66AD
18794  66AE
18795  66AF
18796  66B0
18797  66B1
18798  66B2
18799  66B3
18800  66B4
18801  66B5
18802  66B6
18803  66B7
18804  66B8
18805  66B9
18806  66BA
18807  66BB
18808  66BC
18809  66BD
18810  66BE
18811  66BF
18812  66C0
18813  66C1
18814  66C2
18815  66C3
18816  66C4
18817  66C5
18818  66C6
18819  66C7
18820  66C8
18821  66C9
18822  66CA
18823  66CB
18824  66CC
18825  66CD
18826  66CE
18827  66CF
18828  66D0
18829  66D1
18830  66D2
18831  66D3
18832  66D4
18833  66D5
18834  66D6
18835  66D7
18836  66D8
18837  66D9
18838  66DA
18839  66DB
18840  66DC
18841  66DD
18842  66DE
18843  66DF
18844  66E0
18845  66E1
18846  66E2
18847  66E3
18848  66E4
18849  66E5
18850  66E6
18851  66E7
18852  66E8
18853  66E9
18854  66EA
18855  66EB
18856  66EC
18857  66ED
18858  66EE
18859  66EF
18860  66F0
18861  66F1
18862  66F2
18863  66F3
18864  66F4
18865  66F5
18866  66F6
18867  66F7
18868  66F8
18869  66F9
18870  66FA
18871  66FB
18872  66FC
18873  66FD
18874  66FE
18875  66FF
18876  6700
18877  6701
18878  6702
18879  6703
18880  6704
18881  6705
18882  6706
18883  6707
18884  6708
18885  6709
18886  670A
18887  670B
18888  670C
18889  670D
18890  670E
18891  670F
18892  6710
18893  6711
18894  6712
18895  6713
18896  6714
18897  6715
18898  6716
18899  6717
18900  6718
18901  6719
18902  671A
18903  671B
18904  671C
18905  671D
18906  671E
18907  671F
18908  6720
18909  6721
18910  6722
18911  6723
18912  6724
18913  6725
18914  6726
18915  6727
18916  6728
18917  6729
18918  672A
18919  672B
18920  672C
18921  672D
18922  672E
18923  672F
18924  6730
18925  6731
18926  6732
18927  6733
18928  6734
18929  6735
18930  6736
18931  6737
18932  6738
18933  6739
18934  673A
18935  673B
18936  673C
18937  673D
18938  673E
18939  673F
18940  6740
18941  6741
18942  6742
18943  6743
18944  6744
18945  6745
18946  6746
18947  6747
18948  6748
18949  6749
18950  674A
18951  674B
18952  674C
18953  674D
18954  674E
18955  674F
18956  6750
18957  6751
18958  6752
18959  6753
18960  6754
18961  6755
18962  6756
18963  6757
18964  6758
18965  6759
018966  000679        
018967  000680  var hFonts[54] ;
018968  000681  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
18969  341C
18970  341D
18971  341E
18972  341F
18973  3420
18974  3421
18975  3422
18976  3423
18977  3424
18978  3425
18979  3426
18980  3427
18981  3428
18982  3429
18983  342A
18984  342B
18985  342C
18986  342D
18987  342E
18988  342F
18989  3430
18990  3431
18991  3432
18992  3433
18993  3434
18994  3435
18995  3436
18996  3437
18997  3438
18998  3439
18999  343A
19000  343B
19001  343C
19002  343D
19003  343E
19004  343F
19005  3440
19006  3441
19007  3442
19008  3443
19009  3444
19010  3445
19011  3446
19012  3447
19013  3448
19014  3449
19015  344A
19016  344B
19017  344C
19018  344D
19019  344E
19020  344F
19021  3450
19022  3451
19023  3452
19024  3453
19025  3454
19026  3455
19027  3456
19028  3457
19029  3458
19030  3459
19031  345A
19032  345B
19033  345C
19034  345D
19035  345E
19036  345F
19037  3460
19038  3461
19039  3462
19040  3463
19041  3464
19042  3465
19043  3466
19044  3467
19045  3468
19046  3469
19047  346A
19048  346B
19049  346C
19050  346D
19051  346E
19052  346F
19053  3470
19054  3471
19055  3472
19056  3473
19057  3474
19058  3475
19059  3476
19060  3477
19061  3478
19062  3479
19063  347A
19064  347B
19065  347C
19066  347D
19067  347E
19068  347F
19069  3480
19070  3481
19071  3482
19072  3483
19073  3484
19074  3485
19075  3486
19076  3487
019077  000682  // Start P2.inc
019078  000683  var oObjects[MaxTotObjects+1] ;                 // address of objects
019079  000684  var CurrentForm ;
019080  000685  var TouchXpos, TouchYpos ;
019081  000686  var InputType, TouchState, CurInputData, pInputIndex ;
019082  000687  var comRX[40], cmd[CMDLenMAX] ;
019083  000688        
019084  000689  var InputCS, OutputCS ;
019085  000690        
019086  000691        
019087  000692        
019088  000693  func seroutCS(var op)
019089  000694      serout(op) ;
019090  000695      OutputCS ^= op ;
019091  000696  endfunc
019092  000697        
019093  000698  func nak0()
019094  000699      serout(NAK) ;
019095  000700      InputCS := 0 ;
019096  000701  endfunc
019097  000702        
019098  000703  func seroutOcs()
019099  000704      serout(OutputCS) ;
019100  000705      OutputCS := 0 ;
019101  000706  endfunc
019102  000707        
019103  000708  func SendReport(var id, var objt, var objn, var val)
019104  000709      seroutCS(id) ;
019105  000710      seroutCS(objt) ;
019106  000711      seroutCS(objn) ;
019107  000712      seroutCS(val >> 8) ; // first 8 bits
019108  000713      seroutCS(val) ;
019109  000714      seroutOcs() ;
019110  000715  endfunc
019111  000716        
019112  000717        
019113  000718  func ReadObject(var ObjectType, var ObjectIdx)
019114  000719      var j, k, Objects ;
019115  000720      Objects := *(oObjects+ObjectType) ;
019116  000721        
019117  000722      j := 2 + ObjectIdx * 2 + Objects ;
019118  000723       if (ObjectType == tForm)
019119  000724          k := CurrentForm ;
019120  000725      else if (ObjectType == tStrings)
019121  000726          k := stringsCV[ObjectIdx];
019122  000727          else
019123  000728          k := img_GetWord(hndl, *j, IMAGE_INDEX);
019124  000729          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
019125  000730                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
019126  000731      endif
019127  000732      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
019128  000733  endfunc
019129  000734        
019130  000735        
019131  000736  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
019132  000737      var i, j, k, Objects ;
019133  000738      ObjectType &= 0x3f ;
019134  000739      if (ObjectType == tForm)
019135  000740          ActivateForm(ObjectIdx) ;
019136  000741      else
019137  000742          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
019138  000743          i := *(Objects) ;
019139  000744          switch (ObjectType)
019140  000745              case tUserButton :
019141  000746                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
019142  000747                  break ;
019143  000748              default : j := -1 ;
019144  000749          endswitch
019145  000750          if (j != -1)
019146  000751              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
019147  000752              NewVal := NewVal << 1 ;
019148  000753              if (OVF())      // button group index change
019149  000754                  if (*(j+InputData+Ofs_IPD_P1))
019150  000755                      k &= 1 ;    // mask off old group index for momentary
019151  000756                  else
019152  000757                      k &= 3 ;    // mask off old group index for toggle
019153  000758                  endif
019154  000759              else            // normal set
019155  000760                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
019156  000761                  k &= 0xfffc ;    // retain only group index for state set
019157  000762              endif
019158  000763              NewVal |= k ;
019159  000764          endif
019160  000765           if (ObjectType == tStrings)
019161  000766              PrintStrings(ObjectIdx, NewVal, 0);
019162  000767          else
019163  000768              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
019164  000769              img_Show(hndl, i) ; // will only display if form is current
019165  000770          endif
019166  000771      endif
019167  000772  endfunc
019168  000773        
019169  000774  func TurnOffButtons(var group)
019170  000775      var j, k, l;
019171  000776      for (j := 0; j < nInputs; j++)
019172  000777          k := j*IPDatasize ;
019173  000778          if (*(InputData+k+Ofs_IPD_P2) == group)
019174  000779              l := -1 ;
019175  000780               if (*(InputData+k) == tUserButton)
019176  000781                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
019177  000782                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
019178  000783                  img_Show(hndl, l);      // only shows on current form
019179  000784              endif
019180  000785          endif
019181  000786      next
019182  000787  endfunc
019183  000788        
019184  000789        
019185  000790        
019186  000791        
019187  000792  func ActivateForm(var newform)
019188  000793      var i, j, *p ;
019189  000794        
019190  000795      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
019191  000796          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
019192  000797              if (img_GetWord(hndl, i, IMAGE_TAG))
019193  000798                  img_Disable(hndl,i) ;
019194  000799              endif
019195  000800          next
019196  000801      endif
019197  000802      CurrentForm := newform ;
019198  000803      // display newform image or clear to image color
019199  000804      if (FormBGcolors[CurrentForm] != ColorBGimage)
019200  000805          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
019201  000806          gfx_Cls() ;
019202  000807          DoGFXObjects() ;                                    // display GFX 'widgets'
019203  000808      endif
019204  000809        
019205  000810      // enable inputs
019206  000811      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
019207  000812          j := img_GetWord(hndl, i, IMAGE_TAG) ;
019208  000813          if (j)
019209  000814              j-- ;
019210  000815              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
019211  000816              //if (j != tKeyboard)
019212  000817              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
019213  000818                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
019214  000819              endif
019215  000820              img_Show(hndl,i) ; // show initialy, if required
019216  000821              if (j == tForm)
019217  000822                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
019218  000823              endif
019219  000824          endif
019220  000825      next
019221  000826      for (i := 0; i < nStrings; i++)
019222  000827          if (stringsCV[i] != -1)
019223  000828              WriteObject(tStrings, i, stringsCV[i]) ;
019224  000829          endif
019225  000830      next
019226  000831        
019227  000832  endfunc
019228  000833        
019229  000834  func UpdateObjects(var newval)
019230  000835      var IPidx, otherOBJ ;
019231  000836      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
019232  000837        
019233  000838          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
019234  000839              img_Show(hndl, *(pInputIndex));      // only shows on current form
019235  000840          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
019236  000841              if (*(CurInputData+Ofs_IPD_P1))
019237  000842                  newval &= 1;
019238  000843              else
019239  000844                  newval &= 3;
019240  000845              endif
019241  000846              if (newval > 1) newval := 1;
019242  000847          endif
019243  000848          IPidx := *(CurInputData+TouchState) ;
019244  000849          while(IPidx != 0)
019245  000850              otherOBJ := IPidx + InputData;
019246  000851              if (*(otherOBJ) == OT_REPORT)
019247  000852          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
019248  000853              else if (*(otherOBJ) == OT_MAGIC)
019249  000854                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
019250  000855                  IPidx(newval) ;
019251  000856              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
019252  000857                  if (*(otherOBJ) == OT_ACTIVATE)
019253  000858                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
019254  000859                      InputType := tForm ;
019255  000860                  else if (*(otherOBJ) == OT_SETCONST)
019256  000861                      newval := *(otherOBJ+Ofs_IPD_P3) ;
019257  000862                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019258  000863                  else if (*(otherOBJ) == OT_SETANOTHER)
019259  000864                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019260  000865                  else if (*(otherOBJ) == OT_PREVFRAME)
019261  000866                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
019262  000867                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
019263  000868                      endif
019264  000869                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019265  000870                  else if (*(otherOBJ) == OT_NEXTFRAME)
019266  000871                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
019267  000872                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
019268  000873                      endif
019269  000874                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019270  000875                  else if (*(otherOBJ) == OT_PREVSTRING)
019271  000876                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
019272  000877                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
019273  000878                      endif
019274  000879                  else if (*(otherOBJ) == OT_NEXTSTRING)
019275  000880                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
019276  000881                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
019277  000882                      endif
019278  000883                  endif
019279  000884              endif
019280  000885              IPidx := *(otherOBJ+TouchState) ;
019281  000886          wend
019282  000887      endif
019283  000888  endfunc
019284  000889        
019285  000890  // End P2.inc
019286  000891  func DoGFXObjects()
019287  000892  endfunc
019288  000893        
019289  000894  // Start P3.inc
019290  000895  func main()
019291  000896      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
019292  000897        
019293  000898      putstr("Mounting...\n");
019294  000899      if (!(file_Mount()))
019295  000900          while(!(file_Mount()))
019296  000901              putstr("Drive not mounted...");
019297  000902              pause(200);
019298  000903              gfx_Cls();
019299  000904              pause(200);
019300  000905          wend
019301  000906      endif
019302  000907  //    gfx_MoveTo(0, 0);
019303  000908  //    print(mem_Heap()," ") ;
019304  000909  //    gfx_TransparentColour(0x0020);
019305  000910  //    gfx_Transparency(ON);
019306  000911        
019307  000912      gfx_ScreenMode(LANDSCAPE) ;
019308  000913        
019309  000914      // open image control
019310  000915      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
019311  000916        
019312  000917      // init 'constants'
019313  000918  // End P3.inc
019314  000919        
019315  000920      oObjects[tDipSwitch] := oDipSwitchs ;
019316  000921      oObjects[tKnob] := oKnobs ;
019317  000922      oObjects[tRockerSwitch] := oRockerSwitchs ;
019318  000923      oObjects[tRotarySwitch] := oRotarySwitchs ;
019319  000924      oObjects[tGSlider] := oGSliders ;
019320  000925      oObjects[tTrackbar] := oTrackbars ;
019321  000926      oObjects[tWinButton] := oWinButtons ;
019322  000927      oObjects[tAngularmeter] := oAngularmeters ;
019323  000928      oObjects[tCoolgauge] := oCoolgauges ;
019324  000929      oObjects[tCustomdigits] := oCustomdigitss ;
019325  000930      oObjects[tForm] := oForms ;
019326  000931      oObjects[tGauge] := oGauges ;
019327  000932      oObjects[tImage] := oImages ;
019328  000933      oObjects[tKeyboard] := oKeyboards ;
019329  000934      oObjects[tLed] := oLeds ;
019330  000935      oObjects[tLeddigits] := oLeddigitss ;
019331  000936      oObjects[tMeter] := oMeters ;
019332  000937      oObjects[tStrings] := oStringss ;
019333  000938      oObjects[tThermometer] := oThermometers ;
019334  000939      oObjects[tUserled] := oUserleds ;
019335  000940      oObjects[tVideo] := oVideos ;
019336  000941      oObjects[tStaticText] := oStaticTexts ;
019337  000942      oObjects[tSounds] := oSoundss ;
019338  000943      oObjects[tTimer] := oTimers ;
019339  000944      oObjects[tSpectrum] := oSpectrums ;
019340  000945      oObjects[tTank] := oTanks ;
019341  000946      oObjects[tUserImages] := oUserImagess ;
019342  000947      oObjects[tPinOutput] := oPinOutputs ;
019343  000948      oObjects[tPinInput] := oPinInputs ;
019344  000949      oObjects[t4Dbutton] := o4Dbuttons ;
019345  000950      oObjects[tAniButton] := oAniButtons ;
019346  000951      oObjects[tColorPicker] := oColorPickers ;
019347  000952      oObjects[tUserButton] := oUserButtons ;
019348  000953      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
019349  000954      hFonts[2] := file_LoadImageControl("BCN3D_~1.d0C", "BCN3D_~1.g0C", 1)  ;
019350  000955      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
019351  000956      hFonts[5] := file_LoadImageControl("BCN3D_~1.d0M", "BCN3D_~1.g0M", 1)  ;
019352  000957      hFonts[28] := file_LoadImageControl("BCN3D_~1.d0Y", "BCN3D_~1.g0Y", 1)  ;
019353  000958      hFonts[40] := file_LoadImageControl("BCN3D_~1.d0J", "BCN3D_~1.g0J", 1)  ;
019354  000959      hFonts[46] := file_LoadImageControl("BCN3D_~1.d0Z", "BCN3D_~1.g0Z", 1)  ;
019355  000960      hFonts[0] := hFonts[2] ;
019356  000961      hFonts[4] := hFonts[2] ;
019357  000962      hFonts[6] := hFonts[2] ;
019358  000963      hFonts[7] := hFonts[1] ;
019359  000964      hFonts[8] := hFonts[1] ;
019360  000965      hFonts[9] := hFonts[2] ;
019361  000966      hFonts[10] := hFonts[5] ;
019362  000967      hFonts[11] := hFonts[2] ;
019363  000968      hFonts[12] := hFonts[1] ;
019364  000969      hFonts[13] := hFonts[2] ;
019365  000970      hFonts[14] := hFonts[2] ;
019366  000971      hFonts[15] := hFonts[2] ;
019367  000972      hFonts[16] := hFonts[1] ;
019368  000973      hFonts[17] := hFonts[5] ;
019369  000974      hFonts[18] := hFonts[2] ;
019370  000975      hFonts[19] := hFonts[2] ;
019371  000976      hFonts[20] := hFonts[2] ;
019372  000977      hFonts[21] := hFonts[2] ;
019373  000978      hFonts[22] := hFonts[2] ;
019374  000979      hFonts[23] := hFonts[1] ;
019375  000980      hFonts[24] := hFonts[1] ;
019376  000981      hFonts[25] := hFonts[1] ;
019377  000982      hFonts[26] := hFonts[1] ;
019378  000983      hFonts[27] := hFonts[2] ;
019379  000984      hFonts[29] := hFonts[2] ;
019380  000985      hFonts[30] := hFonts[1] ;
019381  000986      hFonts[31] := hFonts[2] ;
019382  000987      hFonts[32] := hFonts[2] ;
019383  000988      hFonts[33] := hFonts[2] ;
019384  000989      hFonts[34] := hFonts[2] ;
019385  000990      hFonts[35] := hFonts[2] ;
019386  000991      hFonts[36] := hFonts[2] ;
019387  000992      hFonts[37] := hFonts[2] ;
019388  000993      hFonts[38] := hFonts[2] ;
019389  000994      hFonts[39] := hFonts[2] ;
019390  000995      hFonts[41] := hFonts[40] ;
019391  000996      hFonts[42] := hFonts[40] ;
019392  000997      hFonts[43] := hFonts[46] ;
019393  000998      hFonts[44] := hFonts[2] ;
019394  000999      hFonts[45] := hFonts[46] ;
019395  001000      hFonts[47] := hFonts[46] ;
019396  001001      hFonts[48] := hFonts[40] ;
019397  001002      hFonts[49] := hFonts[2] ;
019398  001003      hFonts[50] := hFonts[1] ;
019399  001004      hFonts[51] := hFonts[1] ;
019400  001005      hFonts[52] := hFonts[2] ;
019401  001006      hFonts[53] := hFonts[40] ;
019402  001007  // Start P4.inc
019403  001008      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
019404  001009      // init comms
019405  001010      com_Init(comRX,CMDLenMAX,0);
019406  001011      com_SetBaud(COM0,19886);
019407  001012      com_TXbuffer(comTX, 100, 0);
019408  001013      snd_BufSize(2) ;
019409  001014      // tag 'real' objects
019410  001015      for (i := 0; i <= MaxTotObjects; i++)
019411  001016          if (   (i != tSounds)
019412  001017              && (i != tTimer)
019413  001018              && (i != tPinOutput)
019414  001019              && (i != tPinInput) )
019415  001020              TouchXpos := oObjects[i] ;
019416  001021              TouchYpos := *(TouchXpos) ;
019417  001022              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
019418  001023                  oldn := *(TouchXpos+ImageTouched*2) ;
019419  001024                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
019420  001025                  if (oldn != -1)
019421  001026                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
019422  001027                      img_Disable(hndl, oldn) ;
019423  001028                  endif
019424  001029              next
019425  001030          endif
019426  001031      next
019427  001032        
019428  001033      // display initial form
019429  001034      CurrentForm := -1 ;
019430  001035  // End P4.inc
019431  001036  // Start P5.inc
019432  001037      ActivateForm(0) ; // need to change this according to first actual form
019433  001038        
019434  001039  // End P5.inc
019435  001040  // Start P6.inc
019436  001041      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
019437  001042      oldn := -1 ;
019438  001043      repeat
019439  001044        
019440  001045          // check comms for command, how to NAK invalid command
019441  001046          if (com_Count() != 0)
019442  001047              i := serin() ;
019443  001048              InputCS ^= i ;               // update checksum
019444  001049              if (   (cmdi > 2)
019445  001050                  && (cmd[0] == WRITE_STRU) )
019446  001051                  j := (cmdi-1) >> 1 + 2 ;
019447  001052                  if (j == CMDLenMAX)    // max length exceeded
019448  001053                      nak0() ;
019449  001054                      cmdi := -1 ;
019450  001055                  else if (cmdi & 1)
019451  001056                      cmd[j] := i ;
019452  001057                      if (cmd[2] == 0)    // if string complete
019453  001058                          if (InputCS)
019454  001059                              nak0() ;
019455  001060                          else
019456  001061                              if (cmd[0] == WRITE_STRU)
019457  001062                              cmd[j] := 0 ;                     // terminate it
019458  001063                              PrintStrings(cmd[1], &cmd[3], 1) ;
019459  001064                              serout(ACK) ;
019460  001065                              else
019461  001066                              endif
019462  001067                          endif
019463  001068                          cmdi := -1 ;
019464  001069                      endif
019465  001070                  else
019466  001071                      cmd[j] := cmd[j] << 8 + i ;
019467  001072                      cmd[2]-- ;          // dec length
019468  001073                  endif
019469  001074                  cmdi++ ;
019470  001075              else // not unicode string
019471  001076                  cmd[cmdi++] := i ;
019472  001077                   if (cmd[0] == WRITE_STR)                  // Ansi String
019473  001078                      if (cmdi == CMDLenMAX)      // max length exceeded
019474  001079                          nak0() ;
019475  001080                          cmdi := 0 ;
019476  001081                      else if (cmdi > 2)
019477  001082                          if (cmd[2] == -1)
019478  001083                              if (InputCS)
019479  001084                                  nak0() ;
019480  001085                              else
019481  001086                                  if (cmd[0] == WRITE_STR)
019482  001087                                  cmd[cmdi-1] := 0 ;                     // terminate it
019483  001088                                  PrintStrings(cmd[1], &cmd[3], 1) ;
019484  001089                                  serout(ACK) ;
019485  001090                                  else
019486  001091                                  endif
019487  001092                              endif
019488  001093                              cmdi := 0 ;
019489  001094                          else
019490  001095                              cmd[2]-- ;          // dec length
019491  001096                          endif
019492  001097                      endif
019493  001098                  else if (   (cmd[0] == READ_OBJ)
019494  001099                           && (cmdi == 4)         )
019495  001100                      if (InputCS)
019496  001101                          nak0() ;
019497  001102                      else
019498  001103                          ReadObject(cmd[1], cmd[2]) ;
019499  001104                      endif
019500  001105                      cmdi := 0 ;
019501  001106                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
019502  001107                           && (cmdi == 6)          )
019503  001108                      if (InputCS)
019504  001109                          nak0() ;
019505  001110                      else
019506  001111                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
019507  001112                          serout(ACK) ;
019508  001113                      endif
019509  001114                      cmdi := 0 ;
019510  001115                  else if (   (cmd[0] == WRITE_CONTRAST)
019511  001116                           && (cmdi == 3)         )
019512  001117                      if (InputCS)
019513  001118                          nak0() ;
019514  001119                      else
019515  001120                          gfx_Contrast(cmd[1]) ;
019516  001121                          serout(ACK) ;
019517  001122                      endif
019518  001123                      cmdi := 0 ;
019519  001124                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
019520  001125                      nak0() ;
019521  001126                      cmdi := 0 ;
019522  001127                  endif
019523  001128              endif   // not unicode string
019524  001129          endif   // a character is available
019525  001130        
019526  001131        
019527  001132      // touch code processing
019528  001133        
019529  001134          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
019530  001135          ImageTouched := img_Touched(hndl,-1) ;
019531  001136          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
019532  001137              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
019533  001138                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
019534  001139              endif
019535  001140              if (TouchStatus != TOUCH_RELEASED)        // if not released
019536  001141                  if (oldn != -1)
019537  001142                      ImageTouched := oldn ;
019538  001143                  else
019539  001144                      if (oldn != ImageTouched)
019540  001145                  oldn := ImageTouched ;
019541  001146                          TouchStatus := TOUCH_PRESSED ;
019542  001147                      endif
019543  001148                  endif
019544  001149                  TouchXpos  := touch_Get(TOUCH_GETX);
019545  001150                  TouchYpos  := touch_Get(TOUCH_GETY);
019546  001151                  TouchState := Ofs_IPD_DOWN ;
019547  001152              else
019548  001153                  ImageTouched := oldn ;                     // simulate release of what we touched
019549  001154                  oldn := -1 ;                    // prevent double release
019550  001155                  TouchState := Ofs_IPD_RELEASE ;
019551  001156              endif
019552  001157              if (ImageTouched != -1)
019553  001158                          CurInputData := InputControls[ImageTouched] + InputData;
019554  001159                          InputType := *(CurInputData) ;
019555  001160                          i := InputType ;
019556  001161                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
019557  001162                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
019558  001163              endif
019559  001164          endif
019560  001165   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
019561  001166        
019562  001167          sys_EventsResume() ;
019563  001168      forever
019564  001169        
019565  001170  cDipswitch:
019566  001171        
019567  001172  cKnob:
019568  001173        
019569  001174  cRockerswitch:
019570  001175        
019571  001176  cRotaryswitch:
019572  001177        
019573  001178  cSlider:
019574  001179  cTrackbar:
019575  001180        
019576  001181  c4DButton:
019577  001182  cUserButton:
019578  001183      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
019579  001184      goto gbutton ;
019580  001185  cWinbutton:
019581  001186  gbutton:
019582  001187      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
019583  001188      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
019584  001189          if (TouchStatus == TOUCH_RELEASED)
019585  001190              i &= 0xfffe ;
019586  001191              TouchState == Ofs_IPD_DOWN ;
019587  001192          else
019588  001193              i |= 1 ;
019589  001194              TouchState == Ofs_IPD_RELEASE ;
019590  001195          endif
019591  001196      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
019592  001197          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
019593  001198              if ((i & 3) == 3)
019594  001199                  i &= 0xfffc ;
019595  001200              else
019596  001201                  i++ ;
019597  001202              endif
019598  001203          else
019599  001204              i |= 1 ;                                      // make down regardless of current state
019600  001205          endif
019601  001206      else                        // group action, up all other buttons on touch press, reports 0 for button down
019602  001207          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
019603  001208              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
019604  001209          endif
019605  001210          i := (i & 0xfffc) | 2 ;
019606  001211      endif
019607  001212        
019608  001213      UpdateObjects(i) ;
019609  001214  endsub ;
019610  001215        
019611  001216  cAniButton:
019612  001217        
019613  001218  cColorPicker:
019614  001219        
019615  001220  endfunc
019616  001221  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 855 file:BCN3D_SIGMAX.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 793 file:BCN3D_SIGMAX.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       16255  0x00003f7f (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 114)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 234)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 24)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       15623  0x00003d07 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       13075  0x00003313FormBGcolors                       13075  0x00003313 (mem) word[77] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         161  0x000000a1FormEndIndex                         161  0x000000a1 (mem) word[77] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[77] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 306)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 87)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm11                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm12                              171  0x000000ab (const ??? 0)  (usage 3)
iForm13                              121  0x00000079 (const ??? 0)  (usage 3)
iForm14                               37  0x00000025 (const ??? 0)  (usage 3)
iForm15                              173  0x000000ad (const ??? 0)  (usage 3)
iForm16                              103  0x00000067 (const ??? 0)  (usage 3)
iForm17                              127  0x0000007f (const ??? 0)  (usage 3)
iForm18                              186  0x000000ba (const ??? 0)  (usage 3)
iForm19                               41  0x00000029 (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                               43  0x0000002b (const ??? 0)  (usage 3)
iForm21                               52  0x00000034 (const ??? 0)  (usage 3)
iForm22                              202  0x000000ca (const ??? 0)  (usage 3)
iForm23                              217  0x000000d9 (const ??? 0)  (usage 3)
iForm24                              248  0x000000f8 (const ??? 0)  (usage 3)
iForm25                              129  0x00000081 (const ??? 0)  (usage 3)
iForm26                              299  0x0000012b (const ??? 0)  (usage 3)
iForm27                               55  0x00000037 (const ??? 0)  (usage 3)
iForm28                               67  0x00000043 (const ??? 0)  (usage 3)
iForm29                              194  0x000000c2 (const ??? 0)  (usage 3)
iForm3                               117  0x00000075 (const ??? 0)  (usage 3)
iForm30                              302  0x0000012e (const ??? 0)  (usage 3)
iForm31                               75  0x0000004b (const ??? 0)  (usage 3)
iForm32                               78  0x0000004e (const ??? 0)  (usage 3)
iForm33                               81  0x00000051 (const ??? 0)  (usage 3)
iForm34                               93  0x0000005d (const ??? 0)  (usage 3)
iForm35                               98  0x00000062 (const ??? 0)  (usage 3)
iForm36                              192  0x000000c0 (const ??? 0)  (usage 3)
iForm37                              207  0x000000cf (const ??? 0)  (usage 3)
iForm38                              209  0x000000d1 (const ??? 0)  (usage 3)
iForm39                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm4                                17  0x00000011 (const ??? 0)  (usage 3)
iForm40                              283  0x0000011b (const ??? 0)  (usage 3)
iForm41                              245  0x000000f5 (const ??? 0)  (usage 3)
iForm42                              220  0x000000dc (const ??? 0)  (usage 3)
iForm43                              225  0x000000e1 (const ??? 0)  (usage 3)
iForm44                              107  0x0000006b (const ??? 0)  (usage 3)
iForm45                              305  0x00000131 (const ??? 0)  (usage 3)
iForm46                              227  0x000000e3 (const ??? 0)  (usage 3)
iForm47                              125  0x0000007d (const ??? 0)  (usage 3)
iForm48                              136  0x00000088 (const ??? 0)  (usage 3)
iForm49                              143  0x0000008f (const ??? 0)  (usage 3)
iForm5                                22  0x00000016 (const ??? 0)  (usage 3)
iForm50                              230  0x000000e6 (const ??? 0)  (usage 3)
iForm51                              235  0x000000eb (const ??? 0)  (usage 3)
iForm52                              148  0x00000094 (const ??? 0)  (usage 3)
iForm53                              159  0x0000009f (const ??? 0)  (usage 3)
iForm54                              238  0x000000ee (const ??? 0)  (usage 3)
iForm55                              241  0x000000f1 (const ??? 0)  (usage 3)
iForm56                              250  0x000000fa (const ??? 0)  (usage 3)
iForm57                              252  0x000000fc (const ??? 0)  (usage 3)
iForm58                              257  0x00000101 (const ??? 0)  (usage 3)
iForm59                              269  0x0000010d (const ??? 0)  (usage 3)
iForm6                                27  0x0000001b (const ??? 0)  (usage 3)
iForm60                              259  0x00000103 (const ??? 0)  (usage 3)
iForm61                              262  0x00000106 (const ??? 0)  (usage 3)
iForm62                              264  0x00000108 (const ??? 0)  (usage 3)
iForm63                              267  0x0000010b (const ??? 0)  (usage 3)
iForm64                              280  0x00000118 (const ??? 0)  (usage 3)
iForm65                              285  0x0000011d (const ??? 0)  (usage 3)
iForm66                              290  0x00000122 (const ??? 0)  (usage 3)
iForm67                              293  0x00000125 (const ??? 0)  (usage 3)
iForm68                              296  0x00000128 (const ??? 0)  (usage 3)
iForm69                              307  0x00000133 (const ??? 0)  (usage 3)
iForm7                               255  0x000000ff (const ??? 0)  (usage 3)
iForm70                              308  0x00000134 (const ??? 0)  (usage 3)
iForm71                              310  0x00000136 (const ??? 0)  (usage 3)
iForm72                              312  0x00000138 (const ??? 0)  (usage 3)
iForm73                              314  0x0000013a (const ??? 0)  (usage 3)
iForm74                              316  0x0000013c (const ??? 0)  (usage 3)
iForm75                              319  0x0000013f (const ??? 0)  (usage 3)
iForm76                              320  0x00000140 (const ??? 0)  (usage 3)
iForm8                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm9                                33  0x00000021 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 39)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 12)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 15)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        315  0x0000013bInputControls                        315  0x0000013b (mem) word[323] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            961  0x000003c1InputData                            961  0x000003c1 (mem) word[4939] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 24)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          10839  0x00002a57iStrings0                          10839  0x00002a57 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings1                          10865  0x00002a71iStrings1                          10865  0x00002a71 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings10                         11099  0x00002b5biStrings10                         11099  0x00002b5b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings11                         11125  0x00002b75iStrings11                         11125  0x00002b75 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings12                         11151  0x00002b8fiStrings12                         11151  0x00002b8f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings13                         11177  0x00002ba9iStrings13                         11177  0x00002ba9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings14                         11203  0x00002bc3iStrings14                         11203  0x00002bc3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings15                         11229  0x00002bddiStrings15                         11229  0x00002bdd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings16                         11255  0x00002bf7iStrings16                         11255  0x00002bf7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings17                         11281  0x00002c11iStrings17                         11281  0x00002c11 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings18                         11307  0x00002c2biStrings18                         11307  0x00002c2b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings19                         11333  0x00002c45iStrings19                         11333  0x00002c45 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings2                          10891  0x00002a8biStrings2                          10891  0x00002a8b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings20                         11359  0x00002c5fiStrings20                         11359  0x00002c5f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings21                         11385  0x00002c79iStrings21                         11385  0x00002c79 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings22                         11411  0x00002c93iStrings22                         11411  0x00002c93 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings23                         11437  0x00002cadiStrings23                         11437  0x00002cad (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings24                         11463  0x00002cc7iStrings24                         11463  0x00002cc7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings25                         11489  0x00002ce1iStrings25                         11489  0x00002ce1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings26                         11515  0x00002cfbiStrings26                         11515  0x00002cfb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings27                         11541  0x00002d15iStrings27                         11541  0x00002d15 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings28                         11567  0x00002d2fiStrings28                         11567  0x00002d2f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings29                         11593  0x00002d49iStrings29                         11593  0x00002d49 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings3                          10917  0x00002aa5iStrings3                          10917  0x00002aa5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings30                         11619  0x00002d63iStrings30                         11619  0x00002d63 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings31                         11645  0x00002d7diStrings31                         11645  0x00002d7d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings32                         11671  0x00002d97iStrings32                         11671  0x00002d97 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings33                         11697  0x00002db1iStrings33                         11697  0x00002db1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings34                         11723  0x00002dcbiStrings34                         11723  0x00002dcb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings35                         11749  0x00002de5iStrings35                         11749  0x00002de5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings36                         11775  0x00002dffiStrings36                         11775  0x00002dff (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings37                         11801  0x00002e19iStrings37                         11801  0x00002e19 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings38                         11827  0x00002e33iStrings38                         11827  0x00002e33 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings39                         11853  0x00002e4diStrings39                         11853  0x00002e4d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings4                          10943  0x00002abfiStrings4                          10943  0x00002abf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings40                         11879  0x00002e67iStrings40                         11879  0x00002e67 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings41                         11905  0x00002e81iStrings41                         11905  0x00002e81 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings42                         11931  0x00002e9biStrings42                         11931  0x00002e9b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings43                         11957  0x00002eb5iStrings43                         11957  0x00002eb5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings44                         11983  0x00002ecfiStrings44                         11983  0x00002ecf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings45                         12009  0x00002ee9iStrings45                         12009  0x00002ee9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings46                         12035  0x00002f03iStrings46                         12035  0x00002f03 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings47                         12061  0x00002f1diStrings47                         12061  0x00002f1d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings48                         12087  0x00002f37iStrings48                         12087  0x00002f37 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings49                         12113  0x00002f51iStrings49                         12113  0x00002f51 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings5                          10969  0x00002ad9iStrings5                          10969  0x00002ad9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings50                         12139  0x00002f6biStrings50                         12139  0x00002f6b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings51                         12165  0x00002f85iStrings51                         12165  0x00002f85 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings52                         12191  0x00002f9fiStrings52                         12191  0x00002f9f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings53                         12217  0x00002fb9iStrings53                         12217  0x00002fb9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings6                          10995  0x00002af3iStrings6                          10995  0x00002af3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings7                          11021  0x00002b0diStrings7                          11021  0x00002b0d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings8                          11047  0x00002b27iStrings8                          11047  0x00002b27 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings9                          11073  0x00002b41iStrings9                          11073  0x00002b41 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          28  0x0000001c (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        268  0x0000010c (const ??? 0)  (usage 3)
iUserbutton100                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton101                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton102                        82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton103                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton104                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton105                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton106                        86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton107                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton108                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton109                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton11                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton110                        90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton111                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton112                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton113                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton114                        96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton115                        99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton116                       100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton117                       101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton118                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton119                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton12                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton120                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton121                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton122                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton123                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton124                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton125                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton126                        51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton127                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton128                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton129                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton13                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton130                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton131                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton132                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton133                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton134                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton135                       116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton136                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton137                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton138                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton139                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton14                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton140                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton141                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton142                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton143                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton144                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton145                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton146                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton147                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton148                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton149                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton151                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton152                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton153                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton154                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton155                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton156                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton157                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton158                       105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton159                        31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton16                         36  0x00000024 (const ??? 0)  (usage 3)
iUserbutton160                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton161                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton162                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton163                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton164                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton165                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton166                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton167                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton168                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton169                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton17                         38  0x00000026 (const ??? 0)  (usage 3)
iUserbutton170                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton171                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton172                       301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton173                       303  0x0000012f (const ??? 0)  (usage 3)
iUserbutton174                       304  0x00000130 (const ??? 0)  (usage 3)
iUserbutton175                       309  0x00000135 (const ??? 0)  (usage 3)
iUserbutton176                       311  0x00000137 (const ??? 0)  (usage 3)
iUserbutton177                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton178                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton179                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton18                         34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton180                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton181                       236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton182                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton183                       242  0x000000f2 (const ??? 0)  (usage 3)
iUserbutton184                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton185                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton186                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton187                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton188                       247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton189                       251  0x000000fb (const ??? 0)  (usage 3)
iUserbutton19                         35  0x00000023 (const ??? 0)  (usage 3)
iUserbutton190                       254  0x000000fe (const ??? 0)  (usage 3)
iUserbutton191                       265  0x00000109 (const ??? 0)  (usage 3)
iUserbutton192                       256  0x00000100 (const ??? 0)  (usage 3)
iUserbutton193                       270  0x0000010e (const ??? 0)  (usage 3)
iUserbutton194                       260  0x00000104 (const ??? 0)  (usage 3)
iUserbutton195                       261  0x00000105 (const ??? 0)  (usage 3)
iUserbutton196                       271  0x0000010f (const ??? 0)  (usage 3)
iUserbutton197                       286  0x0000011e (const ??? 0)  (usage 3)
iUserbutton198                       287  0x0000011f (const ??? 0)  (usage 3)
iUserbutton199                       272  0x00000110 (const ??? 0)  (usage 3)
iUserbutton2                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton20                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton200                       273  0x00000111 (const ??? 0)  (usage 3)
iUserbutton201                       274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton202                       275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton203                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton204                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton205                       279  0x00000117 (const ??? 0)  (usage 3)
iUserbutton206                       281  0x00000119 (const ??? 0)  (usage 3)
iUserbutton207                       282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton208                       317  0x0000013d (const ??? 0)  (usage 3)
iUserbutton209                       288  0x00000120 (const ??? 0)  (usage 3)
iUserbutton21                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton210                       291  0x00000123 (const ??? 0)  (usage 3)
iUserbutton211                       294  0x00000126 (const ??? 0)  (usage 3)
iUserbutton212                       297  0x00000129 (const ??? 0)  (usage 3)
iUserbutton213                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton214                       318  0x0000013e (const ??? 0)  (usage 3)
iUserbutton215                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton216                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton217                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton218                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton219                       321  0x00000141 (const ??? 0)  (usage 3)
iUserbutton22                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton220                       322  0x00000142 (const ??? 0)  (usage 3)
iUserbutton23                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton24                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton25                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton26                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton27                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton28                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton29                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton3                         179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton30                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton31                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton32                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton33                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton34                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton35                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton36                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton37                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton38                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton39                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton4                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton40                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton41                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton45                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton46                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton47                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton48                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton49                        253  0x000000fd (const ??? 0)  (usage 3)
iUserbutton5                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton50                         30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton51                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton52                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton53                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton54                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton55                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton56                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton57                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton58                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton59                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton6                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton60                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton63                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton64                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton65                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton66                        218  0x000000da (const ??? 0)  (usage 3)
iUserbutton67                        246  0x000000f6 (const ??? 0)  (usage 3)
iUserbutton68                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton69                        249  0x000000f9 (const ??? 0)  (usage 3)
iUserbutton7                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton70                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton71                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton72                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton73                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton74                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton75                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton76                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton77                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton78                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton79                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton8                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton80                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton81                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton82                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton83                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton84                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton85                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton86                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton87                        221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                         32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton9                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton90                        203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton91                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton92                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton93                        300  0x0000012c (const ??? 0)  (usage 3)
iUserbutton94                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton95                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton96                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton97                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton98                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton99                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages0                         199  0x000000c7 (const ??? 0)  (usage 3)
iUserimages1                          15  0x0000000f (const ??? 0)  (usage 3)
iUserimages2                         278  0x00000116 (const ??? 0)  (usage 3)
iUserimages4                          77  0x0000004d (const ??? 0)  (usage 3)
iUserimages5                          80  0x00000050 (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              177  0x000000b1 (const ??? 0)  (usage 3)
iVideo10                             106  0x0000006a (const ??? 0)  (usage 3)
iVideo11                              54  0x00000036 (const ??? 0)  (usage 3)
iVideo14                              16  0x00000010 (const ??? 0)  (usage 3)
iVideo15                             185  0x000000b9 (const ??? 0)  (usage 3)
iVideo16                              97  0x00000061 (const ??? 0)  (usage 3)
iVideo17                             102  0x00000066 (const ??? 0)  (usage 3)
iVideo18                             295  0x00000127 (const ??? 0)  (usage 3)
iVideo19                             258  0x00000102 (const ??? 0)  (usage 3)
iVideo2                              193  0x000000c1 (const ??? 0)  (usage 3)
iVideo20                             115  0x00000073 (const ??? 0)  (usage 3)
iVideo21                             306  0x00000132 (const ??? 0)  (usage 3)
iVideo22                             313  0x00000139 (const ??? 0)  (usage 3)
iVideo23                             315  0x0000013b (const ??? 0)  (usage 3)
iVideo3                               72  0x00000048 (const ??? 0)  (usage 3)
iVideo4                               73  0x00000049 (const ??? 0)  (usage 3)
iVideo5                               74  0x0000004a (const ??? 0)  (usage 3)
iVideo6                              128  0x00000080 (const ??? 0)  (usage 3)
iVideo7                              263  0x00000107 (const ??? 0)  (usage 3)
iVideo8                              284  0x0000011c (const ??? 0)  (usage 3)
iVideo9                              229  0x000000e5 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                13229  0x000033adkKeyboardKeystrokes                13229  0x000033ad (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               13631  0x0000353f (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               17221  0x00004345 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (usage 15)
nInputs                              449  0x000001c1 (const dword)  (usage 3)
nObjects                             323  0x00000143 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         12619  0x0000314bo4Dbuttons                         12619  0x0000314b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oAngularmeters                     12257  0x00002fe1oAngularmeters                     12257  0x00002fe1 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oAniButtons                        12621  0x0000314doAniButtons                        12621  0x0000314d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      12623  0x0000314foColorPickers                      12623  0x0000314f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oCoolgauges                        12259  0x00002fe3oCoolgauges                        12259  0x00002fe3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oCustomdigitss                     12261  0x00002fe5oCustomdigitss                     12261  0x00002fe5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oDipSwitchs                        12243  0x00002fd3oDipSwitchs                        12243  0x00002fd3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                             12263  0x00002fe7oForms                             12263  0x00002fe7 (mem) word[78] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 9)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            12419  0x00003083oGauges                            12419  0x00003083 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oGSliders                          12251  0x00002fdboGSliders                          12251  0x00002fdb (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oImages                            12421  0x00003085oImages                            12421  0x00003085 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oKeyboards                         12423  0x00003087oKeyboards                         12423  0x00003087 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oKnobs                             12245  0x00002fd5oKnobs                             12245  0x00002fd5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                        12427  0x0000308boLeddigitss                        12427  0x0000308b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oLeds                              12425  0x00003089oLeds                              12425  0x00003089 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                            12429  0x0000308doMeters                            12429  0x0000308d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         12617  0x00003149oPinInputs                         12617  0x00003149 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oPinOutputs                        13073  0x00003311oPinOutputs                        13073  0x00003311 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     12247  0x00002fd7oRockerSwitchs                     12247  0x00002fd7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oRotarySwitchs                     12249  0x00002fd9oRotarySwitchs                     12249  0x00002fd9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oScopes                            12599  0x00003137oScopes                            12599  0x00003137 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oSoundss                           13071  0x0000330foSoundss                           13071  0x0000330f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oSpectrums                         12597  0x00003135oSpectrums                         12597  0x00003135 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oStaticTexts                       12595  0x00003133oStaticTexts                       12595  0x00003133 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oStringss                          12431  0x0000308foStringss                          12431  0x0000308f (mem) word[55] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 63)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 630)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             12601  0x00003139oTanks                             12601  0x00003139 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oThermometers                      12541  0x000030fdoThermometers                      12541  0x000030fd (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oTimers                            13069  0x0000330doTimers                            13069  0x0000330d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oTrackbars                         12253  0x00002fddoTrackbars                         12253  0x00002fdd (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oUserButtons                       12625  0x00003151oUserButtons                       12625  0x00003151 (mem) word[222] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 12)
oUserImagess                       12603  0x0000313boUserImagess                       12603  0x0000313b (mem) word[7] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oUserleds                          12543  0x000030ffoUserleds                          12543  0x000030ff (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            12545  0x00003101oVideos                            12545  0x00003101 (mem) word[25] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        12255  0x00002fdfoWinButtons                        12255  0x00002fdf (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 15)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       17256  0x00004368 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         17006  0x0000426e (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  13231  0x000033afrKeyboardRoutines                  13231  0x000033af (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMAX_125\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 15)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         17154  0x00004302 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           17237  0x00004355 (User func) args[1] r=0  (usage 15)
seroutOcs                          17204  0x00004334 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           4  0x00000004 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          7  0x00000007 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          9  0x00000009 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          9  0x00000009 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          9  0x00000009 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          9  0x00000009 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         19  0x00000013 (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     3072  0x00000c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         37  0x00000025 (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         37  0x00000025 (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         22  0x00000016 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                          4  0x00000004 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         37  0x00000025 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          4  0x00000004 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                          4  0x00000004 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                          4  0x00000004 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings34Count                         1  0x00000001 (const dword)  (not used)
Strings34Size                          4  0x00000004 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                          4  0x00000004 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings36Count                         1  0x00000001 (const dword)  (not used)
Strings36Size                          4  0x00000004 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings37Count                         1  0x00000001 (const dword)  (not used)
Strings37Size                          4  0x00000004 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings38Count                         1  0x00000001 (const dword)  (not used)
Strings38Size                          4  0x00000004 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         16  0x00000010 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings41Count                         0  0x00000000 (const dword)  (not used)
Strings41Size                          1  0x00000001 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings42Count                         0  0x00000000 (const dword)  (not used)
Strings42Size                          1  0x00000001 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                           4  0x00000004 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      8704  0x00002200 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    27136  0x00006a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings53Count                         0  0x00000000 (const dword)  (not used)
Strings53Size                          1  0x00000001 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                           7  0x00000007 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           4  0x00000004 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     18432  0x00004800 (const dword)  (usage 3)
Strings7Count                          1  0x00000001 (const dword)  (not used)
Strings7Size                          37  0x00000025 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                           4  0x00000004 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     16576  0x000040c0 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 675)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      15624  0x00003d08 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 6)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        16713  0x00004149 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
