file C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003  // generated 16/09/2016 12:22:23
005194  000004        
005195  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005196  000006  #inherit "4DGL_16bitColours.fnc"
005197  000006  #inherit "4DGL_16bitColours.fnc"
005198  000004  */
005199  000005        
005200  000006        
005201  000007        
005202  000008  #CONST
005203  000149  #END
005204  000150        
005205  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005206  000008  #inherit "VisualConst.inc"
005207  000008  #inherit "VisualConst.inc"
005208  000001  // Line Patterns
005209  000002  #constant  LPCOARSE    0xF0F0
005210  000002  #constant  LPCOARSE    0xF0F0
005211  000003  #constant  LPMEDIUM    0x3333
005212  000003  #constant  LPMEDIUM    0x3333
005213  000004  #constant  LPFINE      0xAAAA
005214  000004  #constant  LPFINE      0xAAAA
005215  000005  #constant  LPDASHDOT   0x03CF
005216  000005  #constant  LPDASHDOT   0x03CF
005217  000006  #constant  LPDASHDOTDOT 0x0333
005218  000006  #constant  LPDASHDOTDOT 0x0333
005219  000007  #constant  LPSOLID     0x0000
005220  000007  #constant  LPSOLID     0x0000
005221  000009        
005222  000010        
file C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMAConst.inc

005223  000011  #inherit "BCN3D_SIGMAConst.inc"
005224  000011  #inherit "BCN3D_SIGMAConst.inc"
005225  000001  // File generated 16/09/2016 12:21:46
005226  000002  // Warning! This is a generated file, any manual changes will be
005227  000003  // lost during the next generation.
005228  000004        
005229  000005  #constant  Strings3Count    0
005230  000005  #constant  Strings3Count    0
005231  000006  #constant  Strings3Size     1
005232  000006  #constant  Strings3Size     1
005233  000007  #constant  Strings1Count    0
005234  000007  #constant  Strings1Count    0
005235  000008  #constant  Strings1Size     1
005236  000008  #constant  Strings1Size     1
005237  000009  #constant  Strings7Count    1
005238  000009  #constant  Strings7Count    1
005239  000010  #constant  Strings7Size     37
005240  000010  #constant  Strings7Size     37
005241  000011  #constant  Strings8Count    0
005242  000011  #constant  Strings8Count    0
005243  000012  #constant  Strings8Size     1
005244  000012  #constant  Strings8Size     1
005245  000013  #constant  Strings12Count    0
005246  000013  #constant  Strings12Count    0
005247  000014  #constant  Strings12Size     1
005248  000014  #constant  Strings12Size     1
005249  000015  #constant  Strings23Count    0
005250  000015  #constant  Strings23Count    0
005251  000016  #constant  Strings23Size     1
005252  000016  #constant  Strings23Size     1
005253  000017  #constant  Strings24Count    1
005254  000017  #constant  Strings24Count    1
005255  000018  #constant  Strings24Size     19
005256  000018  #constant  Strings24Size     19
005257  000019  #constant  Strings25Count    1
005258  000019  #constant  Strings25Count    1
005259  000020  #constant  Strings25Size     37
005260  000020  #constant  Strings25Size     37
005261  000021  #constant  Strings26Count    1
005262  000021  #constant  Strings26Count    1
005263  000022  #constant  Strings26Size     37
005264  000022  #constant  Strings26Size     37
005265  000023  #constant  Strings16Count    0
005266  000023  #constant  Strings16Count    0
005267  000024  #constant  Strings16Size     1
005268  000024  #constant  Strings16Size     1
005269  000025  #constant  Strings30Count    1
005270  000025  #constant  Strings30Count    1
005271  000026  #constant  Strings30Size     37
005272  000026  #constant  Strings30Size     37
005273  000027  #constant  Strings2Count    1
005274  000027  #constant  Strings2Count    1
005275  000028  #constant  Strings2Size     4
005276  000028  #constant  Strings2Size     4
005277  000029  #constant  Strings0Count    1
005278  000029  #constant  Strings0Count    1
005279  000030  #constant  Strings0Size     4
005280  000030  #constant  Strings0Size     4
005281  000031  #constant  Strings9Count    1
005282  000031  #constant  Strings9Count    1
005283  000032  #constant  Strings9Size     4
005284  000032  #constant  Strings9Size     4
005285  000033  #constant  Strings34Count    1
005286  000033  #constant  Strings34Count    1
005287  000034  #constant  Strings34Size     4
005288  000034  #constant  Strings34Size     4
005289  000035  #constant  Strings36Count    1
005290  000035  #constant  Strings36Count    1
005291  000036  #constant  Strings36Size     4
005292  000036  #constant  Strings36Size     4
005293  000037  #constant  Strings37Count    1
005294  000037  #constant  Strings37Count    1
005295  000038  #constant  Strings37Size     4
005296  000038  #constant  Strings37Size     4
005297  000039  #constant  Strings4Count    1
005298  000039  #constant  Strings4Count    1
005299  000040  #constant  Strings4Size     4
005300  000040  #constant  Strings4Size     4
005301  000041  #constant  Strings40Count    1
005302  000041  #constant  Strings40Count    1
005303  000042  #constant  Strings40Size     16
005304  000042  #constant  Strings40Size     16
005305  000043  #constant  Strings41Count    0
005306  000043  #constant  Strings41Count    0
005307  000044  #constant  Strings41Size     1
005308  000044  #constant  Strings41Size     1
005309  000045  #constant  Strings42Count    0
005310  000045  #constant  Strings42Count    0
005311  000046  #constant  Strings42Size     1
005312  000046  #constant  Strings42Size     1
005313  000047  #constant  Strings5Count    1
005314  000047  #constant  Strings5Count    1
005315  000048  #constant  Strings5Size     7
005316  000048  #constant  Strings5Size     7
005317  000049  #constant  Strings10Count    1
005318  000049  #constant  Strings10Count    1
005319  000050  #constant  Strings10Size     7
005320  000050  #constant  Strings10Size     7
005321  000051  #constant  Strings17Count    1
005322  000051  #constant  Strings17Count    1
005323  000052  #constant  Strings17Size     7
005324  000052  #constant  Strings17Size     7
005325  000053  #constant  Strings13Count    1
005326  000053  #constant  Strings13Count    1
005327  000054  #constant  Strings13Size     7
005328  000054  #constant  Strings13Size     7
005329  000055  #constant  Strings14Count    1
005330  000055  #constant  Strings14Count    1
005331  000056  #constant  Strings14Size     7
005332  000056  #constant  Strings14Size     7
005333  000057  #constant  Strings15Count    1
005334  000057  #constant  Strings15Count    1
005335  000058  #constant  Strings15Size     7
005336  000058  #constant  Strings15Size     7
005337  000059  #constant  Strings18Count    1
005338  000059  #constant  Strings18Count    1
005339  000060  #constant  Strings18Size     7
005340  000060  #constant  Strings18Size     7
005341  000061  #constant  Strings19Count    1
005342  000061  #constant  Strings19Count    1
005343  000062  #constant  Strings19Size     9
005344  000062  #constant  Strings19Size     9
005345  000063  #constant  Strings20Count    1
005346  000063  #constant  Strings20Count    1
005347  000064  #constant  Strings20Size     9
005348  000064  #constant  Strings20Size     9
005349  000065  #constant  Strings21Count    1
005350  000065  #constant  Strings21Count    1
005351  000066  #constant  Strings21Size     9
005352  000066  #constant  Strings21Size     9
005353  000067  #constant  Strings22Count    1
005354  000067  #constant  Strings22Count    1
005355  000068  #constant  Strings22Size     9
005356  000068  #constant  Strings22Size     9
005357  000069  #constant  Strings27Count    0
005358  000069  #constant  Strings27Count    0
005359  000070  #constant  Strings27Size     1
005360  000070  #constant  Strings27Size     1
005361  000071  #constant  Strings28Count    1
005362  000071  #constant  Strings28Count    1
005363  000072  #constant  Strings28Size     22
005364  000072  #constant  Strings28Size     22
005365  000073  #constant  Strings46Count    0
005366  000073  #constant  Strings46Count    0
005367  000074  #constant  Strings46Size     1
005368  000074  #constant  Strings46Size     1
005369  000075  #constant  Strings6Count    1
005370  000075  #constant  Strings6Count    1
005371  000076  #constant  Strings6Size     4
005372  000076  #constant  Strings6Size     4
005373  000077  #constant  Strings29Count    1
005374  000077  #constant  Strings29Count    1
005375  000078  #constant  Strings29Size     4
005376  000078  #constant  Strings29Size     4
005377  000079  #constant  Strings31Count    1
005378  000079  #constant  Strings31Count    1
005379  000080  #constant  Strings31Size     4
005380  000080  #constant  Strings31Size     4
005381  000081  #constant  Strings32Count    1
005382  000081  #constant  Strings32Count    1
005383  000082  #constant  Strings32Size     4
005384  000082  #constant  Strings32Size     4
005385  000083  #constant  Strings33Count    1
005386  000083  #constant  Strings33Count    1
005387  000084  #constant  Strings33Size     4
005388  000084  #constant  Strings33Size     4
005389  000085  #constant  Strings35Count    1
005390  000085  #constant  Strings35Count    1
005391  000086  #constant  Strings35Size     4
005392  000086  #constant  Strings35Size     4
005393  000087  #constant  Strings38Count    1
005394  000087  #constant  Strings38Count    1
005395  000088  #constant  Strings38Size     4
005396  000088  #constant  Strings38Size     4
005397  000089  #constant  Strings47Count    0
005398  000089  #constant  Strings47Count    0
005399  000090  #constant  Strings47Size     1
005400  000090  #constant  Strings47Size     1
005401  000091  #constant  Strings43Count    0
005402  000091  #constant  Strings43Count    0
005403  000092  #constant  Strings43Size     1
005404  000092  #constant  Strings43Size     1
005405  000093  #constant  Strings11Count    1
005406  000093  #constant  Strings11Count    1
005407  000094  #constant  Strings11Size     7
005408  000094  #constant  Strings11Size     7
005409  000095  #constant  Strings45Count    0
005410  000095  #constant  Strings45Count    0
005411  000096  #constant  Strings45Size     1
005412  000096  #constant  Strings45Size     1
005413  000097  #constant  Strings48Count    0
005414  000097  #constant  Strings48Count    0
005415  000098  #constant  Strings48Size     1
005416  000098  #constant  Strings48Size     1
005417  000099  #constant  Strings39Count    0
005418  000099  #constant  Strings39Count    0
005419  000100  #constant  Strings39Size     1
005420  000100  #constant  Strings39Size     1
005421  000101  #constant  Strings44Count    0
005422  000101  #constant  Strings44Count    0
005423  000102  #constant  Strings44Size     1
005424  000102  #constant  Strings44Size     1
005425  000103  #constant  Strings49Count    1
005426  000103  #constant  Strings49Count    1
005427  000104  #constant  Strings49Size     12
005428  000104  #constant  Strings49Size     12
005429  000105  // object indexes into ImageControl
005430  000106  #CONST
005431  000405  #END
005432  000406        
005433  000407  #constant  Strings3StartH   0x0
005434  000407  #constant  Strings3StartH   0x0
005435  000408  #constant  Strings3StartL   0x0
005436  000408  #constant  Strings3StartL   0x0
005437  000409  #constant  Strings1StartH   0x0
005438  000409  #constant  Strings1StartH   0x0
005439  000410  #constant  Strings1StartL   0x200
005440  000410  #constant  Strings1StartL   0x200
005441  000411  #constant  Strings7StartH   0x0
005442  000411  #constant  Strings7StartH   0x0
005443  000412  #constant  Strings7StartL   0x400
005444  000412  #constant  Strings7StartL   0x400
005445  000413  #constant  Strings8StartH   0x0
005446  000413  #constant  Strings8StartH   0x0
005447  000414  #constant  Strings8StartL   0x600
005448  000414  #constant  Strings8StartL   0x600
005449  000415  #constant  Strings12StartH   0x0
005450  000415  #constant  Strings12StartH   0x0
005451  000416  #constant  Strings12StartL   0x800
005452  000416  #constant  Strings12StartL   0x800
005453  000417  #constant  Strings23StartH   0x0
005454  000417  #constant  Strings23StartH   0x0
005455  000418  #constant  Strings23StartL   0xA00
005456  000418  #constant  Strings23StartL   0xA00
005457  000419  #constant  Strings24StartH   0x0
005458  000419  #constant  Strings24StartH   0x0
005459  000420  #constant  Strings24StartL   0xC00
005460  000420  #constant  Strings24StartL   0xC00
005461  000421  #constant  Strings25StartH   0x0
005462  000421  #constant  Strings25StartH   0x0
005463  000422  #constant  Strings25StartL   0xE00
005464  000422  #constant  Strings25StartL   0xE00
005465  000423  #constant  Strings26StartH   0x0
005466  000423  #constant  Strings26StartH   0x0
005467  000424  #constant  Strings26StartL   0x1000
005468  000424  #constant  Strings26StartL   0x1000
005469  000425  #constant  Strings16StartH   0x0
005470  000425  #constant  Strings16StartH   0x0
005471  000426  #constant  Strings16StartL   0x1200
005472  000426  #constant  Strings16StartL   0x1200
005473  000427  #constant  Strings30StartH   0x0
005474  000427  #constant  Strings30StartH   0x0
005475  000428  #constant  Strings30StartL   0x1400
005476  000428  #constant  Strings30StartL   0x1400
005477  000429  #constant  Strings2StartH   0x0
005478  000429  #constant  Strings2StartH   0x0
005479  000430  #constant  Strings2StartL   0x1600
005480  000430  #constant  Strings2StartL   0x1600
005481  000431  #constant  Strings0StartH   0x0
005482  000431  #constant  Strings0StartH   0x0
005483  000432  #constant  Strings0StartL   0x1800
005484  000432  #constant  Strings0StartL   0x1800
005485  000433  #constant  Strings9StartH   0x0
005486  000433  #constant  Strings9StartH   0x0
005487  000434  #constant  Strings9StartL   0x1A00
005488  000434  #constant  Strings9StartL   0x1A00
005489  000435  #constant  Strings34StartH   0x0
005490  000435  #constant  Strings34StartH   0x0
005491  000436  #constant  Strings34StartL   0x1C00
005492  000436  #constant  Strings34StartL   0x1C00
005493  000437  #constant  Strings36StartH   0x0
005494  000437  #constant  Strings36StartH   0x0
005495  000438  #constant  Strings36StartL   0x1E00
005496  000438  #constant  Strings36StartL   0x1E00
005497  000439  #constant  Strings37StartH   0x0
005498  000439  #constant  Strings37StartH   0x0
005499  000440  #constant  Strings37StartL   0x2000
005500  000440  #constant  Strings37StartL   0x2000
005501  000441  #constant  Strings4StartH   0x0
005502  000441  #constant  Strings4StartH   0x0
005503  000442  #constant  Strings4StartL   0x2200
005504  000442  #constant  Strings4StartL   0x2200
005505  000443  #constant  Strings40StartH   0x0
005506  000443  #constant  Strings40StartH   0x0
005507  000444  #constant  Strings40StartL   0x2400
005508  000444  #constant  Strings40StartL   0x2400
005509  000445  #constant  Strings41StartH   0x0
005510  000445  #constant  Strings41StartH   0x0
005511  000446  #constant  Strings41StartL   0x2600
005512  000446  #constant  Strings41StartL   0x2600
005513  000447  #constant  Strings42StartH   0x0
005514  000447  #constant  Strings42StartH   0x0
005515  000448  #constant  Strings42StartL   0x2800
005516  000448  #constant  Strings42StartL   0x2800
005517  000449  #constant  Strings5StartH   0x0
005518  000449  #constant  Strings5StartH   0x0
005519  000450  #constant  Strings5StartL   0x2A00
005520  000450  #constant  Strings5StartL   0x2A00
005521  000451  #constant  Strings10StartH   0x0
005522  000451  #constant  Strings10StartH   0x0
005523  000452  #constant  Strings10StartL   0x2C00
005524  000452  #constant  Strings10StartL   0x2C00
005525  000453  #constant  Strings17StartH   0x0
005526  000453  #constant  Strings17StartH   0x0
005527  000454  #constant  Strings17StartL   0x2E00
005528  000454  #constant  Strings17StartL   0x2E00
005529  000455  #constant  Strings13StartH   0x0
005530  000455  #constant  Strings13StartH   0x0
005531  000456  #constant  Strings13StartL   0x3000
005532  000456  #constant  Strings13StartL   0x3000
005533  000457  #constant  Strings14StartH   0x0
005534  000457  #constant  Strings14StartH   0x0
005535  000458  #constant  Strings14StartL   0x3200
005536  000458  #constant  Strings14StartL   0x3200
005537  000459  #constant  Strings15StartH   0x0
005538  000459  #constant  Strings15StartH   0x0
005539  000460  #constant  Strings15StartL   0x3400
005540  000460  #constant  Strings15StartL   0x3400
005541  000461  #constant  Strings18StartH   0x0
005542  000461  #constant  Strings18StartH   0x0
005543  000462  #constant  Strings18StartL   0x3600
005544  000462  #constant  Strings18StartL   0x3600
005545  000463  #constant  Strings19StartH   0x0
005546  000463  #constant  Strings19StartH   0x0
005547  000464  #constant  Strings19StartL   0x3800
005548  000464  #constant  Strings19StartL   0x3800
005549  000465  #constant  Strings20StartH   0x0
005550  000465  #constant  Strings20StartH   0x0
005551  000466  #constant  Strings20StartL   0x3A00
005552  000466  #constant  Strings20StartL   0x3A00
005553  000467  #constant  Strings21StartH   0x0
005554  000467  #constant  Strings21StartH   0x0
005555  000468  #constant  Strings21StartL   0x3C00
005556  000468  #constant  Strings21StartL   0x3C00
005557  000469  #constant  Strings22StartH   0x0
005558  000469  #constant  Strings22StartH   0x0
005559  000470  #constant  Strings22StartL   0x3E00
005560  000470  #constant  Strings22StartL   0x3E00
005561  000471  #constant  Strings27StartH   0x0
005562  000471  #constant  Strings27StartH   0x0
005563  000472  #constant  Strings27StartL   0x4000
005564  000472  #constant  Strings27StartL   0x4000
005565  000473  #constant  Strings28StartH   0x0
005566  000473  #constant  Strings28StartH   0x0
005567  000474  #constant  Strings28StartL   0x4200
005568  000474  #constant  Strings28StartL   0x4200
005569  000475  #constant  Strings46StartH   0x0
005570  000475  #constant  Strings46StartH   0x0
005571  000476  #constant  Strings46StartL   0x4400
005572  000476  #constant  Strings46StartL   0x4400
005573  000477  #constant  Strings6StartH   0x0
005574  000477  #constant  Strings6StartH   0x0
005575  000478  #constant  Strings6StartL   0x4600
005576  000478  #constant  Strings6StartL   0x4600
005577  000479  #constant  Strings29StartH   0x0
005578  000479  #constant  Strings29StartH   0x0
005579  000480  #constant  Strings29StartL   0x4800
005580  000480  #constant  Strings29StartL   0x4800
005581  000481  #constant  Strings31StartH   0x0
005582  000481  #constant  Strings31StartH   0x0
005583  000482  #constant  Strings31StartL   0x4A00
005584  000482  #constant  Strings31StartL   0x4A00
005585  000483  #constant  Strings32StartH   0x0
005586  000483  #constant  Strings32StartH   0x0
005587  000484  #constant  Strings32StartL   0x4C00
005588  000484  #constant  Strings32StartL   0x4C00
005589  000485  #constant  Strings33StartH   0x0
005590  000485  #constant  Strings33StartH   0x0
005591  000486  #constant  Strings33StartL   0x4E00
005592  000486  #constant  Strings33StartL   0x4E00
005593  000487  #constant  Strings35StartH   0x0
005594  000487  #constant  Strings35StartH   0x0
005595  000488  #constant  Strings35StartL   0x5000
005596  000488  #constant  Strings35StartL   0x5000
005597  000489  #constant  Strings38StartH   0x0
005598  000489  #constant  Strings38StartH   0x0
005599  000490  #constant  Strings38StartL   0x5200
005600  000490  #constant  Strings38StartL   0x5200
005601  000491  #constant  Strings47StartH   0x0
005602  000491  #constant  Strings47StartH   0x0
005603  000492  #constant  Strings47StartL   0x5400
005604  000492  #constant  Strings47StartL   0x5400
005605  000493  #constant  Strings43StartH   0x0
005606  000493  #constant  Strings43StartH   0x0
005607  000494  #constant  Strings43StartL   0x5600
005608  000494  #constant  Strings43StartL   0x5600
005609  000495  #constant  Strings11StartH   0x0
005610  000495  #constant  Strings11StartH   0x0
005611  000496  #constant  Strings11StartL   0x5800
005612  000496  #constant  Strings11StartL   0x5800
005613  000497  #constant  Strings45StartH   0x0
005614  000497  #constant  Strings45StartH   0x0
005615  000498  #constant  Strings45StartL   0x5A00
005616  000498  #constant  Strings45StartL   0x5A00
005617  000499  #constant  Strings48StartH   0x0
005618  000499  #constant  Strings48StartH   0x0
005619  000500  #constant  Strings48StartL   0x5C00
005620  000500  #constant  Strings48StartL   0x5C00
005621  000501  #constant  Strings39StartH   0x0
005622  000501  #constant  Strings39StartH   0x0
005623  000502  #constant  Strings39StartL   0x5E00
005624  000502  #constant  Strings39StartL   0x5E00
005625  000503  #constant  Strings44StartH   0x0
005626  000503  #constant  Strings44StartH   0x0
005627  000504  #constant  Strings44StartL   0x6000
005628  000504  #constant  Strings44StartL   0x6000
005629  000505  #constant  Strings49StartH   0x0
005630  000505  #constant  Strings49StartH   0x0
005631  000506  #constant  Strings49StartL   0x6200
005632  000506  #constant  Strings49StartL   0x6200
005633  000507  #IFNOT EXISTS NOGLOBALS
005634  000508  var hndl ;
005635  000509  #ENDIF
005636  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005637  000013  #inherit "CLPrintStrings.inc"
005638  000013  #inherit "CLPrintStrings.inc"
005639  000001  func PrintStrings(var ID, var *msgid, var String)
005640  000002      var StringID, i, ch, offs32[2], res32[2];
005641  000003      StringID := oStringss[1+ID] ;
005642  000004      if (String)
005643  000005          stringsCV[ID] := -1 ;
005644  000006      else
005645  000007          stringsCV[ID] := msgid ;
005646  000008      endif
005647  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005648  000010      txt_FontID(hFonts[ID]) ;
005649  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005650  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005651  000013        
005652  000014      if (*(StringID + Ofs_String_Transparent))
005653  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005654  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005655  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005656  000018      else
005657  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005658  000020          gfx_Clipping(ON) ;
005659  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005660  000022          gfx_Clipping(OFF) ;
005661  000023        
005662  000024      endif
005663  000025        
005664  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005665  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005666  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005667  000029        
005668  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005669  000031        
005670  000032      if (String)
005671  000033          i := 0 ;
005672  000034          ch := msgid[i++] ;
005673  000035          while (ch != 0)
005674  000036              putch(ch) ;
005675  000037              ch := msgid[i++] ;
005676  000038          wend
005677  000039      else
005678  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005679  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005680  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005681  000043          uadd_3232(res32,res32,offs32) ;
005682  000044          file_Seek(hstrings, res32[1], res32[0]);
005683  000045          repeat
005684  000046              if (*(StringID + Ofs_String_Ansi))
005685  000047                  ch := file_GetC(hstrings) ;
005686  000048              else
005687  000049                  ch := file_GetW(hstrings) ;
005688  000050              endif
005689  000051              putch(ch) ;
005690  000052          until (ch == 0) ;
005691  000053      endif
005692  000054        
005693  000055  endfunc
005694  000056        
005695  000014        
005696  000015  #constant IPDatasize 22
005697  000015  #constant IPDatasize 22
005698  000016        
005699  000017  #CONST
005700  000021  #END
005701  000022        
005702  000023  #CONST
005703  000130  #END
005704  000131        
005705  000651  #END
5706  30F0
5707  30F1
5708  30F2
5709  30F3
5710  30F4
5711  30F5
5712  30F6
5713  30F7
5714  30F8
5715  30F9
5716  30FA
5717  30FB
5718  30FC
5719  30FD
5720  30FE
5721  30FF
5722  3100
5723  3101
5724  3102
5725  3103
5726  3104
5727  3105
5728  3106
5729  3107
5730  3108
5731  3109
5732  310A
5733  310B
5734  310C
5735  310D
5736  310E
5737  310F
5738  3110
5739  3111
5740  3112
5741  3113
5742  3114
5743  3115
5744  3116
5745  3117
5746  3118
5747  3119
5748  311A
5749  311B
5750  311C
5751  311D
5752  311E
5753  311F
5754  3120
5755  3121
5756  3122
5757  3123
5758  3124
5759  3125
5760  3126
5761  3127
5762  3128
5763  3129
5764  312A
5765  312B
5766  312C
5767  312D
5768  312E
5769  312F
5770  3130
5771  3131
5772  3132
5773  3133
5774  3134
5775  3135
5776  3136
5777  3137
5778  3138
5779  3139
5780  313A
5781  313B
5782  313C
5783  313D
5784  313E
5785  313F
5786  3140
5787  3141
5788  3142
5789  3143
5790  3144
5791  3145
5792  3146
5793  3147
5794  3148
5795  3149
5796  314A
5797  314B
5798  314C
5799  314D
5800  314E
5801  314F
5802  3150
5803  3151
5804  3152
5805  3153
5806  3154
5807  3155
5808  3156
5809  3157
5810  3158
5811  3159
5812  315A
5813  315B
5814  315C
5815  315D
5816  315E
5817  315F
5818  3160
5819  3161
5820  3162
5821  3163
5822  3164
5823  3165
5824  3166
5825  3167
5826  3168
5827  3169
5828  316A
5829  316B
5830  316C
5831  316D
5832  316E
5833  316F
5834  3170
5835  3171
5836  3172
5837  3173
5838  3174
5839  3175
5840  3176
5841  3177
5842  3178
5843  3179
5844  317A
5845  317B
5846  317C
5847  317D
5848  317E
5849  317F
5850  3180
5851  3181
5852  3182
5853  3183
5854  3184
5855  3185
5856  3186
5857  3187
5858  3188
5859  3189
5860  318A
5861  318B
5862  318C
5863  318D
5864  318E
5865  318F
5866  3190
5867  3191
5868  3192
5869  3193
5870  3194
5871  3195
5872  3196
5873  3197
5874  3198
5875  3199
5876  319A
5877  319B
5878  319C
5879  319D
5880  319E
5881  319F
5882  31A0
5883  31A1
5884  31A2
5885  31A3
5886  31A4
5887  31A5
5888  31A6
5889  31A7
5890  31A8
5891  31A9
5892  31AA
5893  31AB
5894  31AC
5895  31AD
5896  31AE
5897  31AF
5898  31B0
5899  31B1
5900  31B2
5901  31B3
5902  31B4
5903  31B5
5904  31B6
5905  31B7
5906  31B8
5907  31B9
5908  31BA
5909  31BB
5910  31BC
5911  31BD
5912  31BE
5913  31BF
5914  31C0
5915  31C1
5916  31C2
5917  31C3
5918  31C4
5919  31C5
5920  31C6
5921  31C7
5922  31C8
5923  31C9
5924  31CA
5925  31CB
5926  31CC
5927  31CD
5928  31CE
5929  31CF
5930  31D0
5931  31D1
5932  31D2
5933  31D3
5934  31D4
5935  31D5
5936  31D6
5937  31D7
5938  31D8
5939  31D9
5940  31DA
5941  31DB
5942  31DC
5943  31DD
5944  31DE
5945  31DF
5946  31E0
5947  31E1
5948  31E2
5949  31E3
5950  31E4
5951  31E5
5952  31E6
5953  31E7
5954  31E8
5955  31E9
5956  31EA
5957  31EB
5958  31EC
5959  31ED
5960  31EE
5961  31EF
5962  31F0
5963  31F1
5964  31F2
5965  31F3
5966  31F4
5967  31F5
5968  31F6
5969  31F7
5970  31F8
5971  31F9
5972  31FA
5973  31FB
5974  31FC
5975  31FD
5976  31FE
5977  31FF
5978  3200
5979  3201
5980  3202
5981  3203
5982  3204
5983  3205
5984  3206
5985  3207
5986  3208
5987  3209
5988  320A
5989  320B
5990  320C
5991  320D
5992  320E
5993  320F
5994  3210
5995  3211
5996  3212
5997  3213
5998  3214
5999  3215
6000  3216
6001  3217
6002  3218
6003  3219
6004  321A
6005  321B
6006  321C
6007  321D
6008  321E
6009  321F
6010  3220
6011  3221
6012  3222
6013  3223
6014  3224
6015  3225
6016  3226
6017  3227
6018  3228
6019  3229
6020  322A
6021  322B
6022  322C
6023  322D
6024  322E
6025  322F
6026  3230
6027  3231
6028  3232
6029  3233
6030  3234
6031  3235
6032  3236
6033  3237
6034  3238
6035  3239
6036  323A
6037  323B
6038  323C
6039  323D
6040  323E
6041  323F
6042  3240
6043  3241
6044  3242
6045  3243
6046  3244
6047  3245
6048  3246
6049  3247
6050  3248
6051  3249
6052  324A
6053  324B
6054  324C
6055  324D
6056  324E
6057  324F
6058  3250
6059  3251
6060  3252
6061  3253
6062  3254
6063  3255
6064  3256
6065  3257
6066  3258
6067  3259
6068  325A
6069  325B
6070  325C
6071  325D
6072  325E
6073  325F
6074  3260
6075  3261
6076  3262
6077  3263
6078  3264
6079  3265
6080  3266
6081  3267
6082  3268
6083  3269
6084  326A
6085  326B
6086  326C
6087  326D
6088  326E
6089  326F
6090  3270
6091  3271
6092  3272
6093  3273
6094  3274
6095  3275
6096  3276
6097  3277
6098  3278
6099  3279
6100  327A
6101  327B
6102  327C
6103  327D
6104  327E
6105  327F
6106  3280
6107  3281
6108  3282
6109  3283
6110  3284
6111  3285
6112  3286
6113  3287
6114  3288
6115  3289
6116  328A
6117  328B
6118  328C
6119  328D
6120  328E
6121  328F
6122  3290
6123  3291
6124  3292
6125  3293
6126  3294
6127  3295
6128  3296
6129  3297
6130  3298
6131  3299
6132  329A
6133  329B
6134  329C
6135  329D
6136  329E
6137  329F
6138  32A0
6139  32A1
6140  32A2
6141  32A3
6142  32A4
6143  32A5
6144  32A6
6145  32A7
6146  32A8
6147  32A9
6148  32AA
6149  32AB
6150  32AC
6151  32AD
6152  32AE
6153  32AF
6154  32B0
6155  32B1
6156  32B2
6157  32B3
6158  32B4
6159  32B5
6160  32B6
6161  32B7
6162  32B8
6163  32B9
6164  32BA
6165  32BB
6166  32BC
6167  32BD
6168  32BE
6169  32BF
6170  32C0
6171  32C1
6172  32C2
6173  32C3
6174  32C4
6175  32C5
6176  32C6
6177  32C7
6178  32C8
6179  32C9
6180  32CA
6181  32CB
6182  32CC
6183  32CD
6184  32CE
6185  32CF
6186  32D0
6187  32D1
6188  32D2
6189  32D3
6190  32D4
6191  32D5
6192  32D6
6193  32D7
6194  32D8
6195  32D9
6196  32DA
6197  32DB
6198  32DC
6199  32DD
6200  32DE
6201  32DF
6202  32E0
6203  32E1
6204  32E2
6205  32E3
6206  32E4
6207  32E5
6208  32E6
6209  32E7
6210  32E8
6211  32E9
6212  32EA
6213  32EB
6214  32EC
6215  32ED
6216  32EE
6217  32EF
6218  32F0
6219  32F1
6220  32F2
6221  32F3
6222  32F4
6223  32F5
6224  32F6
6225  32F7
6226  32F8
6227  32F9
6228  32FA
6229  32FB
6230  32FC
6231  32FD
6232  32FE
6233  32FF
6234  3300
6235  3301
6236  3302
6237  3303
6238  3304
6239  3305
6240  3306
6241  3307
6242  3308
6243  3309
6244  330A
6245  330B
6246  330C
6247  330D
6248  330E
6249  330F
6250  3310
6251  3311
6252  3312
6253  3313
6254  3314
6255  3315
6256  3316
6257  3317
6258  3318
6259  3319
6260  331A
6261  331B
6262  331C
6263  331D
6264  331E
6265  331F
6266  3320
6267  3321
6268  3322
6269  3323
6270  3324
6271  3325
6272  3326
6273  3327
6274  3328
6275  3329
6276  332A
6277  332B
6278  332C
6279  332D
6280  332E
6281  332F
6282  3330
6283  3331
6284  3332
6285  3333
6286  3334
6287  3335
6288  3336
6289  3337
6290  3338
6291  3339
6292  333A
6293  333B
6294  333C
6295  333D
6296  333E
6297  333F
6298  3340
6299  3341
6300  3342
6301  3343
6302  3344
6303  3345
6304  3346
6305  3347
6306  3348
6307  3349
6308  334A
6309  334B
6310  334C
6311  334D
6312  334E
6313  334F
6314  3350
6315  3351
6316  3352
6317  3353
6318  3354
6319  3355
6320  3356
6321  3357
6322  3358
6323  3359
6324  335A
6325  335B
6326  335C
6327  335D
6328  335E
6329  335F
6330  3360
6331  3361
6332  3362
6333  3363
6334  3364
6335  3365
6336  3366
6337  3367
6338  3368
6339  3369
6340  336A
6341  336B
6342  336C
6343  336D
6344  336E
6345  336F
6346  3370
6347  3371
6348  3372
6349  3373
6350  3374
6351  3375
6352  3376
6353  3377
6354  3378
6355  3379
6356  337A
6357  337B
6358  337C
6359  337D
6360  337E
6361  337F
6362  3380
6363  3381
6364  3382
6365  3383
6366  3384
6367  3385
6368  3386
6369  3387
6370  3388
6371  3389
6372  338A
6373  338B
6374  338C
6375  338D
6376  338E
6377  338F
6378  3390
6379  3391
6380  3392
6381  3393
6382  3394
6383  3395
6384  3396
6385  3397
6386  3398
6387  3399
6388  339A
6389  339B
6390  339C
6391  339D
6392  339E
6393  339F
6394  33A0
6395  33A1
6396  33A2
6397  33A3
6398  33A4
6399  33A5
6400  33A6
6401  33A7
6402  33A8
6403  33A9
6404  33AA
6405  33AB
6406  33AC
6407  33AD
6408  33AE
6409  33AF
6410  33B0
6411  33B1
6412  33B2
6413  33B3
6414  33B4
6415  33B5
6416  33B6
6417  33B7
6418  33B8
6419  33B9
6420  33BA
6421  33BB
6422  33BC
6423  33BD
6424  33BE
6425  33BF
6426  33C0
6427  33C1
6428  33C2
6429  33C3
6430  33C4
6431  33C5
6432  33C6
6433  33C7
6434  33C8
6435  33C9
6436  33CA
6437  33CB
6438  33CC
6439  33CD
6440  33CE
6441  33CF
6442  33D0
6443  33D1
6444  33D2
6445  33D3
6446  33D4
6447  33D5
6448  33D6
6449  33D7
6450  33D8
6451  33D9
6452  33DA
6453  33DB
6454  33DC
6455  33DD
6456  33DE
6457  33DF
6458  33E0
6459  33E1
6460  33E2
6461  33E3
6462  33E4
6463  33E5
6464  33E6
6465  33E7
6466  33E8
6467  33E9
6468  33EA
6469  33EB
6470  33EC
6471  33ED
6472  33EE
6473  33EF
6474  33F0
6475  33F1
6476  33F2
6477  33F3
6478  33F4
6479  33F5
6480  33F6
6481  33F7
6482  33F8
6483  33F9
6484  33FA
6485  33FB
6486  33FC
6487  33FD
6488  33FE
6489  33FF
6490  3400
6491  3401
6492  3402
6493  3403
6494  3404
6495  3405
6496  3406
6497  3407
6498  3408
6499  3409
6500  340A
6501  340B
6502  340C
6503  340D
6504  340E
6505  340F
6506  3410
6507  3411
6508  3412
6509  3413
6510  3414
6511  3415
6512  3416
6513  3417
6514  3418
6515  3419
6516  341A
6517  341B
6518  341C
6519  341D
6520  341E
6521  341F
6522  3420
6523  3421
6524  3422
6525  3423
6526  3424
6527  3425
6528  3426
6529  3427
6530  3428
6531  3429
6532  342A
6533  342B
6534  342C
6535  342D
6536  342E
6537  342F
6538  3430
6539  3431
6540  3432
6541  3433
6542  3434
6543  3435
6544  3436
6545  3437
6546  3438
6547  3439
6548  343A
6549  343B
6550  343C
6551  343D
6552  343E
6553  343F
6554  3440
6555  3441
6556  3442
6557  3443
6558  3444
6559  3445
6560  3446
6561  3447
6562  3448
6563  3449
6564  344A
6565  344B
6566  344C
6567  344D
6568  344E
6569  344F
6570  3450
6571  3451
6572  3452
6573  3453
6574  3454
6575  3455
6576  3456
6577  3457
6578  3458
6579  3459
6580  345A
6581  345B
6582  345C
6583  345D
6584  345E
6585  345F
6586  3460
6587  3461
6588  3462
6589  3463
6590  3464
6591  3465
6592  3466
6593  3467
6594  3468
6595  3469
6596  346A
6597  346B
6598  346C
6599  346D
6600  346E
6601  346F
6602  3470
6603  3471
6604  3472
6605  3473
6606  3474
6607  3475
6608  3476
6609  3477
6610  3478
6611  3479
6612  347A
6613  347B
6614  347C
6615  347D
6616  347E
6617  347F
6618  3480
6619  3481
6620  3482
6621  3483
6622  3484
6623  3485
6624  3486
6625  3487
6626  3488
6627  3489
6628  348A
6629  348B
6630  348C
6631  348D
6632  348E
6633  348F
6634  3490
6635  3491
6636  3492
6637  3493
6638  3494
6639  3495
6640  3496
6641  3497
6642  3498
6643  3499
6644  349A
6645  349B
6646  349C
6647  349D
6648  349E
6649  349F
6650  34A0
6651  34A1
6652  34A2
6653  34A3
6654  34A4
6655  34A5
6656  34A6
6657  34A7
6658  34A8
6659  34A9
6660  34AA
6661  34AB
6662  34AC
6663  34AD
6664  34AE
6665  34AF
6666  34B0
6667  34B1
6668  34B2
6669  34B3
6670  34B4
6671  34B5
6672  34B6
6673  34B7
6674  34B8
6675  34B9
6676  34BA
6677  34BB
6678  34BC
6679  34BD
6680  34BE
6681  34BF
6682  34C0
6683  34C1
6684  34C2
6685  34C3
6686  34C4
6687  34C5
6688  34C6
6689  34C7
6690  34C8
6691  34C9
6692  34CA
6693  34CB
6694  34CC
6695  34CD
6696  34CE
6697  34CF
6698  34D0
6699  34D1
6700  34D2
6701  34D3
6702  34D4
6703  34D5
6704  34D6
6705  34D7
6706  34D8
6707  34D9
6708  34DA
6709  34DB
6710  34DC
6711  34DD
6712  34DE
6713  34DF
6714  34E0
6715  34E1
6716  34E2
6717  34E3
6718  34E4
6719  34E5
6720  34E6
6721  34E7
6722  34E8
6723  34E9
6724  34EA
6725  34EB
6726  34EC
6727  34ED
6728  34EE
6729  34EF
6730  34F0
6731  34F1
6732  34F2
6733  34F3
6734  34F4
6735  34F5
6736  34F6
6737  34F7
6738  34F8
6739  34F9
6740  34FA
6741  34FB
6742  34FC
6743  34FD
6744  34FE
6745  34FF
6746  3500
6747  3501
6748  3502
6749  3503
6750  3504
6751  3505
6752  3506
6753  3507
6754  3508
6755  3509
6756  350A
6757  350B
6758  350C
6759  350D
6760  350E
6761  350F
6762  3510
6763  3511
6764  3512
6765  3513
6766  3514
6767  3515
6768  3516
6769  3517
6770  3518
6771  3519
6772  351A
6773  351B
6774  351C
6775  351D
6776  351E
6777  351F
6778  3520
6779  3521
6780  3522
6781  3523
6782  3524
6783  3525
6784  3526
6785  3527
6786  3528
6787  3529
6788  352A
6789  352B
6790  352C
6791  352D
6792  352E
6793  352F
6794  3530
6795  3531
6796  3532
6797  3533
6798  3534
6799  3535
6800  3536
6801  3537
6802  3538
6803  3539
6804  353A
6805  353B
6806  353C
6807  353D
6808  353E
6809  353F
6810  3540
6811  3541
6812  3542
6813  3543
6814  3544
6815  3545
6816  3546
6817  3547
6818  3548
6819  3549
6820  354A
6821  354B
6822  354C
6823  354D
6824  354E
6825  354F
6826  3550
6827  3551
6828  3552
6829  3553
6830  3554
6831  3555
6832  3556
6833  3557
6834  3558
6835  3559
6836  355A
6837  355B
6838  355C
6839  355D
6840  355E
6841  355F
6842  3560
6843  3561
6844  3562
6845  3563
6846  3564
6847  3565
6848  3566
6849  3567
6850  3568
6851  3569
6852  356A
6853  356B
6854  356C
6855  356D
6856  356E
6857  356F
6858  3570
6859  3571
6860  3572
6861  3573
6862  3574
6863  3575
6864  3576
6865  3577
6866  3578
6867  3579
6868  357A
6869  357B
6870  357C
6871  357D
6872  357E
6873  357F
6874  3580
6875  3581
6876  3582
6877  3583
6878  3584
6879  3585
6880  3586
6881  3587
6882  3588
6883  3589
6884  358A
6885  358B
6886  358C
6887  358D
6888  358E
6889  358F
6890  3590
6891  3591
6892  3592
6893  3593
6894  3594
6895  3595
6896  3596
6897  3597
6898  3598
6899  3599
6900  359A
6901  359B
6902  359C
6903  359D
6904  359E
6905  359F
6906  35A0
6907  35A1
6908  35A2
6909  35A3
6910  35A4
6911  35A5
6912  35A6
6913  35A7
6914  35A8
6915  35A9
6916  35AA
6917  35AB
6918  35AC
6919  35AD
6920  35AE
6921  35AF
6922  35B0
6923  35B1
6924  35B2
6925  35B3
6926  35B4
6927  35B5
6928  35B6
6929  35B7
6930  35B8
6931  35B9
6932  35BA
6933  35BB
6934  35BC
6935  35BD
6936  35BE
6937  35BF
6938  35C0
6939  35C1
6940  35C2
6941  35C3
6942  35C4
6943  35C5
6944  35C6
6945  35C7
6946  35C8
6947  35C9
6948  35CA
6949  35CB
6950  35CC
6951  35CD
6952  35CE
6953  35CF
6954  35D0
6955  35D1
6956  35D2
6957  35D3
6958  35D4
6959  35D5
6960  35D6
6961  35D7
6962  35D8
6963  35D9
6964  35DA
6965  35DB
6966  35DC
6967  35DD
6968  35DE
6969  35DF
6970  35E0
6971  35E1
6972  35E2
6973  35E3
6974  35E4
6975  35E5
6976  35E6
6977  35E7
6978  35E8
6979  35E9
6980  35EA
6981  35EB
6982  35EC
6983  35ED
6984  35EE
6985  35EF
6986  35F0
6987  35F1
6988  35F2
6989  35F3
6990  35F4
6991  35F5
6992  35F6
6993  35F7
6994  35F8
6995  35F9
6996  35FA
6997  35FB
6998  35FC
6999  35FD
7000  35FE
7001  35FF
7002  3600
7003  3601
7004  3602
7005  3603
7006  3604
7007  3605
7008  3606
7009  3607
7010  3608
7011  3609
7012  360A
7013  360B
7014  360C
7015  360D
7016  360E
7017  360F
7018  3610
7019  3611
7020  3612
7021  3613
7022  3614
7023  3615
7024  3616
7025  3617
7026  3618
7027  3619
7028  361A
7029  361B
7030  361C
7031  361D
7032  361E
7033  361F
7034  3620
7035  3621
7036  3622
7037  3623
7038  3624
7039  3625
7040  3626
7041  3627
7042  3628
7043  3629
7044  362A
7045  362B
7046  362C
7047  362D
7048  362E
7049  362F
7050  3630
7051  3631
7052  3632
7053  3633
7054  3634
7055  3635
7056  3636
7057  3637
7058  3638
7059  3639
7060  363A
7061  363B
7062  363C
7063  363D
7064  363E
7065  363F
7066  3640
7067  3641
7068  3642
7069  3643
7070  3644
7071  3645
7072  3646
7073  3647
7074  3648
7075  3649
7076  364A
7077  364B
7078  364C
7079  364D
7080  364E
7081  364F
7082  3650
7083  3651
7084  3652
7085  3653
7086  3654
7087  3655
7088  3656
7089  3657
7090  3658
7091  3659
7092  365A
7093  365B
7094  365C
7095  365D
7096  365E
7097  365F
7098  3660
7099  3661
7100  3662
7101  3663
7102  3664
7103  3665
7104  3666
7105  3667
7106  3668
7107  3669
7108  366A
7109  366B
7110  366C
7111  366D
7112  366E
7113  366F
7114  3670
7115  3671
7116  3672
7117  3673
7118  3674
7119  3675
7120  3676
7121  3677
7122  3678
7123  3679
7124  367A
7125  367B
7126  367C
7127  367D
7128  367E
7129  367F
7130  3680
7131  3681
7132  3682
7133  3683
7134  3684
7135  3685
7136  3686
7137  3687
7138  3688
7139  3689
7140  368A
7141  368B
7142  368C
7143  368D
7144  368E
7145  368F
7146  3690
7147  3691
7148  3692
7149  3693
7150  3694
7151  3695
7152  3696
7153  3697
7154  3698
7155  3699
7156  369A
7157  369B
7158  369C
7159  369D
7160  369E
7161  369F
7162  36A0
7163  36A1
7164  36A2
7165  36A3
7166  36A4
7167  36A5
7168  36A6
7169  36A7
7170  36A8
7171  36A9
7172  36AA
7173  36AB
7174  36AC
7175  36AD
7176  36AE
7177  36AF
7178  36B0
7179  36B1
7180  36B2
7181  36B3
7182  36B4
7183  36B5
7184  36B6
7185  36B7
7186  36B8
7187  36B9
7188  36BA
7189  36BB
7190  36BC
7191  36BD
7192  36BE
7193  36BF
7194  36C0
7195  36C1
7196  36C2
7197  36C3
7198  36C4
7199  36C5
7200  36C6
7201  36C7
7202  36C8
7203  36C9
7204  36CA
7205  36CB
7206  36CC
7207  36CD
7208  36CE
7209  36CF
7210  36D0
7211  36D1
7212  36D2
7213  36D3
7214  36D4
7215  36D5
7216  36D6
7217  36D7
7218  36D8
7219  36D9
7220  36DA
7221  36DB
7222  36DC
7223  36DD
7224  36DE
7225  36DF
7226  36E0
7227  36E1
7228  36E2
7229  36E3
7230  36E4
7231  36E5
7232  36E6
7233  36E7
7234  36E8
7235  36E9
7236  36EA
7237  36EB
7238  36EC
7239  36ED
7240  36EE
7241  36EF
7242  36F0
7243  36F1
7244  36F2
7245  36F3
7246  36F4
7247  36F5
7248  36F6
7249  36F7
7250  36F8
7251  36F9
7252  36FA
7253  36FB
7254  36FC
7255  36FD
7256  36FE
7257  36FF
7258  3700
7259  3701
7260  3702
7261  3703
7262  3704
7263  3705
7264  3706
7265  3707
7266  3708
7267  3709
7268  370A
7269  370B
7270  370C
7271  370D
7272  370E
7273  370F
7274  3710
7275  3711
7276  3712
7277  3713
7278  3714
7279  3715
7280  3716
7281  3717
7282  3718
7283  3719
7284  371A
7285  371B
7286  371C
7287  371D
7288  371E
7289  371F
7290  3720
7291  3721
7292  3722
7293  3723
7294  3724
7295  3725
7296  3726
7297  3727
7298  3728
7299  3729
7300  372A
7301  372B
7302  372C
7303  372D
7304  372E
7305  372F
7306  3730
7307  3731
7308  3732
7309  3733
7310  3734
7311  3735
7312  3736
7313  3737
7314  3738
7315  3739
7316  373A
7317  373B
7318  373C
7319  373D
7320  373E
7321  373F
7322  3740
7323  3741
7324  3742
7325  3743
7326  3744
7327  3745
7328  3746
7329  3747
7330  3748
7331  3749
7332  374A
7333  374B
7334  374C
7335  374D
7336  374E
7337  374F
7338  3750
7339  3751
7340  3752
7341  3753
7342  3754
7343  3755
7344  3756
7345  3757
7346  3758
7347  3759
7348  375A
7349  375B
7350  375C
7351  375D
7352  375E
7353  375F
7354  3760
7355  3761
7356  3762
7357  3763
7358  3764
7359  3765
7360  3766
7361  3767
7362  3768
7363  3769
7364  376A
7365  376B
7366  376C
7367  376D
7368  376E
7369  376F
7370  3770
7371  3771
7372  3772
7373  3773
7374  3774
7375  3775
7376  3776
7377  3777
7378  3778
7379  3779
7380  377A
7381  377B
7382  377C
7383  377D
7384  377E
7385  377F
7386  3780
7387  3781
7388  3782
7389  3783
7390  3784
7391  3785
7392  3786
7393  3787
7394  3788
7395  3789
7396  378A
7397  378B
7398  378C
7399  378D
7400  378E
7401  378F
7402  3790
7403  3791
7404  3792
7405  3793
7406  3794
7407  3795
7408  3796
7409  3797
7410  3798
7411  3799
7412  379A
7413  379B
7414  379C
7415  379D
7416  379E
7417  379F
7418  37A0
7419  37A1
7420  37A2
7421  37A3
7422  37A4
7423  37A5
7424  37A6
7425  37A7
7426  37A8
7427  37A9
7428  37AA
7429  37AB
7430  37AC
7431  37AD
7432  37AE
7433  37AF
7434  37B0
7435  37B1
7436  37B2
7437  37B3
7438  37B4
7439  37B5
7440  37B6
7441  37B7
7442  37B8
7443  37B9
7444  37BA
7445  37BB
7446  37BC
7447  37BD
7448  37BE
7449  37BF
7450  37C0
7451  37C1
7452  37C2
7453  37C3
7454  37C4
7455  37C5
7456  37C6
7457  37C7
7458  37C8
7459  37C9
7460  37CA
7461  37CB
7462  37CC
7463  37CD
7464  37CE
7465  37CF
7466  37D0
7467  37D1
7468  37D2
7469  37D3
7470  37D4
7471  37D5
7472  37D6
7473  37D7
7474  37D8
7475  37D9
7476  37DA
7477  37DB
7478  37DC
7479  37DD
7480  37DE
7481  37DF
7482  37E0
7483  37E1
7484  37E2
7485  37E3
7486  37E4
7487  37E5
7488  37E6
7489  37E7
7490  37E8
7491  37E9
7492  37EA
7493  37EB
7494  37EC
7495  37ED
7496  37EE
7497  37EF
7498  37F0
7499  37F1
7500  37F2
7501  37F3
7502  37F4
7503  37F5
7504  37F6
7505  37F7
7506  37F8
7507  37F9
7508  37FA
7509  37FB
7510  37FC
7511  37FD
7512  37FE
7513  37FF
7514  3800
7515  3801
7516  3802
7517  3803
7518  3804
7519  3805
7520  3806
7521  3807
7522  3808
7523  3809
7524  380A
7525  380B
7526  380C
7527  380D
7528  380E
7529  380F
7530  3810
7531  3811
7532  3812
7533  3813
7534  3814
7535  3815
7536  3816
7537  3817
7538  3818
7539  3819
7540  381A
7541  381B
7542  381C
7543  381D
7544  381E
7545  381F
7546  3820
7547  3821
7548  3822
7549  3823
7550  3824
7551  3825
7552  3826
7553  3827
7554  3828
7555  3829
7556  382A
7557  382B
7558  382C
7559  382D
7560  382E
7561  382F
7562  3830
7563  3831
7564  3832
7565  3833
7566  3834
7567  3835
7568  3836
7569  3837
7570  3838
7571  3839
7572  383A
7573  383B
7574  383C
7575  383D
7576  383E
7577  383F
7578  3840
7579  3841
7580  3842
7581  3843
7582  3844
7583  3845
7584  3846
7585  3847
7586  3848
7587  3849
7588  384A
7589  384B
7590  384C
7591  384D
7592  384E
7593  384F
7594  3850
7595  3851
7596  3852
7597  3853
7598  3854
7599  3855
7600  3856
7601  3857
7602  3858
7603  3859
7604  385A
7605  385B
7606  385C
7607  385D
7608  385E
7609  385F
7610  3860
7611  3861
7612  3862
7613  3863
7614  3864
7615  3865
7616  3866
7617  3867
7618  3868
7619  3869
7620  386A
7621  386B
7622  386C
7623  386D
7624  386E
7625  386F
7626  3870
7627  3871
7628  3872
7629  3873
7630  3874
7631  3875
7632  3876
7633  3877
7634  3878
7635  3879
7636  387A
7637  387B
7638  387C
7639  387D
7640  387E
7641  387F
7642  3880
7643  3881
7644  3882
7645  3883
7646  3884
7647  3885
7648  3886
7649  3887
7650  3888
7651  3889
7652  388A
7653  388B
7654  388C
7655  388D
7656  388E
7657  388F
7658  3890
7659  3891
7660  3892
7661  3893
7662  3894
7663  3895
7664  3896
7665  3897
7666  3898
7667  3899
7668  389A
7669  389B
7670  389C
7671  389D
7672  389E
7673  389F
7674  38A0
7675  38A1
7676  38A2
7677  38A3
7678  38A4
7679  38A5
7680  38A6
7681  38A7
7682  38A8
7683  38A9
7684  38AA
7685  38AB
7686  38AC
7687  38AD
7688  38AE
7689  38AF
7690  38B0
7691  38B1
7692  38B2
7693  38B3
7694  38B4
7695  38B5
7696  38B6
7697  38B7
7698  38B8
7699  38B9
7700  38BA
7701  38BB
7702  38BC
7703  38BD
7704  38BE
7705  38BF
7706  38C0
7707  38C1
7708  38C2
7709  38C3
7710  38C4
7711  38C5
7712  38C6
7713  38C7
7714  38C8
7715  38C9
7716  38CA
7717  38CB
7718  38CC
7719  38CD
7720  38CE
7721  38CF
7722  38D0
7723  38D1
7724  38D2
7725  38D3
7726  38D4
7727  38D5
7728  38D6
7729  38D7
7730  38D8
7731  38D9
7732  38DA
7733  38DB
7734  38DC
7735  38DD
7736  38DE
7737  38DF
7738  38E0
7739  38E1
7740  38E2
7741  38E3
7742  38E4
7743  38E5
7744  38E6
7745  38E7
7746  38E8
7747  38E9
7748  38EA
7749  38EB
7750  38EC
7751  38ED
7752  38EE
7753  38EF
7754  38F0
7755  38F1
7756  38F2
7757  38F3
7758  38F4
7759  38F5
7760  38F6
7761  38F7
7762  38F8
7763  38F9
7764  38FA
7765  38FB
7766  38FC
7767  38FD
7768  38FE
7769  38FF
7770  3900
7771  3901
7772  3902
7773  3903
7774  3904
7775  3905
7776  3906
7777  3907
7778  3908
7779  3909
7780  390A
7781  390B
7782  390C
7783  390D
7784  390E
7785  390F
7786  3910
7787  3911
7788  3912
7789  3913
7790  3914
7791  3915
7792  3916
7793  3917
7794  3918
7795  3919
7796  391A
7797  391B
7798  391C
7799  391D
7800  391E
7801  391F
7802  3920
7803  3921
7804  3922
7805  3923
7806  3924
7807  3925
7808  3926
7809  3927
7810  3928
7811  3929
7812  392A
7813  392B
7814  392C
7815  392D
7816  392E
7817  392F
7818  3930
7819  3931
7820  3932
7821  3933
7822  3934
7823  3935
7824  3936
7825  3937
7826  3938
7827  3939
7828  393A
7829  393B
7830  393C
7831  393D
7832  393E
7833  393F
7834  3940
7835  3941
7836  3942
7837  3943
7838  3944
7839  3945
7840  3946
7841  3947
7842  3948
7843  3949
7844  394A
7845  394B
7846  394C
7847  394D
7848  394E
7849  394F
7850  3950
7851  3951
7852  3952
7853  3953
7854  3954
7855  3955
7856  3956
7857  3957
7858  3958
7859  3959
7860  395A
7861  395B
7862  395C
7863  395D
7864  395E
7865  395F
7866  3960
7867  3961
7868  3962
7869  3963
7870  3964
7871  3965
7872  3966
7873  3967
7874  3968
7875  3969
7876  396A
7877  396B
7878  396C
7879  396D
7880  396E
7881  396F
7882  3970
7883  3971
7884  3972
7885  3973
7886  3974
7887  3975
7888  3976
7889  3977
7890  3978
7891  3979
7892  397A
7893  397B
7894  397C
7895  397D
7896  397E
7897  397F
7898  3980
7899  3981
7900  3982
7901  3983
7902  3984
7903  3985
7904  3986
7905  3987
7906  3988
7907  3989
7908  398A
7909  398B
7910  398C
7911  398D
7912  398E
7913  398F
7914  3990
7915  3991
7916  3992
7917  3993
7918  3994
7919  3995
7920  3996
7921  3997
7922  3998
7923  3999
7924  399A
7925  399B
7926  399C
7927  399D
7928  399E
7929  399F
7930  39A0
7931  39A1
7932  39A2
7933  39A3
7934  39A4
7935  39A5
7936  39A6
7937  39A7
7938  39A8
7939  39A9
7940  39AA
7941  39AB
7942  39AC
7943  39AD
7944  39AE
7945  39AF
7946  39B0
7947  39B1
7948  39B2
7949  39B3
7950  39B4
7951  39B5
7952  39B6
7953  39B7
7954  39B8
7955  39B9
7956  39BA
7957  39BB
7958  39BC
7959  39BD
7960  39BE
7961  39BF
7962  39C0
7963  39C1
7964  39C2
7965  39C3
7966  39C4
7967  39C5
7968  39C6
7969  39C7
7970  39C8
7971  39C9
7972  39CA
7973  39CB
7974  39CC
7975  39CD
7976  39CE
7977  39CF
7978  39D0
7979  39D1
7980  39D2
7981  39D3
7982  39D4
7983  39D5
7984  39D6
7985  39D7
7986  39D8
7987  39D9
7988  39DA
7989  39DB
7990  39DC
7991  39DD
7992  39DE
7993  39DF
7994  39E0
7995  39E1
7996  39E2
7997  39E3
7998  39E4
7999  39E5
8000  39E6
8001  39E7
8002  39E8
8003  39E9
8004  39EA
8005  39EB
8006  39EC
8007  39ED
8008  39EE
8009  39EF
8010  39F0
8011  39F1
8012  39F2
8013  39F3
8014  39F4
8015  39F5
8016  39F6
8017  39F7
8018  39F8
8019  39F9
8020  39FA
8021  39FB
8022  39FC
8023  39FD
8024  39FE
8025  39FF
8026  3A00
8027  3A01
8028  3A02
8029  3A03
8030  3A04
8031  3A05
8032  3A06
8033  3A07
8034  3A08
8035  3A09
8036  3A0A
8037  3A0B
8038  3A0C
8039  3A0D
8040  3A0E
8041  3A0F
8042  3A10
8043  3A11
8044  3A12
8045  3A13
8046  3A14
8047  3A15
8048  3A16
8049  3A17
8050  3A18
8051  3A19
8052  3A1A
8053  3A1B
8054  3A1C
8055  3A1D
8056  3A1E
8057  3A1F
8058  3A20
8059  3A21
8060  3A22
8061  3A23
8062  3A24
8063  3A25
8064  3A26
8065  3A27
8066  3A28
8067  3A29
8068  3A2A
8069  3A2B
8070  3A2C
8071  3A2D
8072  3A2E
8073  3A2F
8074  3A30
8075  3A31
8076  3A32
8077  3A33
8078  3A34
8079  3A35
8080  3A36
8081  3A37
8082  3A38
8083  3A39
8084  3A3A
8085  3A3B
8086  3A3C
8087  3A3D
8088  3A3E
8089  3A3F
8090  3A40
8091  3A41
8092  3A42
8093  3A43
8094  3A44
8095  3A45
8096  3A46
8097  3A47
8098  3A48
8099  3A49
8100  3A4A
8101  3A4B
8102  3A4C
8103  3A4D
8104  3A4E
8105  3A4F
8106  3A50
8107  3A51
8108  3A52
8109  3A53
8110  3A54
8111  3A55
8112  3A56
8113  3A57
8114  3A58
8115  3A59
8116  3A5A
8117  3A5B
8118  3A5C
8119  3A5D
8120  3A5E
8121  3A5F
8122  3A60
8123  3A61
8124  3A62
8125  3A63
8126  3A64
8127  3A65
8128  3A66
8129  3A67
8130  3A68
8131  3A69
8132  3A6A
8133  3A6B
8134  3A6C
8135  3A6D
8136  3A6E
8137  3A6F
8138  3A70
8139  3A71
8140  3A72
8141  3A73
8142  3A74
8143  3A75
8144  3A76
8145  3A77
8146  3A78
8147  3A79
8148  3A7A
8149  3A7B
8150  3A7C
8151  3A7D
8152  3A7E
8153  3A7F
8154  3A80
8155  3A81
8156  3A82
8157  3A83
8158  3A84
8159  3A85
8160  3A86
8161  3A87
8162  3A88
8163  3A89
8164  3A8A
8165  3A8B
8166  3A8C
8167  3A8D
8168  3A8E
8169  3A8F
8170  3A90
8171  3A91
8172  3A92
8173  3A93
8174  3A94
8175  3A95
8176  3A96
8177  3A97
8178  3A98
8179  3A99
8180  3A9A
8181  3A9B
8182  3A9C
8183  3A9D
8184  3A9E
8185  3A9F
8186  3AA0
8187  3AA1
8188  3AA2
8189  3AA3
8190  3AA4
8191  3AA5
8192  3AA6
8193  3AA7
8194  3AA8
8195  3AA9
8196  3AAA
8197  3AAB
8198  3AAC
8199  3AAD
8200  3AAE
8201  3AAF
8202  3AB0
8203  3AB1
8204  3AB2
8205  3AB3
8206  3AB4
8207  3AB5
8208  3AB6
8209  3AB7
8210  3AB8
8211  3AB9
8212  3ABA
8213  3ABB
8214  3ABC
8215  3ABD
8216  3ABE
8217  3ABF
8218  3AC0
8219  3AC1
8220  3AC2
8221  3AC3
8222  3AC4
8223  3AC5
8224  3AC6
8225  3AC7
8226  3AC8
8227  3AC9
8228  3ACA
8229  3ACB
8230  3ACC
8231  3ACD
8232  3ACE
8233  3ACF
8234  3AD0
8235  3AD1
8236  3AD2
8237  3AD3
8238  3AD4
8239  3AD5
8240  3AD6
8241  3AD7
8242  3AD8
8243  3AD9
8244  3ADA
8245  3ADB
8246  3ADC
8247  3ADD
8248  3ADE
8249  3ADF
8250  3AE0
8251  3AE1
8252  3AE2
8253  3AE3
8254  3AE4
8255  3AE5
8256  3AE6
8257  3AE7
8258  3AE8
8259  3AE9
8260  3AEA
8261  3AEB
8262  3AEC
8263  3AED
8264  3AEE
8265  3AEF
8266  3AF0
8267  3AF1
8268  3AF2
8269  3AF3
8270  3AF4
8271  3AF5
8272  3AF6
8273  3AF7
8274  3AF8
8275  3AF9
8276  3AFA
8277  3AFB
8278  3AFC
8279  3AFD
8280  3AFE
8281  3AFF
8282  3B00
8283  3B01
8284  3B02
8285  3B03
8286  3B04
8287  3B05
8288  3B06
8289  3B07
8290  3B08
8291  3B09
8292  3B0A
8293  3B0B
8294  3B0C
8295  3B0D
8296  3B0E
8297  3B0F
8298  3B10
8299  3B11
8300  3B12
8301  3B13
8302  3B14
8303  3B15
8304  3B16
8305  3B17
8306  3B18
8307  3B19
8308  3B1A
8309  3B1B
8310  3B1C
8311  3B1D
8312  3B1E
8313  3B1F
8314  3B20
8315  3B21
8316  3B22
8317  3B23
8318  3B24
8319  3B25
8320  3B26
8321  3B27
8322  3B28
8323  3B29
8324  3B2A
8325  3B2B
8326  3B2C
8327  3B2D
8328  3B2E
8329  3B2F
8330  3B30
8331  3B31
8332  3B32
8333  3B33
8334  3B34
8335  3B35
8336  3B36
8337  3B37
8338  3B38
8339  3B39
8340  3B3A
8341  3B3B
8342  3B3C
8343  3B3D
8344  3B3E
8345  3B3F
8346  3B40
8347  3B41
8348  3B42
8349  3B43
8350  3B44
8351  3B45
8352  3B46
8353  3B47
8354  3B48
8355  3B49
8356  3B4A
8357  3B4B
8358  3B4C
8359  3B4D
8360  3B4E
8361  3B4F
8362  3B50
8363  3B51
8364  3B52
8365  3B53
8366  3B54
8367  3B55
8368  3B56
8369  3B57
8370  3B58
8371  3B59
8372  3B5A
8373  3B5B
8374  3B5C
8375  3B5D
8376  3B5E
8377  3B5F
8378  3B60
8379  3B61
8380  3B62
8381  3B63
8382  3B64
8383  3B65
8384  3B66
8385  3B67
8386  3B68
8387  3B69
8388  3B6A
8389  3B6B
8390  3B6C
8391  3B6D
8392  3B6E
8393  3B6F
8394  3B70
8395  3B71
8396  3B72
8397  3B73
8398  3B74
8399  3B75
8400  3B76
8401  3B77
8402  3B78
8403  3B79
8404  3B7A
8405  3B7B
8406  3B7C
8407  3B7D
8408  3B7E
8409  3B7F
8410  3B80
8411  3B81
8412  3B82
8413  3B83
8414  3B84
8415  3B85
8416  3B86
8417  3B87
8418  3B88
8419  3B89
8420  3B8A
8421  3B8B
8422  3B8C
8423  3B8D
8424  3B8E
8425  3B8F
8426  3B90
8427  3B91
8428  3B92
8429  3B93
8430  3B94
8431  3B95
8432  3B96
8433  3B97
8434  3B98
8435  3B99
8436  3B9A
8437  3B9B
8438  3B9C
8439  3B9D
8440  3B9E
8441  3B9F
8442  3BA0
8443  3BA1
8444  3BA2
8445  3BA3
8446  3BA4
8447  3BA5
8448  3BA6
8449  3BA7
8450  3BA8
8451  3BA9
8452  3BAA
8453  3BAB
8454  3BAC
8455  3BAD
8456  3BAE
8457  3BAF
8458  3BB0
8459  3BB1
8460  3BB2
8461  3BB3
8462  3BB4
8463  3BB5
8464  3BB6
8465  3BB7
8466  3BB8
8467  3BB9
8468  3BBA
8469  3BBB
8470  3BBC
8471  3BBD
8472  3BBE
8473  3BBF
8474  3BC0
8475  3BC1
8476  3BC2
8477  3BC3
8478  3BC4
8479  3BC5
8480  3BC6
8481  3BC7
8482  3BC8
8483  3BC9
8484  3BCA
8485  3BCB
8486  3BCC
8487  3BCD
8488  3BCE
8489  3BCF
8490  3BD0
8491  3BD1
8492  3BD2
8493  3BD3
8494  3BD4
8495  3BD5
8496  3BD6
8497  3BD7
8498  3BD8
8499  3BD9
8500  3BDA
8501  3BDB
8502  3BDC
8503  3BDD
8504  3BDE
8505  3BDF
8506  3BE0
8507  3BE1
8508  3BE2
8509  3BE3
8510  3BE4
8511  3BE5
8512  3BE6
8513  3BE7
8514  3BE8
8515  3BE9
8516  3BEA
8517  3BEB
8518  3BEC
8519  3BED
8520  3BEE
8521  3BEF
8522  3BF0
8523  3BF1
8524  3BF2
8525  3BF3
8526  3BF4
8527  3BF5
8528  3BF6
8529  3BF7
8530  3BF8
8531  3BF9
8532  3BFA
8533  3BFB
8534  3BFC
8535  3BFD
8536  3BFE
8537  3BFF
8538  3C00
8539  3C01
8540  3C02
8541  3C03
8542  3C04
8543  3C05
8544  3C06
8545  3C07
8546  3C08
8547  3C09
8548  3C0A
8549  3C0B
8550  3C0C
8551  3C0D
8552  3C0E
8553  3C0F
8554  3C10
8555  3C11
8556  3C12
8557  3C13
8558  3C14
8559  3C15
8560  3C16
8561  3C17
8562  3C18
8563  3C19
8564  3C1A
8565  3C1B
8566  3C1C
8567  3C1D
8568  3C1E
8569  3C1F
8570  3C20
8571  3C21
8572  3C22
8573  3C23
8574  3C24
8575  3C25
8576  3C26
8577  3C27
8578  3C28
8579  3C29
8580  3C2A
8581  3C2B
8582  3C2C
8583  3C2D
8584  3C2E
8585  3C2F
8586  3C30
8587  3C31
8588  3C32
8589  3C33
8590  3C34
8591  3C35
8592  3C36
8593  3C37
8594  3C38
8595  3C39
8596  3C3A
8597  3C3B
8598  3C3C
8599  3C3D
8600  3C3E
8601  3C3F
8602  3C40
8603  3C41
8604  3C42
8605  3C43
8606  3C44
8607  3C45
8608  3C46
8609  3C47
8610  3C48
8611  3C49
8612  3C4A
8613  3C4B
8614  3C4C
8615  3C4D
8616  3C4E
8617  3C4F
8618  3C50
8619  3C51
8620  3C52
8621  3C53
8622  3C54
8623  3C55
8624  3C56
8625  3C57
8626  3C58
8627  3C59
8628  3C5A
8629  3C5B
8630  3C5C
8631  3C5D
8632  3C5E
8633  3C5F
8634  3C60
8635  3C61
8636  3C62
8637  3C63
8638  3C64
8639  3C65
8640  3C66
8641  3C67
8642  3C68
8643  3C69
8644  3C6A
8645  3C6B
8646  3C6C
8647  3C6D
8648  3C6E
8649  3C6F
8650  3C70
8651  3C71
8652  3C72
8653  3C73
8654  3C74
8655  3C75
8656  3C76
8657  3C77
8658  3C78
8659  3C79
8660  3C7A
8661  3C7B
8662  3C7C
8663  3C7D
8664  3C7E
8665  3C7F
8666  3C80
8667  3C81
8668  3C82
8669  3C83
8670  3C84
8671  3C85
8672  3C86
8673  3C87
8674  3C88
8675  3C89
8676  3C8A
8677  3C8B
8678  3C8C
8679  3C8D
8680  3C8E
8681  3C8F
8682  3C90
8683  3C91
8684  3C92
8685  3C93
8686  3C94
8687  3C95
8688  3C96
8689  3C97
8690  3C98
8691  3C99
8692  3C9A
8693  3C9B
8694  3C9C
8695  3C9D
8696  3C9E
8697  3C9F
8698  3CA0
8699  3CA1
8700  3CA2
8701  3CA3
8702  3CA4
8703  3CA5
8704  3CA6
8705  3CA7
8706  3CA8
8707  3CA9
8708  3CAA
8709  3CAB
8710  3CAC
8711  3CAD
8712  3CAE
8713  3CAF
8714  3CB0
8715  3CB1
8716  3CB2
8717  3CB3
8718  3CB4
8719  3CB5
8720  3CB6
8721  3CB7
8722  3CB8
8723  3CB9
8724  3CBA
8725  3CBB
8726  3CBC
8727  3CBD
8728  3CBE
8729  3CBF
8730  3CC0
8731  3CC1
8732  3CC2
8733  3CC3
8734  3CC4
8735  3CC5
8736  3CC6
8737  3CC7
8738  3CC8
8739  3CC9
8740  3CCA
8741  3CCB
8742  3CCC
8743  3CCD
8744  3CCE
8745  3CCF
8746  3CD0
8747  3CD1
8748  3CD2
8749  3CD3
8750  3CD4
8751  3CD5
8752  3CD6
8753  3CD7
8754  3CD8
8755  3CD9
8756  3CDA
8757  3CDB
8758  3CDC
8759  3CDD
8760  3CDE
8761  3CDF
8762  3CE0
8763  3CE1
8764  3CE2
8765  3CE3
8766  3CE4
8767  3CE5
8768  3CE6
8769  3CE7
8770  3CE8
8771  3CE9
8772  3CEA
8773  3CEB
8774  3CEC
8775  3CED
8776  3CEE
8777  3CEF
8778  3CF0
8779  3CF1
8780  3CF2
8781  3CF3
8782  3CF4
8783  3CF5
8784  3CF6
8785  3CF7
8786  3CF8
8787  3CF9
8788  3CFA
8789  3CFB
8790  3CFC
8791  3CFD
8792  3CFE
8793  3CFF
8794  3D00
8795  3D01
8796  3D02
8797  3D03
8798  3D04
8799  3D05
8800  3D06
8801  3D07
8802  3D08
8803  3D09
8804  3D0A
8805  3D0B
8806  3D0C
8807  3D0D
8808  3D0E
8809  3D0F
8810  3D10
8811  3D11
8812  3D12
8813  3D13
8814  3D14
8815  3D15
8816  3D16
8817  3D17
8818  3D18
8819  3D19
8820  3D1A
8821  3D1B
8822  3D1C
8823  3D1D
8824  3D1E
8825  3D1F
8826  3D20
8827  3D21
8828  3D22
8829  3D23
8830  3D24
8831  3D25
8832  3D26
8833  3D27
8834  3D28
8835  3D29
8836  3D2A
8837  3D2B
8838  3D2C
8839  3D2D
8840  3D2E
8841  3D2F
8842  3D30
8843  3D31
8844  3D32
8845  3D33
8846  3D34
8847  3D35
8848  3D36
8849  3D37
8850  3D38
8851  3D39
8852  3D3A
8853  3D3B
8854  3D3C
8855  3D3D
8856  3D3E
8857  3D3F
8858  3D40
8859  3D41
8860  3D42
8861  3D43
8862  3D44
8863  3D45
8864  3D46
8865  3D47
8866  3D48
8867  3D49
8868  3D4A
8869  3D4B
8870  3D4C
8871  3D4D
8872  3D4E
8873  3D4F
8874  3D50
8875  3D51
8876  3D52
8877  3D53
8878  3D54
8879  3D55
8880  3D56
8881  3D57
8882  3D58
8883  3D59
8884  3D5A
8885  3D5B
8886  3D5C
8887  3D5D
8888  3D5E
8889  3D5F
8890  3D60
8891  3D61
8892  3D62
8893  3D63
8894  3D64
8895  3D65
8896  3D66
8897  3D67
8898  3D68
8899  3D69
8900  3D6A
8901  3D6B
8902  3D6C
8903  3D6D
8904  3D6E
8905  3D6F
8906  3D70
8907  3D71
8908  3D72
8909  3D73
8910  3D74
8911  3D75
8912  3D76
8913  3D77
8914  3D78
8915  3D79
8916  3D7A
8917  3D7B
8918  3D7C
8919  3D7D
8920  3D7E
8921  3D7F
8922  3D80
8923  3D81
8924  3D82
8925  3D83
8926  3D84
8927  3D85
8928  3D86
8929  3D87
8930  3D88
8931  3D89
8932  3D8A
8933  3D8B
8934  3D8C
8935  3D8D
8936  3D8E
8937  3D8F
8938  3D90
8939  3D91
8940  3D92
8941  3D93
8942  3D94
8943  3D95
8944  3D96
8945  3D97
8946  3D98
8947  3D99
8948  3D9A
8949  3D9B
8950  3D9C
8951  3D9D
8952  3D9E
8953  3D9F
8954  3DA0
8955  3DA1
8956  3DA2
8957  3DA3
8958  3DA4
8959  3DA5
8960  3DA6
8961  3DA7
8962  3DA8
8963  3DA9
8964  3DAA
8965  3DAB
8966  3DAC
8967  3DAD
8968  3DAE
8969  3DAF
8970  3DB0
8971  3DB1
8972  3DB2
8973  3DB3
8974  3DB4
8975  3DB5
8976  3DB6
8977  3DB7
8978  3DB8
8979  3DB9
8980  3DBA
8981  3DBB
8982  3DBC
8983  3DBD
8984  3DBE
8985  3DBF
8986  3DC0
8987  3DC1
8988  3DC2
8989  3DC3
8990  3DC4
8991  3DC5
8992  3DC6
8993  3DC7
8994  3DC8
8995  3DC9
8996  3DCA
8997  3DCB
8998  3DCC
8999  3DCD
9000  3DCE
9001  3DCF
9002  3DD0
9003  3DD1
9004  3DD2
9005  3DD3
9006  3DD4
9007  3DD5
9008  3DD6
9009  3DD7
9010  3DD8
9011  3DD9
9012  3DDA
9013  3DDB
9014  3DDC
9015  3DDD
9016  3DDE
9017  3DDF
9018  3DE0
9019  3DE1
9020  3DE2
9021  3DE3
9022  3DE4
9023  3DE5
9024  3DE6
9025  3DE7
9026  3DE8
9027  3DE9
9028  3DEA
9029  3DEB
9030  3DEC
9031  3DED
9032  3DEE
9033  3DEF
9034  3DF0
9035  3DF1
9036  3DF2
9037  3DF3
9038  3DF4
9039  3DF5
9040  3DF6
9041  3DF7
9042  3DF8
9043  3DF9
9044  3DFA
9045  3DFB
9046  3DFC
9047  3DFD
9048  3DFE
9049  3DFF
9050  3E00
9051  3E01
9052  3E02
9053  3E03
9054  3E04
9055  3E05
9056  3E06
9057  3E07
9058  3E08
9059  3E09
9060  3E0A
9061  3E0B
9062  3E0C
9063  3E0D
9064  3E0E
9065  3E0F
9066  3E10
9067  3E11
9068  3E12
9069  3E13
9070  3E14
9071  3E15
9072  3E16
9073  3E17
9074  3E18
9075  3E19
9076  3E1A
9077  3E1B
9078  3E1C
9079  3E1D
9080  3E1E
9081  3E1F
9082  3E20
9083  3E21
9084  3E22
9085  3E23
9086  3E24
9087  3E25
9088  3E26
9089  3E27
9090  3E28
9091  3E29
9092  3E2A
9093  3E2B
9094  3E2C
9095  3E2D
9096  3E2E
9097  3E2F
9098  3E30
9099  3E31
9100  3E32
9101  3E33
9102  3E34
9103  3E35
9104  3E36
9105  3E37
9106  3E38
9107  3E39
9108  3E3A
9109  3E3B
9110  3E3C
9111  3E3D
9112  3E3E
9113  3E3F
9114  3E40
9115  3E41
9116  3E42
9117  3E43
9118  3E44
9119  3E45
9120  3E46
9121  3E47
9122  3E48
9123  3E49
9124  3E4A
9125  3E4B
9126  3E4C
9127  3E4D
9128  3E4E
9129  3E4F
9130  3E50
9131  3E51
9132  3E52
9133  3E53
9134  3E54
9135  3E55
9136  3E56
9137  3E57
9138  3E58
9139  3E59
9140  3E5A
9141  3E5B
9142  3E5C
9143  3E5D
9144  3E5E
9145  3E5F
9146  3E60
9147  3E61
9148  3E62
9149  3E63
9150  3E64
9151  3E65
9152  3E66
9153  3E67
9154  3E68
9155  3E69
9156  3E6A
9157  3E6B
9158  3E6C
9159  3E6D
9160  3E6E
9161  3E6F
9162  3E70
9163  3E71
9164  3E72
9165  3E73
9166  3E74
9167  3E75
9168  3E76
9169  3E77
9170  3E78
9171  3E79
9172  3E7A
9173  3E7B
9174  3E7C
9175  3E7D
9176  3E7E
9177  3E7F
9178  3E80
9179  3E81
9180  3E82
9181  3E83
9182  3E84
9183  3E85
9184  3E86
9185  3E87
9186  3E88
9187  3E89
9188  3E8A
9189  3E8B
9190  3E8C
9191  3E8D
9192  3E8E
9193  3E8F
9194  3E90
9195  3E91
9196  3E92
9197  3E93
9198  3E94
9199  3E95
9200  3E96
9201  3E97
9202  3E98
9203  3E99
9204  3E9A
9205  3E9B
9206  3E9C
9207  3E9D
9208  3E9E
9209  3E9F
9210  3EA0
9211  3EA1
9212  3EA2
9213  3EA3
9214  3EA4
9215  3EA5
9216  3EA6
9217  3EA7
9218  3EA8
9219  3EA9
9220  3EAA
9221  3EAB
9222  3EAC
9223  3EAD
9224  3EAE
9225  3EAF
9226  3EB0
9227  3EB1
9228  3EB2
9229  3EB3
9230  3EB4
9231  3EB5
9232  3EB6
9233  3EB7
9234  3EB8
9235  3EB9
9236  3EBA
9237  3EBB
9238  3EBC
9239  3EBD
9240  3EBE
9241  3EBF
9242  3EC0
9243  3EC1
9244  3EC2
9245  3EC3
9246  3EC4
9247  3EC5
9248  3EC6
9249  3EC7
9250  3EC8
9251  3EC9
9252  3ECA
9253  3ECB
9254  3ECC
9255  3ECD
9256  3ECE
9257  3ECF
9258  3ED0
9259  3ED1
9260  3ED2
9261  3ED3
9262  3ED4
9263  3ED5
9264  3ED6
9265  3ED7
9266  3ED8
9267  3ED9
9268  3EDA
9269  3EDB
9270  3EDC
9271  3EDD
9272  3EDE
9273  3EDF
9274  3EE0
9275  3EE1
9276  3EE2
9277  3EE3
9278  3EE4
9279  3EE5
9280  3EE6
9281  3EE7
9282  3EE8
9283  3EE9
9284  3EEA
9285  3EEB
9286  3EEC
9287  3EED
9288  3EEE
9289  3EEF
9290  3EF0
9291  3EF1
9292  3EF2
9293  3EF3
9294  3EF4
9295  3EF5
9296  3EF6
9297  3EF7
9298  3EF8
9299  3EF9
9300  3EFA
9301  3EFB
9302  3EFC
9303  3EFD
9304  3EFE
9305  3EFF
9306  3F00
9307  3F01
9308  3F02
9309  3F03
9310  3F04
9311  3F05
9312  3F06
9313  3F07
9314  3F08
9315  3F09
9316  3F0A
9317  3F0B
9318  3F0C
9319  3F0D
9320  3F0E
9321  3F0F
9322  3F10
9323  3F11
9324  3F12
9325  3F13
9326  3F14
9327  3F15
9328  3F16
9329  3F17
9330  3F18
9331  3F19
9332  3F1A
9333  3F1B
9334  3F1C
9335  3F1D
9336  3F1E
9337  3F1F
9338  3F20
9339  3F21
9340  3F22
9341  3F23
9342  3F24
9343  3F25
9344  3F26
9345  3F27
9346  3F28
9347  3F29
9348  3F2A
9349  3F2B
9350  3F2C
9351  3F2D
9352  3F2E
9353  3F2F
9354  3F30
9355  3F31
9356  3F32
9357  3F33
9358  3F34
9359  3F35
9360  3F36
9361  3F37
9362  3F38
9363  3F39
9364  3F3A
9365  3F3B
9366  3F3C
9367  3F3D
9368  3F3E
9369  3F3F
9370  3F40
9371  3F41
9372  3F42
9373  3F43
9374  3F44
9375  3F45
9376  3F46
9377  3F47
9378  3F48
9379  3F49
9380  3F4A
9381  3F4B
9382  3F4C
9383  3F4D
9384  3F4E
9385  3F4F
9386  3F50
9387  3F51
9388  3F52
9389  3F53
9390  3F54
9391  3F55
9392  3F56
9393  3F57
9394  3F58
9395  3F59
9396  3F5A
9397  3F5B
9398  3F5C
9399  3F5D
9400  3F5E
9401  3F5F
9402  3F60
9403  3F61
9404  3F62
9405  3F63
9406  3F64
9407  3F65
9408  3F66
9409  3F67
9410  3F68
9411  3F69
9412  3F6A
9413  3F6B
9414  3F6C
9415  3F6D
9416  3F6E
9417  3F6F
9418  3F70
9419  3F71
9420  3F72
9421  3F73
9422  3F74
9423  3F75
9424  3F76
9425  3F77
9426  3F78
9427  3F79
9428  3F7A
9429  3F7B
9430  3F7C
9431  3F7D
9432  3F7E
9433  3F7F
9434  3F80
9435  3F81
9436  3F82
9437  3F83
9438  3F84
9439  3F85
9440  3F86
9441  3F87
9442  3F88
9443  3F89
9444  3F8A
9445  3F8B
9446  3F8C
9447  3F8D
9448  3F8E
9449  3F8F
9450  3F90
9451  3F91
9452  3F92
9453  3F93
9454  3F94
9455  3F95
9456  3F96
9457  3F97
9458  3F98
9459  3F99
9460  3F9A
9461  3F9B
9462  3F9C
9463  3F9D
9464  3F9E
9465  3F9F
9466  3FA0
9467  3FA1
9468  3FA2
9469  3FA3
9470  3FA4
9471  3FA5
9472  3FA6
9473  3FA7
9474  3FA8
9475  3FA9
9476  3FAA
9477  3FAB
9478  3FAC
9479  3FAD
9480  3FAE
9481  3FAF
9482  3FB0
9483  3FB1
9484  3FB2
9485  3FB3
9486  3FB4
9487  3FB5
9488  3FB6
9489  3FB7
9490  3FB8
9491  3FB9
9492  3FBA
9493  3FBB
9494  3FBC
9495  3FBD
9496  3FBE
9497  3FBF
9498  3FC0
9499  3FC1
9500  3FC2
9501  3FC3
9502  3FC4
9503  3FC5
9504  3FC6
9505  3FC7
9506  3FC8
9507  3FC9
9508  3FCA
9509  3FCB
9510  3FCC
9511  3FCD
9512  3FCE
9513  3FCF
9514  3FD0
9515  3FD1
9516  3FD2
9517  3FD3
9518  3FD4
9519  3FD5
9520  3FD6
9521  3FD7
9522  3FD8
9523  3FD9
9524  3FDA
9525  3FDB
9526  3FDC
9527  3FDD
9528  3FDE
9529  3FDF
9530  3FE0
9531  3FE1
9532  3FE2
9533  3FE3
9534  3FE4
9535  3FE5
9536  3FE6
9537  3FE7
9538  3FE8
9539  3FE9
9540  3FEA
9541  3FEB
9542  3FEC
9543  3FED
9544  3FEE
9545  3FEF
9546  3FF0
9547  3FF1
9548  3FF2
9549  3FF3
9550  3FF4
9551  3FF5
9552  3FF6
9553  3FF7
9554  3FF8
9555  3FF9
9556  3FFA
9557  3FFB
9558  3FFC
9559  3FFD
9560  3FFE
9561  3FFF
9562  4000
9563  4001
9564  4002
9565  4003
9566  4004
9567  4005
9568  4006
9569  4007
9570  4008
9571  4009
9572  400A
9573  400B
9574  400C
9575  400D
9576  400E
9577  400F
9578  4010
9579  4011
9580  4012
9581  4013
9582  4014
9583  4015
9584  4016
9585  4017
9586  4018
9587  4019
9588  401A
9589  401B
9590  401C
9591  401D
9592  401E
9593  401F
9594  4020
9595  4021
9596  4022
9597  4023
9598  4024
9599  4025
9600  4026
9601  4027
9602  4028
9603  4029
9604  402A
9605  402B
9606  402C
9607  402D
9608  402E
9609  402F
9610  4030
9611  4031
9612  4032
9613  4033
9614  4034
9615  4035
9616  4036
9617  4037
9618  4038
9619  4039
9620  403A
9621  403B
9622  403C
9623  403D
9624  403E
9625  403F
9626  4040
9627  4041
9628  4042
9629  4043
9630  4044
9631  4045
9632  4046
9633  4047
9634  4048
9635  4049
9636  404A
9637  404B
9638  404C
9639  404D
9640  404E
9641  404F
9642  4050
9643  4051
9644  4052
9645  4053
9646  4054
9647  4055
9648  4056
9649  4057
9650  4058
9651  4059
9652  405A
9653  405B
9654  405C
9655  405D
9656  405E
9657  405F
9658  4060
9659  4061
9660  4062
9661  4063
9662  4064
9663  4065
9664  4066
9665  4067
9666  4068
9667  4069
9668  406A
9669  406B
9670  406C
9671  406D
9672  406E
9673  406F
9674  4070
9675  4071
9676  4072
9677  4073
9678  4074
9679  4075
9680  4076
9681  4077
9682  4078
9683  4079
9684  407A
9685  407B
9686  407C
9687  407D
9688  407E
9689  407F
9690  4080
9691  4081
9692  4082
9693  4083
9694  4084
9695  4085
9696  4086
9697  4087
9698  4088
9699  4089
9700  408A
9701  408B
9702  408C
9703  408D
9704  408E
9705  408F
9706  4090
9707  4091
9708  4092
9709  4093
9710  4094
9711  4095
9712  4096
9713  4097
9714  4098
9715  4099
9716  409A
9717  409B
9718  409C
9719  409D
9720  409E
9721  409F
9722  40A0
9723  40A1
9724  40A2
9725  40A3
9726  40A4
9727  40A5
9728  40A6
9729  40A7
9730  40A8
9731  40A9
9732  40AA
9733  40AB
9734  40AC
9735  40AD
9736  40AE
9737  40AF
9738  40B0
9739  40B1
9740  40B2
9741  40B3
9742  40B4
9743  40B5
9744  40B6
9745  40B7
9746  40B8
9747  40B9
9748  40BA
9749  40BB
9750  40BC
9751  40BD
9752  40BE
9753  40BF
9754  40C0
9755  40C1
9756  40C2
9757  40C3
9758  40C4
9759  40C5
9760  40C6
9761  40C7
9762  40C8
9763  40C9
9764  40CA
9765  40CB
9766  40CC
9767  40CD
9768  40CE
9769  40CF
9770  40D0
9771  40D1
9772  40D2
9773  40D3
9774  40D4
9775  40D5
9776  40D6
9777  40D7
9778  40D8
9779  40D9
9780  40DA
9781  40DB
9782  40DC
9783  40DD
9784  40DE
9785  40DF
9786  40E0
9787  40E1
9788  40E2
9789  40E3
9790  40E4
9791  40E5
9792  40E6
9793  40E7
9794  40E8
9795  40E9
9796  40EA
9797  40EB
9798  40EC
9799  40ED
9800  40EE
9801  40EF
9802  40F0
9803  40F1
9804  40F2
9805  40F3
9806  40F4
9807  40F5
9808  40F6
9809  40F7
9810  40F8
9811  40F9
9812  40FA
9813  40FB
9814  40FC
9815  40FD
9816  40FE
9817  40FF
9818  4100
9819  4101
9820  4102
9821  4103
9822  4104
9823  4105
9824  4106
9825  4107
9826  4108
9827  4109
9828  410A
9829  410B
9830  410C
9831  410D
9832  410E
9833  410F
9834  4110
9835  4111
9836  4112
9837  4113
9838  4114
9839  4115
9840  4116
9841  4117
9842  4118
9843  4119
9844  411A
9845  411B
9846  411C
9847  411D
9848  411E
9849  411F
9850  4120
9851  4121
9852  4122
9853  4123
9854  4124
9855  4125
9856  4126
9857  4127
9858  4128
9859  4129
9860  412A
9861  412B
9862  412C
9863  412D
9864  412E
9865  412F
9866  4130
9867  4131
9868  4132
9869  4133
9870  4134
9871  4135
9872  4136
9873  4137
9874  4138
9875  4139
9876  413A
9877  413B
9878  413C
9879  413D
9880  413E
9881  413F
9882  4140
9883  4141
9884  4142
9885  4143
9886  4144
9887  4145
9888  4146
9889  4147
9890  4148
9891  4149
9892  414A
9893  414B
9894  414C
9895  414D
9896  414E
9897  414F
9898  4150
9899  4151
9900  4152
9901  4153
9902  4154
9903  4155
9904  4156
9905  4157
9906  4158
9907  4159
9908  415A
9909  415B
9910  415C
9911  415D
9912  415E
9913  415F
9914  4160
9915  4161
9916  4162
9917  4163
9918  4164
9919  4165
9920  4166
9921  4167
9922  4168
9923  4169
9924  416A
9925  416B
9926  416C
9927  416D
9928  416E
9929  416F
9930  4170
9931  4171
9932  4172
9933  4173
9934  4174
9935  4175
9936  4176
9937  4177
9938  4178
9939  4179
9940  417A
9941  417B
9942  417C
9943  417D
9944  417E
9945  417F
9946  4180
9947  4181
9948  4182
9949  4183
9950  4184
9951  4185
9952  4186
9953  4187
9954  4188
9955  4189
9956  418A
9957  418B
9958  418C
9959  418D
9960  418E
9961  418F
9962  4190
9963  4191
9964  4192
9965  4193
9966  4194
9967  4195
9968  4196
9969  4197
9970  4198
9971  4199
9972  419A
9973  419B
9974  419C
9975  419D
9976  419E
9977  419F
9978  41A0
9979  41A1
9980  41A2
9981  41A3
9982  41A4
9983  41A5
9984  41A6
9985  41A7
9986  41A8
9987  41A9
9988  41AA
9989  41AB
9990  41AC
9991  41AD
9992  41AE
9993  41AF
9994  41B0
9995  41B1
9996  41B2
9997  41B3
9998  41B4
9999  41B5
10000  41B6
10001  41B7
10002  41B8
10003  41B9
10004  41BA
10005  41BB
10006  41BC
10007  41BD
10008  41BE
10009  41BF
10010  41C0
10011  41C1
10012  41C2
10013  41C3
10014  41C4
10015  41C5
10016  41C6
10017  41C7
10018  41C8
10019  41C9
10020  41CA
10021  41CB
10022  41CC
10023  41CD
10024  41CE
10025  41CF
10026  41D0
10027  41D1
10028  41D2
10029  41D3
10030  41D4
10031  41D5
10032  41D6
10033  41D7
10034  41D8
10035  41D9
10036  41DA
10037  41DB
10038  41DC
10039  41DD
10040  41DE
10041  41DF
10042  41E0
10043  41E1
10044  41E2
10045  41E3
10046  41E4
10047  41E5
10048  41E6
10049  41E7
10050  41E8
10051  41E9
10052  41EA
10053  41EB
10054  41EC
10055  41ED
10056  41EE
10057  41EF
10058  41F0
10059  41F1
10060  41F2
10061  41F3
10062  41F4
10063  41F5
10064  41F6
10065  41F7
10066  41F8
10067  41F9
10068  41FA
10069  41FB
10070  41FC
10071  41FD
10072  41FE
10073  41FF
10074  4200
10075  4201
10076  4202
10077  4203
10078  4204
10079  4205
10080  4206
10081  4207
10082  4208
10083  4209
10084  420A
10085  420B
10086  420C
10087  420D
10088  420E
10089  420F
10090  4210
10091  4211
10092  4212
10093  4213
10094  4214
10095  4215
10096  4216
10097  4217
10098  4218
10099  4219
10100  421A
10101  421B
10102  421C
10103  421D
10104  421E
10105  421F
10106  4220
10107  4221
10108  4222
10109  4223
10110  4224
10111  4225
10112  4226
10113  4227
10114  4228
10115  4229
10116  422A
10117  422B
10118  422C
10119  422D
10120  422E
10121  422F
10122  4230
10123  4231
10124  4232
10125  4233
10126  4234
10127  4235
10128  4236
10129  4237
10130  4238
10131  4239
10132  423A
10133  423B
10134  423C
10135  423D
10136  423E
10137  423F
10138  4240
10139  4241
10140  4242
10141  4243
10142  4244
10143  4245
10144  4246
10145  4247
10146  4248
10147  4249
10148  424A
10149  424B
10150  424C
10151  424D
10152  424E
10153  424F
10154  4250
10155  4251
10156  4252
10157  4253
10158  4254
10159  4255
10160  4256
10161  4257
10162  4258
10163  4259
10164  425A
10165  425B
10166  425C
10167  425D
10168  425E
10169  425F
10170  4260
10171  4261
10172  4262
10173  4263
10174  4264
10175  4265
10176  4266
10177  4267
10178  4268
10179  4269
10180  426A
10181  426B
10182  426C
10183  426D
10184  426E
10185  426F
10186  4270
10187  4271
10188  4272
10189  4273
10190  4274
10191  4275
10192  4276
10193  4277
10194  4278
10195  4279
10196  427A
10197  427B
10198  427C
10199  427D
10200  427E
10201  427F
10202  4280
10203  4281
10204  4282
10205  4283
10206  4284
10207  4285
10208  4286
10209  4287
10210  4288
10211  4289
10212  428A
10213  428B
10214  428C
10215  428D
10216  428E
10217  428F
10218  4290
10219  4291
10220  4292
10221  4293
10222  4294
10223  4295
10224  4296
10225  4297
10226  4298
10227  4299
10228  429A
10229  429B
10230  429C
10231  429D
10232  429E
10233  429F
10234  42A0
10235  42A1
10236  42A2
10237  42A3
10238  42A4
10239  42A5
10240  42A6
10241  42A7
10242  42A8
10243  42A9
10244  42AA
10245  42AB
10246  42AC
10247  42AD
10248  42AE
10249  42AF
10250  42B0
10251  42B1
10252  42B2
10253  42B3
10254  42B4
10255  42B5
10256  42B6
10257  42B7
10258  42B8
10259  42B9
10260  42BA
10261  42BB
10262  42BC
10263  42BD
10264  42BE
10265  42BF
10266  42C0
10267  42C1
10268  42C2
10269  42C3
10270  42C4
10271  42C5
10272  42C6
10273  42C7
10274  42C8
10275  42C9
10276  42CA
10277  42CB
10278  42CC
10279  42CD
10280  42CE
10281  42CF
10282  42D0
10283  42D1
10284  42D2
10285  42D3
10286  42D4
10287  42D5
10288  42D6
10289  42D7
10290  42D8
10291  42D9
10292  42DA
10293  42DB
10294  42DC
10295  42DD
10296  42DE
10297  42DF
10298  42E0
10299  42E1
10300  42E2
10301  42E3
10302  42E4
10303  42E5
10304  42E6
10305  42E7
10306  42E8
10307  42E9
10308  42EA
10309  42EB
10310  42EC
10311  42ED
10312  42EE
10313  42EF
10314  42F0
10315  42F1
10316  42F2
10317  42F3
10318  42F4
10319  42F5
10320  42F6
10321  42F7
10322  42F8
10323  42F9
10324  42FA
10325  42FB
10326  42FC
10327  42FD
10328  42FE
10329  42FF
10330  4300
10331  4301
10332  4302
10333  4303
10334  4304
10335  4305
10336  4306
10337  4307
10338  4308
10339  4309
10340  430A
10341  430B
10342  430C
10343  430D
10344  430E
10345  430F
10346  4310
10347  4311
10348  4312
10349  4313
10350  4314
10351  4315
10352  4316
10353  4317
10354  4318
10355  4319
10356  431A
10357  431B
10358  431C
10359  431D
10360  431E
10361  431F
10362  4320
10363  4321
10364  4322
10365  4323
10366  4324
10367  4325
10368  4326
10369  4327
10370  4328
10371  4329
10372  432A
10373  432B
10374  432C
10375  432D
10376  432E
10377  432F
10378  4330
10379  4331
10380  4332
10381  4333
10382  4334
10383  4335
10384  4336
10385  4337
10386  4338
10387  4339
10388  433A
10389  433B
10390  433C
10391  433D
10392  433E
10393  433F
10394  4340
10395  4341
10396  4342
10397  4343
10398  4344
10399  4345
10400  4346
10401  4347
10402  4348
10403  4349
10404  434A
10405  434B
10406  434C
10407  434D
10408  434E
10409  434F
10410  4350
10411  4351
10412  4352
10413  4353
10414  4354
10415  4355
10416  4356
10417  4357
10418  4358
10419  4359
10420  435A
10421  435B
10422  435C
10423  435D
10424  435E
10425  435F
10426  4360
10427  4361
10428  4362
10429  4363
10430  4364
10431  4365
10432  4366
10433  4367
10434  4368
10435  4369
10436  436A
10437  436B
10438  436C
10439  436D
10440  436E
10441  436F
10442  4370
10443  4371
10444  4372
10445  4373
10446  4374
10447  4375
10448  4376
10449  4377
10450  4378
10451  4379
10452  437A
10453  437B
10454  437C
10455  437D
10456  437E
10457  437F
10458  4380
10459  4381
10460  4382
10461  4383
10462  4384
10463  4385
10464  4386
10465  4387
10466  4388
10467  4389
10468  438A
10469  438B
10470  438C
10471  438D
10472  438E
10473  438F
10474  4390
10475  4391
10476  4392
10477  4393
10478  4394
10479  4395
10480  4396
10481  4397
10482  4398
10483  4399
10484  439A
10485  439B
10486  439C
10487  439D
10488  439E
10489  439F
10490  43A0
10491  43A1
10492  43A2
10493  43A3
10494  43A4
10495  43A5
10496  43A6
10497  43A7
10498  43A8
10499  43A9
10500  43AA
10501  43AB
10502  43AC
10503  43AD
10504  43AE
10505  43AF
10506  43B0
10507  43B1
10508  43B2
10509  43B3
10510  43B4
10511  43B5
10512  43B6
10513  43B7
10514  43B8
10515  43B9
10516  43BA
10517  43BB
10518  43BC
10519  43BD
10520  43BE
10521  43BF
10522  43C0
10523  43C1
10524  43C2
10525  43C3
10526  43C4
10527  43C5
10528  43C6
10529  43C7
10530  43C8
10531  43C9
10532  43CA
10533  43CB
10534  43CC
10535  43CD
10536  43CE
10537  43CF
10538  43D0
10539  43D1
10540  43D2
10541  43D3
10542  43D4
10543  43D5
10544  43D6
10545  43D7
10546  43D8
10547  43D9
10548  43DA
10549  43DB
10550  43DC
10551  43DD
10552  43DE
10553  43DF
10554  43E0
10555  43E1
10556  43E2
10557  43E3
10558  43E4
10559  43E5
10560  43E6
10561  43E7
10562  43E8
10563  43E9
10564  43EA
10565  43EB
10566  43EC
10567  43ED
10568  43EE
10569  43EF
10570  43F0
10571  43F1
10572  43F2
10573  43F3
10574  43F4
10575  43F5
10576  43F6
10577  43F7
10578  43F8
10579  43F9
10580  43FA
10581  43FB
10582  43FC
10583  43FD
10584  43FE
10585  43FF
10586  4400
10587  4401
10588  4402
10589  4403
10590  4404
10591  4405
10592  4406
10593  4407
10594  4408
10595  4409
10596  440A
10597  440B
10598  440C
10599  440D
10600  440E
10601  440F
10602  4410
10603  4411
10604  4412
10605  4413
10606  4414
10607  4415
10608  4416
10609  4417
10610  4418
10611  4419
10612  441A
10613  441B
10614  441C
10615  441D
10616  441E
10617  441F
10618  4420
10619  4421
10620  4422
10621  4423
10622  4424
10623  4425
10624  4426
10625  4427
10626  4428
10627  4429
10628  442A
10629  442B
10630  442C
10631  442D
10632  442E
10633  442F
10634  4430
10635  4431
10636  4432
10637  4433
10638  4434
10639  4435
10640  4436
10641  4437
10642  4438
10643  4439
10644  443A
10645  443B
10646  443C
10647  443D
10648  443E
10649  443F
10650  4440
10651  4441
10652  4442
10653  4443
10654  4444
10655  4445
10656  4446
10657  4447
10658  4448
10659  4449
10660  444A
10661  444B
10662  444C
10663  444D
10664  444E
10665  444F
10666  4450
10667  4451
10668  4452
10669  4453
10670  4454
10671  4455
10672  4456
10673  4457
10674  4458
10675  4459
10676  445A
10677  445B
10678  445C
10679  445D
10680  445E
10681  445F
10682  4460
10683  4461
10684  4462
10685  4463
10686  4464
10687  4465
10688  4466
10689  4467
10690  4468
10691  4469
10692  446A
10693  446B
10694  446C
10695  446D
10696  446E
10697  446F
10698  4470
10699  4471
10700  4472
10701  4473
10702  4474
10703  4475
10704  4476
10705  4477
10706  4478
10707  4479
10708  447A
10709  447B
10710  447C
10711  447D
10712  447E
10713  447F
10714  4480
10715  4481
10716  4482
10717  4483
10718  4484
10719  4485
10720  4486
10721  4487
10722  4488
10723  4489
10724  448A
10725  448B
10726  448C
10727  448D
10728  448E
10729  448F
10730  4490
10731  4491
10732  4492
10733  4493
10734  4494
10735  4495
10736  4496
10737  4497
10738  4498
10739  4499
10740  449A
10741  449B
10742  449C
10743  449D
10744  449E
10745  449F
10746  44A0
10747  44A1
10748  44A2
10749  44A3
10750  44A4
10751  44A5
10752  44A6
10753  44A7
10754  44A8
10755  44A9
10756  44AA
10757  44AB
10758  44AC
10759  44AD
10760  44AE
10761  44AF
10762  44B0
10763  44B1
10764  44B2
10765  44B3
10766  44B4
10767  44B5
10768  44B6
10769  44B7
10770  44B8
10771  44B9
10772  44BA
10773  44BB
10774  44BC
10775  44BD
10776  44BE
10777  44BF
10778  44C0
10779  44C1
10780  44C2
10781  44C3
10782  44C4
10783  44C5
10784  44C6
10785  44C7
10786  44C8
10787  44C9
10788  44CA
10789  44CB
10790  44CC
10791  44CD
10792  44CE
10793  44CF
10794  44D0
10795  44D1
10796  44D2
10797  44D3
10798  44D4
10799  44D5
10800  44D6
10801  44D7
10802  44D8
10803  44D9
10804  44DA
10805  44DB
10806  44DC
10807  44DD
10808  44DE
10809  44DF
10810  44E0
10811  44E1
10812  44E2
10813  44E3
10814  44E4
10815  44E5
10816  44E6
10817  44E7
10818  44E8
10819  44E9
10820  44EA
10821  44EB
10822  44EC
10823  44ED
10824  44EE
10825  44EF
10826  44F0
10827  44F1
10828  44F2
10829  44F3
10830  44F4
10831  44F5
10832  44F6
10833  44F7
10834  44F8
10835  44F9
10836  44FA
10837  44FB
10838  44FC
10839  44FD
10840  44FE
10841  44FF
10842  4500
10843  4501
10844  4502
10845  4503
10846  4504
10847  4505
10848  4506
10849  4507
10850  4508
10851  4509
10852  450A
10853  450B
10854  450C
10855  450D
10856  450E
10857  450F
10858  4510
10859  4511
10860  4512
10861  4513
10862  4514
10863  4515
10864  4516
10865  4517
10866  4518
10867  4519
10868  451A
10869  451B
10870  451C
10871  451D
10872  451E
10873  451F
10874  4520
10875  4521
10876  4522
10877  4523
10878  4524
10879  4525
10880  4526
10881  4527
10882  4528
10883  4529
10884  452A
10885  452B
10886  452C
10887  452D
10888  452E
10889  452F
10890  4530
10891  4531
10892  4532
10893  4533
10894  4534
10895  4535
10896  4536
10897  4537
10898  4538
10899  4539
10900  453A
10901  453B
10902  453C
10903  453D
10904  453E
10905  453F
10906  4540
10907  4541
10908  4542
10909  4543
10910  4544
10911  4545
10912  4546
10913  4547
10914  4548
10915  4549
10916  454A
10917  454B
10918  454C
10919  454D
10920  454E
10921  454F
10922  4550
10923  4551
10924  4552
10925  4553
10926  4554
10927  4555
10928  4556
10929  4557
10930  4558
10931  4559
10932  455A
10933  455B
10934  455C
10935  455D
10936  455E
10937  455F
10938  4560
10939  4561
10940  4562
10941  4563
10942  4564
10943  4565
10944  4566
10945  4567
10946  4568
10947  4569
10948  456A
10949  456B
10950  456C
10951  456D
10952  456E
10953  456F
10954  4570
10955  4571
10956  4572
10957  4573
10958  4574
10959  4575
10960  4576
10961  4577
10962  4578
10963  4579
10964  457A
10965  457B
10966  457C
10967  457D
10968  457E
10969  457F
10970  4580
10971  4581
10972  4582
10973  4583
10974  4584
10975  4585
10976  4586
10977  4587
10978  4588
10979  4589
10980  458A
10981  458B
10982  458C
10983  458D
10984  458E
10985  458F
10986  4590
10987  4591
10988  4592
10989  4593
10990  4594
10991  4595
10992  4596
10993  4597
10994  4598
10995  4599
10996  459A
10997  459B
10998  459C
10999  459D
11000  459E
11001  459F
11002  45A0
11003  45A1
11004  45A2
11005  45A3
11006  45A4
11007  45A5
11008  45A6
11009  45A7
11010  45A8
11011  45A9
11012  45AA
11013  45AB
11014  45AC
11015  45AD
11016  45AE
11017  45AF
11018  45B0
11019  45B1
11020  45B2
11021  45B3
11022  45B4
11023  45B5
11024  45B6
11025  45B7
11026  45B8
11027  45B9
11028  45BA
11029  45BB
11030  45BC
11031  45BD
11032  45BE
11033  45BF
11034  45C0
11035  45C1
11036  45C2
11037  45C3
11038  45C4
11039  45C5
11040  45C6
11041  45C7
11042  45C8
11043  45C9
11044  45CA
11045  45CB
11046  45CC
11047  45CD
11048  45CE
11049  45CF
11050  45D0
11051  45D1
11052  45D2
11053  45D3
11054  45D4
11055  45D5
11056  45D6
11057  45D7
11058  45D8
11059  45D9
11060  45DA
11061  45DB
11062  45DC
11063  45DD
11064  45DE
11065  45DF
11066  45E0
11067  45E1
11068  45E2
11069  45E3
11070  45E4
11071  45E5
11072  45E6
11073  45E7
11074  45E8
11075  45E9
11076  45EA
11077  45EB
11078  45EC
11079  45ED
11080  45EE
11081  45EF
11082  45F0
11083  45F1
11084  45F2
11085  45F3
11086  45F4
11087  45F5
11088  45F6
11089  45F7
11090  45F8
11091  45F9
11092  45FA
11093  45FB
11094  45FC
11095  45FD
11096  45FE
11097  45FF
11098  4600
11099  4601
11100  4602
11101  4603
11102  4604
11103  4605
11104  4606
11105  4607
11106  4608
11107  4609
11108  460A
11109  460B
11110  460C
11111  460D
11112  460E
11113  460F
11114  4610
11115  4611
11116  4612
11117  4613
11118  4614
11119  4615
11120  4616
11121  4617
11122  4618
11123  4619
11124  461A
11125  461B
11126  461C
11127  461D
11128  461E
11129  461F
11130  4620
11131  4621
11132  4622
11133  4623
11134  4624
11135  4625
11136  4626
11137  4627
11138  4628
11139  4629
11140  462A
11141  462B
11142  462C
11143  462D
11144  462E
11145  462F
11146  4630
11147  4631
11148  4632
11149  4633
11150  4634
11151  4635
11152  4636
11153  4637
11154  4638
11155  4639
11156  463A
11157  463B
11158  463C
11159  463D
11160  463E
11161  463F
11162  4640
11163  4641
11164  4642
11165  4643
11166  4644
11167  4645
11168  4646
11169  4647
11170  4648
11171  4649
11172  464A
11173  464B
11174  464C
11175  464D
11176  464E
11177  464F
11178  4650
11179  4651
11180  4652
11181  4653
11182  4654
11183  4655
11184  4656
11185  4657
11186  4658
11187  4659
11188  465A
11189  465B
11190  465C
11191  465D
11192  465E
11193  465F
11194  4660
11195  4661
11196  4662
11197  4663
11198  4664
11199  4665
11200  4666
11201  4667
11202  4668
11203  4669
11204  466A
11205  466B
11206  466C
11207  466D
11208  466E
11209  466F
11210  4670
11211  4671
11212  4672
11213  4673
11214  4674
11215  4675
11216  4676
11217  4677
11218  4678
11219  4679
11220  467A
11221  467B
11222  467C
11223  467D
11224  467E
11225  467F
11226  4680
11227  4681
11228  4682
11229  4683
11230  4684
11231  4685
11232  4686
11233  4687
11234  4688
11235  4689
11236  468A
11237  468B
11238  468C
11239  468D
11240  468E
11241  468F
11242  4690
11243  4691
11244  4692
11245  4693
11246  4694
11247  4695
11248  4696
11249  4697
11250  4698
11251  4699
11252  469A
11253  469B
11254  469C
11255  469D
11256  469E
11257  469F
11258  46A0
11259  46A1
11260  46A2
11261  46A3
11262  46A4
11263  46A5
11264  46A6
11265  46A7
11266  46A8
11267  46A9
11268  46AA
11269  46AB
11270  46AC
11271  46AD
11272  46AE
11273  46AF
11274  46B0
11275  46B1
11276  46B2
11277  46B3
11278  46B4
11279  46B5
11280  46B6
11281  46B7
11282  46B8
11283  46B9
11284  46BA
11285  46BB
11286  46BC
11287  46BD
11288  46BE
11289  46BF
11290  46C0
11291  46C1
11292  46C2
11293  46C3
11294  46C4
11295  46C5
11296  46C6
11297  46C7
11298  46C8
11299  46C9
11300  46CA
11301  46CB
11302  46CC
11303  46CD
11304  46CE
11305  46CF
11306  46D0
11307  46D1
11308  46D2
11309  46D3
11310  46D4
11311  46D5
11312  46D6
11313  46D7
11314  46D8
11315  46D9
11316  46DA
11317  46DB
11318  46DC
11319  46DD
11320  46DE
11321  46DF
11322  46E0
11323  46E1
11324  46E2
11325  46E3
11326  46E4
11327  46E5
11328  46E6
11329  46E7
11330  46E8
11331  46E9
11332  46EA
11333  46EB
11334  46EC
11335  46ED
11336  46EE
11337  46EF
11338  46F0
11339  46F1
11340  46F2
11341  46F3
11342  46F4
11343  46F5
11344  46F6
11345  46F7
11346  46F8
11347  46F9
11348  46FA
11349  46FB
11350  46FC
11351  46FD
11352  46FE
11353  46FF
11354  4700
11355  4701
11356  4702
11357  4703
11358  4704
11359  4705
11360  4706
11361  4707
11362  4708
11363  4709
11364  470A
11365  470B
11366  470C
11367  470D
11368  470E
11369  470F
11370  4710
11371  4711
11372  4712
11373  4713
11374  4714
11375  4715
11376  4716
11377  4717
11378  4718
11379  4719
11380  471A
11381  471B
11382  471C
11383  471D
11384  471E
11385  471F
11386  4720
11387  4721
11388  4722
11389  4723
11390  4724
11391  4725
11392  4726
11393  4727
11394  4728
11395  4729
11396  472A
11397  472B
11398  472C
11399  472D
11400  472E
11401  472F
11402  4730
11403  4731
11404  4732
11405  4733
11406  4734
11407  4735
11408  4736
11409  4737
11410  4738
11411  4739
11412  473A
11413  473B
11414  473C
11415  473D
11416  473E
11417  473F
11418  4740
11419  4741
11420  4742
11421  4743
11422  4744
11423  4745
11424  4746
11425  4747
11426  4748
11427  4749
11428  474A
11429  474B
11430  474C
11431  474D
11432  474E
11433  474F
11434  4750
11435  4751
11436  4752
11437  4753
11438  4754
11439  4755
11440  4756
11441  4757
11442  4758
11443  4759
11444  475A
11445  475B
11446  475C
11447  475D
11448  475E
11449  475F
11450  4760
11451  4761
11452  4762
11453  4763
11454  4764
11455  4765
11456  4766
11457  4767
11458  4768
11459  4769
11460  476A
11461  476B
11462  476C
11463  476D
11464  476E
11465  476F
11466  4770
11467  4771
11468  4772
11469  4773
11470  4774
11471  4775
11472  4776
11473  4777
11474  4778
11475  4779
11476  477A
11477  477B
11478  477C
11479  477D
11480  477E
11481  477F
11482  4780
11483  4781
11484  4782
11485  4783
11486  4784
11487  4785
11488  4786
11489  4787
11490  4788
11491  4789
11492  478A
11493  478B
11494  478C
11495  478D
11496  478E
11497  478F
11498  4790
11499  4791
11500  4792
11501  4793
11502  4794
11503  4795
11504  4796
11505  4797
11506  4798
11507  4799
11508  479A
11509  479B
11510  479C
11511  479D
11512  479E
11513  479F
11514  47A0
11515  47A1
11516  47A2
11517  47A3
11518  47A4
11519  47A5
11520  47A6
11521  47A7
11522  47A8
11523  47A9
11524  47AA
11525  47AB
11526  47AC
11527  47AD
11528  47AE
11529  47AF
11530  47B0
11531  47B1
11532  47B2
11533  47B3
11534  47B4
11535  47B5
11536  47B6
11537  47B7
11538  47B8
11539  47B9
11540  47BA
11541  47BB
11542  47BC
11543  47BD
11544  47BE
11545  47BF
11546  47C0
11547  47C1
11548  47C2
11549  47C3
11550  47C4
11551  47C5
11552  47C6
11553  47C7
11554  47C8
11555  47C9
11556  47CA
11557  47CB
11558  47CC
11559  47CD
11560  47CE
11561  47CF
11562  47D0
11563  47D1
11564  47D2
11565  47D3
11566  47D4
11567  47D5
11568  47D6
11569  47D7
11570  47D8
11571  47D9
11572  47DA
11573  47DB
11574  47DC
11575  47DD
11576  47DE
11577  47DF
11578  47E0
11579  47E1
11580  47E2
11581  47E3
11582  47E4
11583  47E5
11584  47E6
11585  47E7
11586  47E8
11587  47E9
11588  47EA
11589  47EB
11590  47EC
11591  47ED
11592  47EE
11593  47EF
11594  47F0
11595  47F1
11596  47F2
11597  47F3
11598  47F4
11599  47F5
11600  47F6
11601  47F7
11602  47F8
11603  47F9
11604  47FA
11605  47FB
11606  47FC
11607  47FD
11608  47FE
11609  47FF
11610  4800
11611  4801
11612  4802
11613  4803
11614  4804
11615  4805
11616  4806
11617  4807
11618  4808
11619  4809
11620  480A
11621  480B
11622  480C
11623  480D
11624  480E
11625  480F
11626  4810
11627  4811
11628  4812
11629  4813
11630  4814
11631  4815
11632  4816
11633  4817
11634  4818
11635  4819
11636  481A
11637  481B
11638  481C
11639  481D
11640  481E
11641  481F
11642  4820
11643  4821
11644  4822
11645  4823
11646  4824
11647  4825
11648  4826
11649  4827
11650  4828
11651  4829
11652  482A
11653  482B
11654  482C
11655  482D
11656  482E
11657  482F
11658  4830
11659  4831
11660  4832
11661  4833
11662  4834
11663  4835
11664  4836
11665  4837
11666  4838
11667  4839
11668  483A
11669  483B
11670  483C
11671  483D
11672  483E
11673  483F
11674  4840
11675  4841
11676  4842
11677  4843
11678  4844
11679  4845
11680  4846
11681  4847
11682  4848
11683  4849
11684  484A
11685  484B
11686  484C
11687  484D
11688  484E
11689  484F
11690  4850
11691  4851
11692  4852
11693  4853
11694  4854
11695  4855
11696  4856
11697  4857
11698  4858
11699  4859
11700  485A
11701  485B
11702  485C
11703  485D
11704  485E
11705  485F
11706  4860
11707  4861
11708  4862
11709  4863
11710  4864
11711  4865
11712  4866
11713  4867
11714  4868
11715  4869
11716  486A
11717  486B
11718  486C
11719  486D
11720  486E
11721  486F
11722  4870
11723  4871
11724  4872
11725  4873
11726  4874
11727  4875
11728  4876
11729  4877
11730  4878
11731  4879
11732  487A
11733  487B
11734  487C
11735  487D
11736  487E
11737  487F
11738  4880
11739  4881
11740  4882
11741  4883
11742  4884
11743  4885
11744  4886
11745  4887
11746  4888
11747  4889
11748  488A
11749  488B
11750  488C
11751  488D
11752  488E
11753  488F
11754  4890
11755  4891
11756  4892
11757  4893
11758  4894
11759  4895
11760  4896
11761  4897
11762  4898
11763  4899
11764  489A
11765  489B
11766  489C
11767  489D
11768  489E
11769  489F
11770  48A0
11771  48A1
11772  48A2
11773  48A3
11774  48A4
11775  48A5
11776  48A6
11777  48A7
11778  48A8
11779  48A9
11780  48AA
11781  48AB
11782  48AC
11783  48AD
11784  48AE
11785  48AF
11786  48B0
11787  48B1
11788  48B2
11789  48B3
11790  48B4
11791  48B5
11792  48B6
11793  48B7
11794  48B8
11795  48B9
11796  48BA
11797  48BB
11798  48BC
11799  48BD
11800  48BE
11801  48BF
11802  48C0
11803  48C1
11804  48C2
11805  48C3
11806  48C4
11807  48C5
11808  48C6
11809  48C7
11810  48C8
11811  48C9
11812  48CA
11813  48CB
11814  48CC
11815  48CD
11816  48CE
11817  48CF
11818  48D0
11819  48D1
11820  48D2
11821  48D3
11822  48D4
11823  48D5
11824  48D6
11825  48D7
11826  48D8
11827  48D9
11828  48DA
11829  48DB
11830  48DC
11831  48DD
11832  48DE
11833  48DF
11834  48E0
11835  48E1
11836  48E2
11837  48E3
11838  48E4
11839  48E5
11840  48E6
11841  48E7
11842  48E8
11843  48E9
11844  48EA
11845  48EB
11846  48EC
11847  48ED
11848  48EE
11849  48EF
11850  48F0
11851  48F1
11852  48F2
11853  48F3
11854  48F4
11855  48F5
11856  48F6
11857  48F7
11858  48F8
11859  48F9
11860  48FA
11861  48FB
11862  48FC
11863  48FD
11864  48FE
11865  48FF
11866  4900
11867  4901
11868  4902
11869  4903
11870  4904
11871  4905
11872  4906
11873  4907
11874  4908
11875  4909
11876  490A
11877  490B
11878  490C
11879  490D
11880  490E
11881  490F
11882  4910
11883  4911
11884  4912
11885  4913
11886  4914
11887  4915
11888  4916
11889  4917
11890  4918
11891  4919
11892  491A
11893  491B
11894  491C
11895  491D
11896  491E
11897  491F
11898  4920
11899  4921
11900  4922
11901  4923
11902  4924
11903  4925
11904  4926
11905  4927
11906  4928
11907  4929
11908  492A
11909  492B
11910  492C
11911  492D
11912  492E
11913  492F
11914  4930
11915  4931
11916  4932
11917  4933
11918  4934
11919  4935
11920  4936
11921  4937
11922  4938
11923  4939
11924  493A
11925  493B
11926  493C
11927  493D
11928  493E
11929  493F
11930  4940
11931  4941
11932  4942
11933  4943
11934  4944
11935  4945
11936  4946
11937  4947
11938  4948
11939  4949
11940  494A
11941  494B
11942  494C
11943  494D
11944  494E
11945  494F
11946  4950
11947  4951
11948  4952
11949  4953
11950  4954
11951  4955
11952  4956
11953  4957
11954  4958
11955  4959
11956  495A
11957  495B
11958  495C
11959  495D
11960  495E
11961  495F
11962  4960
11963  4961
11964  4962
11965  4963
11966  4964
11967  4965
11968  4966
11969  4967
11970  4968
11971  4969
11972  496A
11973  496B
11974  496C
11975  496D
11976  496E
11977  496F
11978  4970
11979  4971
11980  4972
11981  4973
11982  4974
11983  4975
11984  4976
11985  4977
11986  4978
11987  4979
11988  497A
11989  497B
11990  497C
11991  497D
11992  497E
11993  497F
11994  4980
11995  4981
11996  4982
11997  4983
11998  4984
11999  4985
12000  4986
12001  4987
12002  4988
12003  4989
12004  498A
12005  498B
12006  498C
12007  498D
12008  498E
12009  498F
12010  4990
12011  4991
12012  4992
12013  4993
12014  4994
12015  4995
12016  4996
12017  4997
12018  4998
12019  4999
12020  499A
12021  499B
12022  499C
12023  499D
12024  499E
12025  499F
12026  49A0
12027  49A1
12028  49A2
12029  49A3
12030  49A4
12031  49A5
12032  49A6
12033  49A7
12034  49A8
12035  49A9
12036  49AA
12037  49AB
12038  49AC
12039  49AD
12040  49AE
12041  49AF
12042  49B0
12043  49B1
12044  49B2
12045  49B3
12046  49B4
12047  49B5
12048  49B6
12049  49B7
12050  49B8
12051  49B9
12052  49BA
12053  49BB
12054  49BC
12055  49BD
12056  49BE
12057  49BF
12058  49C0
12059  49C1
12060  49C2
12061  49C3
12062  49C4
12063  49C5
12064  49C6
12065  49C7
12066  49C8
12067  49C9
12068  49CA
12069  49CB
12070  49CC
12071  49CD
12072  49CE
12073  49CF
12074  49D0
12075  49D1
12076  49D2
12077  49D3
12078  49D4
12079  49D5
12080  49D6
12081  49D7
12082  49D8
12083  49D9
12084  49DA
12085  49DB
12086  49DC
12087  49DD
12088  49DE
12089  49DF
12090  49E0
12091  49E1
12092  49E2
12093  49E3
12094  49E4
12095  49E5
12096  49E6
12097  49E7
12098  49E8
12099  49E9
12100  49EA
12101  49EB
12102  49EC
12103  49ED
12104  49EE
12105  49EF
12106  49F0
12107  49F1
12108  49F2
12109  49F3
12110  49F4
12111  49F5
12112  49F6
12113  49F7
12114  49F8
12115  49F9
12116  49FA
12117  49FB
12118  49FC
12119  49FD
12120  49FE
12121  49FF
12122  4A00
12123  4A01
12124  4A02
12125  4A03
12126  4A04
12127  4A05
12128  4A06
12129  4A07
12130  4A08
12131  4A09
12132  4A0A
12133  4A0B
12134  4A0C
12135  4A0D
12136  4A0E
12137  4A0F
12138  4A10
12139  4A11
12140  4A12
12141  4A13
12142  4A14
12143  4A15
12144  4A16
12145  4A17
12146  4A18
12147  4A19
12148  4A1A
12149  4A1B
12150  4A1C
12151  4A1D
12152  4A1E
12153  4A1F
12154  4A20
12155  4A21
12156  4A22
12157  4A23
12158  4A24
12159  4A25
12160  4A26
12161  4A27
12162  4A28
12163  4A29
12164  4A2A
12165  4A2B
12166  4A2C
12167  4A2D
12168  4A2E
12169  4A2F
12170  4A30
12171  4A31
12172  4A32
12173  4A33
12174  4A34
12175  4A35
12176  4A36
12177  4A37
12178  4A38
12179  4A39
12180  4A3A
12181  4A3B
12182  4A3C
12183  4A3D
12184  4A3E
12185  4A3F
12186  4A40
12187  4A41
12188  4A42
12189  4A43
12190  4A44
12191  4A45
12192  4A46
12193  4A47
12194  4A48
12195  4A49
12196  4A4A
12197  4A4B
12198  4A4C
12199  4A4D
12200  4A4E
12201  4A4F
12202  4A50
12203  4A51
12204  4A52
12205  4A53
12206  4A54
12207  4A55
12208  4A56
12209  4A57
12210  4A58
12211  4A59
12212  4A5A
12213  4A5B
12214  4A5C
12215  4A5D
12216  4A5E
12217  4A5F
12218  4A60
12219  4A61
12220  4A62
12221  4A63
12222  4A64
12223  4A65
12224  4A66
12225  4A67
12226  4A68
12227  4A69
12228  4A6A
12229  4A6B
12230  4A6C
12231  4A6D
12232  4A6E
12233  4A6F
12234  4A70
12235  4A71
12236  4A72
12237  4A73
12238  4A74
12239  4A75
12240  4A76
12241  4A77
12242  4A78
12243  4A79
12244  4A7A
12245  4A7B
12246  4A7C
12247  4A7D
12248  4A7E
12249  4A7F
12250  4A80
12251  4A81
12252  4A82
12253  4A83
12254  4A84
12255  4A85
12256  4A86
12257  4A87
12258  4A88
12259  4A89
12260  4A8A
12261  4A8B
12262  4A8C
12263  4A8D
12264  4A8E
12265  4A8F
12266  4A90
12267  4A91
12268  4A92
12269  4A93
12270  4A94
12271  4A95
12272  4A96
12273  4A97
12274  4A98
12275  4A99
12276  4A9A
12277  4A9B
12278  4A9C
12279  4A9D
12280  4A9E
12281  4A9F
12282  4AA0
12283  4AA1
12284  4AA2
12285  4AA3
12286  4AA4
12287  4AA5
12288  4AA6
12289  4AA7
12290  4AA8
12291  4AA9
12292  4AAA
12293  4AAB
12294  4AAC
12295  4AAD
12296  4AAE
12297  4AAF
12298  4AB0
12299  4AB1
12300  4AB2
12301  4AB3
12302  4AB4
12303  4AB5
12304  4AB6
12305  4AB7
12306  4AB8
12307  4AB9
12308  4ABA
12309  4ABB
12310  4ABC
12311  4ABD
12312  4ABE
12313  4ABF
12314  4AC0
12315  4AC1
12316  4AC2
12317  4AC3
12318  4AC4
12319  4AC5
12320  4AC6
12321  4AC7
12322  4AC8
12323  4AC9
12324  4ACA
12325  4ACB
12326  4ACC
12327  4ACD
12328  4ACE
12329  4ACF
12330  4AD0
12331  4AD1
12332  4AD2
12333  4AD3
12334  4AD4
12335  4AD5
12336  4AD6
12337  4AD7
12338  4AD8
12339  4AD9
12340  4ADA
12341  4ADB
12342  4ADC
12343  4ADD
12344  4ADE
12345  4ADF
12346  4AE0
12347  4AE1
12348  4AE2
12349  4AE3
12350  4AE4
12351  4AE5
12352  4AE6
12353  4AE7
12354  4AE8
12355  4AE9
12356  4AEA
12357  4AEB
12358  4AEC
12359  4AED
12360  4AEE
12361  4AEF
12362  4AF0
12363  4AF1
12364  4AF2
12365  4AF3
12366  4AF4
12367  4AF5
12368  4AF6
12369  4AF7
12370  4AF8
12371  4AF9
12372  4AFA
12373  4AFB
12374  4AFC
12375  4AFD
12376  4AFE
12377  4AFF
12378  4B00
12379  4B01
12380  4B02
12381  4B03
12382  4B04
12383  4B05
12384  4B06
12385  4B07
12386  4B08
12387  4B09
12388  4B0A
12389  4B0B
12390  4B0C
12391  4B0D
12392  4B0E
12393  4B0F
12394  4B10
12395  4B11
12396  4B12
12397  4B13
12398  4B14
12399  4B15
12400  4B16
12401  4B17
12402  4B18
12403  4B19
12404  4B1A
12405  4B1B
12406  4B1C
12407  4B1D
12408  4B1E
12409  4B1F
12410  4B20
12411  4B21
12412  4B22
12413  4B23
12414  4B24
12415  4B25
12416  4B26
12417  4B27
12418  4B28
12419  4B29
12420  4B2A
12421  4B2B
12422  4B2C
12423  4B2D
12424  4B2E
12425  4B2F
12426  4B30
12427  4B31
12428  4B32
12429  4B33
12430  4B34
12431  4B35
12432  4B36
12433  4B37
12434  4B38
12435  4B39
12436  4B3A
12437  4B3B
12438  4B3C
12439  4B3D
12440  4B3E
12441  4B3F
12442  4B40
12443  4B41
12444  4B42
12445  4B43
12446  4B44
12447  4B45
12448  4B46
12449  4B47
12450  4B48
12451  4B49
12452  4B4A
12453  4B4B
12454  4B4C
12455  4B4D
12456  4B4E
12457  4B4F
12458  4B50
12459  4B51
12460  4B52
12461  4B53
12462  4B54
12463  4B55
12464  4B56
12465  4B57
12466  4B58
12467  4B59
12468  4B5A
12469  4B5B
12470  4B5C
12471  4B5D
12472  4B5E
12473  4B5F
12474  4B60
12475  4B61
12476  4B62
12477  4B63
12478  4B64
12479  4B65
12480  4B66
12481  4B67
12482  4B68
12483  4B69
12484  4B6A
12485  4B6B
12486  4B6C
12487  4B6D
12488  4B6E
12489  4B6F
12490  4B70
12491  4B71
12492  4B72
12493  4B73
12494  4B74
12495  4B75
12496  4B76
12497  4B77
12498  4B78
12499  4B79
12500  4B7A
12501  4B7B
12502  4B7C
12503  4B7D
12504  4B7E
12505  4B7F
12506  4B80
12507  4B81
12508  4B82
12509  4B83
12510  4B84
12511  4B85
12512  4B86
12513  4B87
12514  4B88
12515  4B89
12516  4B8A
12517  4B8B
12518  4B8C
12519  4B8D
12520  4B8E
12521  4B8F
12522  4B90
12523  4B91
12524  4B92
12525  4B93
12526  4B94
12527  4B95
12528  4B96
12529  4B97
12530  4B98
12531  4B99
12532  4B9A
12533  4B9B
12534  4B9C
12535  4B9D
12536  4B9E
12537  4B9F
12538  4BA0
12539  4BA1
12540  4BA2
12541  4BA3
12542  4BA4
12543  4BA5
12544  4BA6
12545  4BA7
12546  4BA8
12547  4BA9
12548  4BAA
12549  4BAB
12550  4BAC
12551  4BAD
12552  4BAE
12553  4BAF
12554  4BB0
12555  4BB1
12556  4BB2
12557  4BB3
12558  4BB4
12559  4BB5
12560  4BB6
12561  4BB7
12562  4BB8
12563  4BB9
12564  4BBA
12565  4BBB
12566  4BBC
12567  4BBD
12568  4BBE
12569  4BBF
12570  4BC0
12571  4BC1
12572  4BC2
12573  4BC3
12574  4BC4
12575  4BC5
12576  4BC6
12577  4BC7
12578  4BC8
12579  4BC9
12580  4BCA
12581  4BCB
12582  4BCC
12583  4BCD
12584  4BCE
12585  4BCF
12586  4BD0
12587  4BD1
12588  4BD2
12589  4BD3
12590  4BD4
12591  4BD5
12592  4BD6
12593  4BD7
12594  4BD8
12595  4BD9
12596  4BDA
12597  4BDB
12598  4BDC
12599  4BDD
12600  4BDE
12601  4BDF
12602  4BE0
12603  4BE1
12604  4BE2
12605  4BE3
12606  4BE4
12607  4BE5
12608  4BE6
12609  4BE7
12610  4BE8
12611  4BE9
12612  4BEA
12613  4BEB
12614  4BEC
12615  4BED
12616  4BEE
12617  4BEF
12618  4BF0
12619  4BF1
12620  4BF2
12621  4BF3
12622  4BF4
12623  4BF5
12624  4BF6
12625  4BF7
12626  4BF8
12627  4BF9
12628  4BFA
12629  4BFB
12630  4BFC
12631  4BFD
12632  4BFE
12633  4BFF
12634  4C00
12635  4C01
12636  4C02
12637  4C03
12638  4C04
12639  4C05
12640  4C06
12641  4C07
12642  4C08
12643  4C09
12644  4C0A
12645  4C0B
12646  4C0C
12647  4C0D
12648  4C0E
12649  4C0F
12650  4C10
12651  4C11
12652  4C12
12653  4C13
12654  4C14
12655  4C15
12656  4C16
12657  4C17
12658  4C18
12659  4C19
12660  4C1A
12661  4C1B
12662  4C1C
12663  4C1D
12664  4C1E
12665  4C1F
12666  4C20
12667  4C21
12668  4C22
12669  4C23
12670  4C24
12671  4C25
12672  4C26
12673  4C27
12674  4C28
12675  4C29
12676  4C2A
12677  4C2B
12678  4C2C
12679  4C2D
12680  4C2E
12681  4C2F
12682  4C30
12683  4C31
12684  4C32
12685  4C33
12686  4C34
12687  4C35
12688  4C36
12689  4C37
12690  4C38
12691  4C39
12692  4C3A
12693  4C3B
12694  4C3C
12695  4C3D
12696  4C3E
12697  4C3F
12698  4C40
12699  4C41
12700  4C42
12701  4C43
12702  4C44
12703  4C45
12704  4C46
12705  4C47
12706  4C48
12707  4C49
12708  4C4A
12709  4C4B
12710  4C4C
12711  4C4D
12712  4C4E
12713  4C4F
12714  4C50
12715  4C51
12716  4C52
12717  4C53
12718  4C54
12719  4C55
12720  4C56
12721  4C57
12722  4C58
12723  4C59
12724  4C5A
12725  4C5B
12726  4C5C
12727  4C5D
12728  4C5E
12729  4C5F
12730  4C60
12731  4C61
12732  4C62
12733  4C63
12734  4C64
12735  4C65
12736  4C66
12737  4C67
12738  4C68
12739  4C69
12740  4C6A
12741  4C6B
12742  4C6C
12743  4C6D
12744  4C6E
12745  4C6F
12746  4C70
12747  4C71
12748  4C72
12749  4C73
12750  4C74
12751  4C75
12752  4C76
12753  4C77
12754  4C78
12755  4C79
12756  4C7A
12757  4C7B
12758  4C7C
12759  4C7D
12760  4C7E
12761  4C7F
12762  4C80
12763  4C81
12764  4C82
12765  4C83
12766  4C84
12767  4C85
12768  4C86
12769  4C87
12770  4C88
12771  4C89
12772  4C8A
12773  4C8B
12774  4C8C
12775  4C8D
12776  4C8E
12777  4C8F
12778  4C90
12779  4C91
12780  4C92
12781  4C93
12782  4C94
12783  4C95
12784  4C96
12785  4C97
12786  4C98
12787  4C99
12788  4C9A
12789  4C9B
12790  4C9C
12791  4C9D
12792  4C9E
12793  4C9F
12794  4CA0
12795  4CA1
12796  4CA2
12797  4CA3
12798  4CA4
12799  4CA5
12800  4CA6
12801  4CA7
12802  4CA8
12803  4CA9
12804  4CAA
12805  4CAB
12806  4CAC
12807  4CAD
12808  4CAE
12809  4CAF
12810  4CB0
12811  4CB1
12812  4CB2
12813  4CB3
12814  4CB4
12815  4CB5
12816  4CB6
12817  4CB7
12818  4CB8
12819  4CB9
12820  4CBA
12821  4CBB
12822  4CBC
12823  4CBD
12824  4CBE
12825  4CBF
12826  4CC0
12827  4CC1
12828  4CC2
12829  4CC3
12830  4CC4
12831  4CC5
12832  4CC6
12833  4CC7
12834  4CC8
12835  4CC9
12836  4CCA
12837  4CCB
12838  4CCC
12839  4CCD
12840  4CCE
12841  4CCF
12842  4CD0
12843  4CD1
12844  4CD2
12845  4CD3
12846  4CD4
12847  4CD5
12848  4CD6
12849  4CD7
12850  4CD8
12851  4CD9
12852  4CDA
12853  4CDB
12854  4CDC
12855  4CDD
12856  4CDE
12857  4CDF
12858  4CE0
12859  4CE1
12860  4CE2
12861  4CE3
12862  4CE4
12863  4CE5
12864  4CE6
12865  4CE7
12866  4CE8
12867  4CE9
12868  4CEA
12869  4CEB
12870  4CEC
12871  4CED
12872  4CEE
12873  4CEF
12874  4CF0
12875  4CF1
12876  4CF2
12877  4CF3
12878  4CF4
12879  4CF5
12880  4CF6
12881  4CF7
12882  4CF8
12883  4CF9
12884  4CFA
12885  4CFB
12886  4CFC
12887  4CFD
12888  4CFE
12889  4CFF
12890  4D00
12891  4D01
12892  4D02
12893  4D03
12894  4D04
12895  4D05
12896  4D06
12897  4D07
12898  4D08
12899  4D09
12900  4D0A
12901  4D0B
12902  4D0C
12903  4D0D
12904  4D0E
12905  4D0F
12906  4D10
12907  4D11
12908  4D12
12909  4D13
12910  4D14
12911  4D15
12912  4D16
12913  4D17
12914  4D18
12915  4D19
12916  4D1A
12917  4D1B
12918  4D1C
12919  4D1D
12920  4D1E
12921  4D1F
12922  4D20
12923  4D21
12924  4D22
12925  4D23
12926  4D24
12927  4D25
12928  4D26
12929  4D27
12930  4D28
12931  4D29
12932  4D2A
12933  4D2B
12934  4D2C
12935  4D2D
12936  4D2E
12937  4D2F
12938  4D30
12939  4D31
12940  4D32
12941  4D33
12942  4D34
12943  4D35
12944  4D36
12945  4D37
12946  4D38
12947  4D39
12948  4D3A
12949  4D3B
12950  4D3C
12951  4D3D
12952  4D3E
12953  4D3F
12954  4D40
12955  4D41
12956  4D42
12957  4D43
12958  4D44
12959  4D45
12960  4D46
12961  4D47
12962  4D48
12963  4D49
12964  4D4A
12965  4D4B
12966  4D4C
12967  4D4D
12968  4D4E
12969  4D4F
12970  4D50
12971  4D51
12972  4D52
12973  4D53
12974  4D54
12975  4D55
12976  4D56
12977  4D57
12978  4D58
12979  4D59
12980  4D5A
12981  4D5B
12982  4D5C
12983  4D5D
12984  4D5E
12985  4D5F
12986  4D60
12987  4D61
12988  4D62
12989  4D63
12990  4D64
12991  4D65
12992  4D66
12993  4D67
12994  4D68
12995  4D69
12996  4D6A
12997  4D6B
12998  4D6C
12999  4D6D
13000  4D6E
13001  4D6F
13002  4D70
13003  4D71
13004  4D72
13005  4D73
13006  4D74
13007  4D75
13008  4D76
13009  4D77
13010  4D78
13011  4D79
13012  4D7A
13013  4D7B
13014  4D7C
13015  4D7D
13016  4D7E
13017  4D7F
13018  4D80
13019  4D81
13020  4D82
13021  4D83
13022  4D84
13023  4D85
13024  4D86
13025  4D87
13026  4D88
13027  4D89
13028  4D8A
13029  4D8B
13030  4D8C
13031  4D8D
13032  4D8E
13033  4D8F
13034  4D90
13035  4D91
13036  4D92
13037  4D93
13038  4D94
13039  4D95
13040  4D96
13041  4D97
13042  4D98
13043  4D99
13044  4D9A
13045  4D9B
13046  4D9C
13047  4D9D
13048  4D9E
13049  4D9F
13050  4DA0
13051  4DA1
13052  4DA2
13053  4DA3
13054  4DA4
13055  4DA5
13056  4DA6
13057  4DA7
13058  4DA8
13059  4DA9
13060  4DAA
13061  4DAB
13062  4DAC
13063  4DAD
13064  4DAE
13065  4DAF
13066  4DB0
13067  4DB1
13068  4DB2
13069  4DB3
13070  4DB4
13071  4DB5
13072  4DB6
13073  4DB7
13074  4DB8
13075  4DB9
13076  4DBA
13077  4DBB
13078  4DBC
13079  4DBD
13080  4DBE
13081  4DBF
13082  4DC0
13083  4DC1
13084  4DC2
13085  4DC3
13086  4DC4
13087  4DC5
13088  4DC6
13089  4DC7
13090  4DC8
13091  4DC9
13092  4DCA
13093  4DCB
13094  4DCC
13095  4DCD
13096  4DCE
13097  4DCF
13098  4DD0
13099  4DD1
13100  4DD2
13101  4DD3
13102  4DD4
13103  4DD5
13104  4DD6
13105  4DD7
13106  4DD8
13107  4DD9
13108  4DDA
13109  4DDB
13110  4DDC
13111  4DDD
13112  4DDE
13113  4DDF
13114  4DE0
13115  4DE1
13116  4DE2
13117  4DE3
13118  4DE4
13119  4DE5
13120  4DE6
13121  4DE7
13122  4DE8
13123  4DE9
13124  4DEA
13125  4DEB
13126  4DEC
13127  4DED
13128  4DEE
13129  4DEF
13130  4DF0
13131  4DF1
13132  4DF2
13133  4DF3
13134  4DF4
13135  4DF5
13136  4DF6
13137  4DF7
13138  4DF8
13139  4DF9
13140  4DFA
13141  4DFB
13142  4DFC
13143  4DFD
13144  4DFE
13145  4DFF
13146  4E00
13147  4E01
13148  4E02
13149  4E03
13150  4E04
13151  4E05
13152  4E06
13153  4E07
13154  4E08
13155  4E09
13156  4E0A
13157  4E0B
13158  4E0C
13159  4E0D
13160  4E0E
13161  4E0F
13162  4E10
13163  4E11
13164  4E12
13165  4E13
13166  4E14
13167  4E15
13168  4E16
13169  4E17
13170  4E18
13171  4E19
13172  4E1A
13173  4E1B
13174  4E1C
13175  4E1D
13176  4E1E
13177  4E1F
13178  4E20
13179  4E21
13180  4E22
13181  4E23
13182  4E24
13183  4E25
13184  4E26
13185  4E27
13186  4E28
13187  4E29
13188  4E2A
13189  4E2B
13190  4E2C
13191  4E2D
13192  4E2E
13193  4E2F
13194  4E30
13195  4E31
13196  4E32
13197  4E33
13198  4E34
13199  4E35
13200  4E36
13201  4E37
13202  4E38
13203  4E39
13204  4E3A
13205  4E3B
13206  4E3C
13207  4E3D
13208  4E3E
13209  4E3F
13210  4E40
13211  4E41
13212  4E42
13213  4E43
13214  4E44
13215  4E45
13216  4E46
13217  4E47
13218  4E48
13219  4E49
13220  4E4A
13221  4E4B
13222  4E4C
13223  4E4D
13224  4E4E
13225  4E4F
13226  4E50
13227  4E51
13228  4E52
13229  4E53
13230  4E54
13231  4E55
13232  4E56
13233  4E57
13234  4E58
13235  4E59
13236  4E5A
13237  4E5B
13238  4E5C
13239  4E5D
13240  4E5E
13241  4E5F
13242  4E60
13243  4E61
13244  4E62
13245  4E63
13246  4E64
13247  4E65
13248  4E66
13249  4E67
13250  4E68
13251  4E69
13252  4E6A
13253  4E6B
13254  4E6C
13255  4E6D
13256  4E6E
13257  4E6F
13258  4E70
13259  4E71
13260  4E72
13261  4E73
13262  4E74
13263  4E75
13264  4E76
13265  4E77
13266  4E78
13267  4E79
13268  4E7A
13269  4E7B
13270  4E7C
13271  4E7D
13272  4E7E
13273  4E7F
13274  4E80
13275  4E81
13276  4E82
13277  4E83
13278  4E84
13279  4E85
13280  4E86
13281  4E87
13282  4E88
13283  4E89
13284  4E8A
13285  4E8B
13286  4E8C
13287  4E8D
13288  4E8E
13289  4E8F
13290  4E90
13291  4E91
13292  4E92
13293  4E93
13294  4E94
13295  4E95
13296  4E96
13297  4E97
13298  4E98
13299  4E99
13300  4E9A
13301  4E9B
13302  4E9C
13303  4E9D
13304  4E9E
13305  4E9F
13306  4EA0
13307  4EA1
13308  4EA2
13309  4EA3
13310  4EA4
13311  4EA5
13312  4EA6
13313  4EA7
13314  4EA8
13315  4EA9
13316  4EAA
13317  4EAB
13318  4EAC
13319  4EAD
13320  4EAE
13321  4EAF
13322  4EB0
13323  4EB1
13324  4EB2
13325  4EB3
13326  4EB4
13327  4EB5
13328  4EB6
13329  4EB7
13330  4EB8
13331  4EB9
13332  4EBA
13333  4EBB
13334  4EBC
13335  4EBD
13336  4EBE
13337  4EBF
13338  4EC0
13339  4EC1
13340  4EC2
13341  4EC3
13342  4EC4
13343  4EC5
13344  4EC6
13345  4EC7
13346  4EC8
13347  4EC9
13348  4ECA
13349  4ECB
13350  4ECC
13351  4ECD
13352  4ECE
13353  4ECF
13354  4ED0
13355  4ED1
13356  4ED2
13357  4ED3
13358  4ED4
13359  4ED5
13360  4ED6
13361  4ED7
13362  4ED8
13363  4ED9
13364  4EDA
13365  4EDB
13366  4EDC
13367  4EDD
13368  4EDE
13369  4EDF
13370  4EE0
13371  4EE1
13372  4EE2
13373  4EE3
13374  4EE4
13375  4EE5
13376  4EE6
13377  4EE7
13378  4EE8
13379  4EE9
13380  4EEA
13381  4EEB
13382  4EEC
13383  4EED
13384  4EEE
13385  4EEF
13386  4EF0
13387  4EF1
13388  4EF2
13389  4EF3
13390  4EF4
13391  4EF5
13392  4EF6
13393  4EF7
13394  4EF8
13395  4EF9
13396  4EFA
13397  4EFB
13398  4EFC
13399  4EFD
13400  4EFE
13401  4EFF
13402  4F00
13403  4F01
13404  4F02
13405  4F03
13406  4F04
13407  4F05
13408  4F06
13409  4F07
13410  4F08
13411  4F09
13412  4F0A
13413  4F0B
13414  4F0C
13415  4F0D
13416  4F0E
13417  4F0F
13418  4F10
13419  4F11
13420  4F12
13421  4F13
13422  4F14
13423  4F15
13424  4F16
13425  4F17
13426  4F18
13427  4F19
13428  4F1A
13429  4F1B
13430  4F1C
13431  4F1D
13432  4F1E
13433  4F1F
13434  4F20
13435  4F21
13436  4F22
13437  4F23
13438  4F24
13439  4F25
13440  4F26
13441  4F27
13442  4F28
13443  4F29
13444  4F2A
13445  4F2B
13446  4F2C
13447  4F2D
13448  4F2E
13449  4F2F
13450  4F30
13451  4F31
13452  4F32
13453  4F33
13454  4F34
13455  4F35
13456  4F36
13457  4F37
13458  4F38
13459  4F39
13460  4F3A
13461  4F3B
13462  4F3C
13463  4F3D
13464  4F3E
13465  4F3F
13466  4F40
13467  4F41
13468  4F42
13469  4F43
13470  4F44
13471  4F45
13472  4F46
13473  4F47
13474  4F48
13475  4F49
13476  4F4A
13477  4F4B
13478  4F4C
13479  4F4D
13480  4F4E
13481  4F4F
13482  4F50
13483  4F51
13484  4F52
13485  4F53
13486  4F54
13487  4F55
13488  4F56
13489  4F57
13490  4F58
13491  4F59
13492  4F5A
13493  4F5B
13494  4F5C
13495  4F5D
13496  4F5E
13497  4F5F
13498  4F60
13499  4F61
13500  4F62
13501  4F63
13502  4F64
13503  4F65
13504  4F66
13505  4F67
13506  4F68
13507  4F69
13508  4F6A
13509  4F6B
13510  4F6C
13511  4F6D
13512  4F6E
13513  4F6F
13514  4F70
13515  4F71
13516  4F72
13517  4F73
13518  4F74
13519  4F75
13520  4F76
13521  4F77
13522  4F78
13523  4F79
13524  4F7A
13525  4F7B
13526  4F7C
13527  4F7D
13528  4F7E
13529  4F7F
13530  4F80
13531  4F81
13532  4F82
13533  4F83
13534  4F84
13535  4F85
13536  4F86
13537  4F87
13538  4F88
13539  4F89
13540  4F8A
13541  4F8B
13542  4F8C
13543  4F8D
13544  4F8E
13545  4F8F
13546  4F90
13547  4F91
13548  4F92
13549  4F93
13550  4F94
13551  4F95
13552  4F96
13553  4F97
13554  4F98
13555  4F99
13556  4F9A
13557  4F9B
13558  4F9C
13559  4F9D
13560  4F9E
13561  4F9F
13562  4FA0
13563  4FA1
13564  4FA2
13565  4FA3
13566  4FA4
13567  4FA5
13568  4FA6
13569  4FA7
13570  4FA8
13571  4FA9
13572  4FAA
13573  4FAB
13574  4FAC
13575  4FAD
13576  4FAE
13577  4FAF
13578  4FB0
13579  4FB1
13580  4FB2
13581  4FB3
13582  4FB4
13583  4FB5
13584  4FB6
13585  4FB7
13586  4FB8
13587  4FB9
13588  4FBA
13589  4FBB
13590  4FBC
13591  4FBD
13592  4FBE
13593  4FBF
13594  4FC0
13595  4FC1
13596  4FC2
13597  4FC3
13598  4FC4
13599  4FC5
13600  4FC6
13601  4FC7
13602  4FC8
13603  4FC9
13604  4FCA
13605  4FCB
13606  4FCC
13607  4FCD
13608  4FCE
13609  4FCF
13610  4FD0
13611  4FD1
13612  4FD2
13613  4FD3
13614  4FD4
13615  4FD5
13616  4FD6
13617  4FD7
13618  4FD8
13619  4FD9
13620  4FDA
13621  4FDB
13622  4FDC
13623  4FDD
13624  4FDE
13625  4FDF
13626  4FE0
13627  4FE1
13628  4FE2
13629  4FE3
13630  4FE4
13631  4FE5
13632  4FE6
13633  4FE7
13634  4FE8
13635  4FE9
13636  4FEA
13637  4FEB
13638  4FEC
13639  4FED
13640  4FEE
13641  4FEF
13642  4FF0
13643  4FF1
13644  4FF2
13645  4FF3
13646  4FF4
13647  4FF5
13648  4FF6
13649  4FF7
13650  4FF8
13651  4FF9
13652  4FFA
13653  4FFB
13654  4FFC
13655  4FFD
13656  4FFE
13657  4FFF
13658  5000
13659  5001
13660  5002
13661  5003
13662  5004
13663  5005
13664  5006
13665  5007
13666  5008
13667  5009
13668  500A
13669  500B
13670  500C
13671  500D
13672  500E
13673  500F
13674  5010
13675  5011
13676  5012
13677  5013
13678  5014
13679  5015
13680  5016
13681  5017
13682  5018
13683  5019
13684  501A
13685  501B
13686  501C
13687  501D
13688  501E
13689  501F
13690  5020
13691  5021
13692  5022
13693  5023
13694  5024
13695  5025
13696  5026
13697  5027
13698  5028
13699  5029
13700  502A
13701  502B
13702  502C
13703  502D
13704  502E
13705  502F
13706  5030
13707  5031
13708  5032
13709  5033
13710  5034
13711  5035
13712  5036
13713  5037
13714  5038
13715  5039
13716  503A
13717  503B
13718  503C
13719  503D
13720  503E
13721  503F
13722  5040
13723  5041
13724  5042
13725  5043
13726  5044
13727  5045
13728  5046
13729  5047
13730  5048
13731  5049
13732  504A
13733  504B
13734  504C
13735  504D
13736  504E
13737  504F
13738  5050
13739  5051
13740  5052
13741  5053
13742  5054
13743  5055
13744  5056
13745  5057
13746  5058
13747  5059
13748  505A
13749  505B
13750  505C
13751  505D
13752  505E
13753  505F
13754  5060
13755  5061
13756  5062
13757  5063
13758  5064
13759  5065
13760  5066
13761  5067
13762  5068
13763  5069
13764  506A
13765  506B
13766  506C
13767  506D
13768  506E
13769  506F
13770  5070
13771  5071
13772  5072
13773  5073
13774  5074
13775  5075
13776  5076
13777  5077
13778  5078
13779  5079
13780  507A
13781  507B
13782  507C
13783  507D
13784  507E
13785  507F
13786  5080
13787  5081
13788  5082
13789  5083
13790  5084
13791  5085
13792  5086
13793  5087
13794  5088
13795  5089
13796  508A
13797  508B
13798  508C
13799  508D
13800  508E
13801  508F
13802  5090
13803  5091
13804  5092
13805  5093
13806  5094
13807  5095
13808  5096
13809  5097
13810  5098
13811  5099
13812  509A
13813  509B
13814  509C
13815  509D
13816  509E
13817  509F
13818  50A0
13819  50A1
13820  50A2
13821  50A3
13822  50A4
13823  50A5
13824  50A6
13825  50A7
13826  50A8
13827  50A9
13828  50AA
13829  50AB
13830  50AC
13831  50AD
13832  50AE
13833  50AF
13834  50B0
13835  50B1
13836  50B2
13837  50B3
13838  50B4
13839  50B5
13840  50B6
13841  50B7
13842  50B8
13843  50B9
13844  50BA
13845  50BB
13846  50BC
13847  50BD
13848  50BE
13849  50BF
13850  50C0
13851  50C1
13852  50C2
13853  50C3
13854  50C4
13855  50C5
13856  50C6
13857  50C7
13858  50C8
13859  50C9
13860  50CA
13861  50CB
13862  50CC
13863  50CD
13864  50CE
13865  50CF
13866  50D0
13867  50D1
13868  50D2
13869  50D3
13870  50D4
13871  50D5
13872  50D6
13873  50D7
13874  50D8
13875  50D9
13876  50DA
13877  50DB
13878  50DC
13879  50DD
13880  50DE
13881  50DF
13882  50E0
13883  50E1
13884  50E2
13885  50E3
13886  50E4
13887  50E5
13888  50E6
13889  50E7
13890  50E8
13891  50E9
13892  50EA
13893  50EB
13894  50EC
13895  50ED
13896  50EE
13897  50EF
13898  50F0
13899  50F1
13900  50F2
13901  50F3
13902  50F4
13903  50F5
13904  50F6
13905  50F7
13906  50F8
13907  50F9
13908  50FA
13909  50FB
13910  50FC
13911  50FD
13912  50FE
13913  50FF
13914  5100
13915  5101
13916  5102
13917  5103
13918  5104
13919  5105
13920  5106
13921  5107
13922  5108
13923  5109
13924  510A
13925  510B
13926  510C
13927  510D
13928  510E
13929  510F
13930  5110
13931  5111
13932  5112
13933  5113
13934  5114
13935  5115
13936  5116
13937  5117
13938  5118
13939  5119
13940  511A
13941  511B
13942  511C
13943  511D
13944  511E
13945  511F
13946  5120
13947  5121
13948  5122
13949  5123
13950  5124
13951  5125
13952  5126
13953  5127
13954  5128
13955  5129
13956  512A
13957  512B
13958  512C
13959  512D
13960  512E
13961  512F
13962  5130
13963  5131
13964  5132
13965  5133
13966  5134
13967  5135
13968  5136
13969  5137
13970  5138
13971  5139
13972  513A
13973  513B
13974  513C
13975  513D
13976  513E
13977  513F
13978  5140
13979  5141
13980  5142
13981  5143
13982  5144
13983  5145
13984  5146
13985  5147
13986  5148
13987  5149
13988  514A
13989  514B
13990  514C
13991  514D
13992  514E
13993  514F
13994  5150
13995  5151
13996  5152
13997  5153
13998  5154
13999  5155
14000  5156
14001  5157
14002  5158
14003  5159
14004  515A
14005  515B
14006  515C
14007  515D
14008  515E
14009  515F
14010  5160
14011  5161
14012  5162
14013  5163
14014  5164
14015  5165
14016  5166
14017  5167
14018  5168
14019  5169
14020  516A
14021  516B
14022  516C
14023  516D
14024  516E
14025  516F
14026  5170
14027  5171
14028  5172
14029  5173
14030  5174
14031  5175
14032  5176
14033  5177
14034  5178
14035  5179
14036  517A
14037  517B
14038  517C
14039  517D
14040  517E
14041  517F
14042  5180
14043  5181
14044  5182
14045  5183
14046  5184
14047  5185
14048  5186
14049  5187
14050  5188
14051  5189
14052  518A
14053  518B
14054  518C
14055  518D
14056  518E
14057  518F
14058  5190
14059  5191
14060  5192
14061  5193
14062  5194
14063  5195
14064  5196
14065  5197
14066  5198
14067  5199
14068  519A
14069  519B
14070  519C
14071  519D
14072  519E
14073  519F
14074  51A0
14075  51A1
14076  51A2
14077  51A3
14078  51A4
14079  51A5
14080  51A6
14081  51A7
14082  51A8
14083  51A9
14084  51AA
14085  51AB
14086  51AC
14087  51AD
14088  51AE
14089  51AF
14090  51B0
14091  51B1
14092  51B2
14093  51B3
14094  51B4
14095  51B5
14096  51B6
14097  51B7
14098  51B8
14099  51B9
14100  51BA
14101  51BB
14102  51BC
14103  51BD
14104  51BE
14105  51BF
14106  51C0
14107  51C1
14108  51C2
14109  51C3
14110  51C4
14111  51C5
14112  51C6
14113  51C7
14114  51C8
14115  51C9
14116  51CA
14117  51CB
14118  51CC
14119  51CD
14120  51CE
14121  51CF
14122  51D0
14123  51D1
14124  51D2
14125  51D3
14126  51D4
14127  51D5
14128  51D6
14129  51D7
14130  51D8
14131  51D9
14132  51DA
14133  51DB
14134  51DC
14135  51DD
14136  51DE
14137  51DF
14138  51E0
14139  51E1
14140  51E2
14141  51E3
14142  51E4
14143  51E5
14144  51E6
14145  51E7
14146  51E8
14147  51E9
14148  51EA
14149  51EB
14150  51EC
14151  51ED
14152  51EE
14153  51EF
14154  51F0
14155  51F1
14156  51F2
14157  51F3
14158  51F4
14159  51F5
14160  51F6
14161  51F7
14162  51F8
14163  51F9
14164  51FA
14165  51FB
14166  51FC
14167  51FD
14168  51FE
14169  51FF
14170  5200
14171  5201
14172  5202
14173  5203
14174  5204
14175  5205
14176  5206
14177  5207
14178  5208
14179  5209
14180  520A
14181  520B
14182  520C
14183  520D
14184  520E
14185  520F
14186  5210
14187  5211
14188  5212
14189  5213
14190  5214
14191  5215
14192  5216
14193  5217
14194  5218
14195  5219
14196  521A
14197  521B
14198  521C
14199  521D
14200  521E
14201  521F
14202  5220
14203  5221
14204  5222
14205  5223
14206  5224
14207  5225
14208  5226
14209  5227
14210  5228
14211  5229
14212  522A
14213  522B
14214  522C
14215  522D
14216  522E
14217  522F
14218  5230
14219  5231
14220  5232
14221  5233
14222  5234
14223  5235
14224  5236
14225  5237
14226  5238
14227  5239
14228  523A
14229  523B
14230  523C
14231  523D
14232  523E
14233  523F
14234  5240
14235  5241
14236  5242
14237  5243
14238  5244
14239  5245
14240  5246
14241  5247
14242  5248
14243  5249
14244  524A
14245  524B
14246  524C
14247  524D
14248  524E
14249  524F
14250  5250
14251  5251
14252  5252
14253  5253
14254  5254
14255  5255
14256  5256
14257  5257
14258  5258
14259  5259
14260  525A
14261  525B
14262  525C
14263  525D
14264  525E
14265  525F
14266  5260
14267  5261
14268  5262
14269  5263
14270  5264
14271  5265
14272  5266
14273  5267
14274  5268
14275  5269
14276  526A
14277  526B
14278  526C
14279  526D
14280  526E
14281  526F
14282  5270
14283  5271
14284  5272
14285  5273
14286  5274
14287  5275
14288  5276
14289  5277
14290  5278
14291  5279
14292  527A
14293  527B
14294  527C
14295  527D
14296  527E
14297  527F
14298  5280
14299  5281
14300  5282
14301  5283
14302  5284
14303  5285
14304  5286
14305  5287
14306  5288
14307  5289
14308  528A
14309  528B
14310  528C
14311  528D
14312  528E
14313  528F
14314  5290
14315  5291
14316  5292
14317  5293
14318  5294
14319  5295
14320  5296
14321  5297
14322  5298
14323  5299
14324  529A
14325  529B
14326  529C
14327  529D
14328  529E
14329  529F
14330  52A0
14331  52A1
14332  52A2
14333  52A3
14334  52A4
14335  52A5
14336  52A6
14337  52A7
14338  52A8
14339  52A9
14340  52AA
14341  52AB
14342  52AC
14343  52AD
14344  52AE
14345  52AF
14346  52B0
14347  52B1
14348  52B2
14349  52B3
14350  52B4
14351  52B5
14352  52B6
14353  52B7
14354  52B8
14355  52B9
14356  52BA
14357  52BB
14358  52BC
14359  52BD
14360  52BE
14361  52BF
14362  52C0
14363  52C1
14364  52C2
14365  52C3
14366  52C4
14367  52C5
14368  52C6
14369  52C7
14370  52C8
14371  52C9
14372  52CA
14373  52CB
14374  52CC
14375  52CD
14376  52CE
14377  52CF
14378  52D0
14379  52D1
14380  52D2
14381  52D3
14382  52D4
14383  52D5
14384  52D6
14385  52D7
14386  52D8
14387  52D9
14388  52DA
14389  52DB
14390  52DC
14391  52DD
14392  52DE
14393  52DF
14394  52E0
14395  52E1
14396  52E2
14397  52E3
14398  52E4
14399  52E5
14400  52E6
14401  52E7
14402  52E8
14403  52E9
14404  52EA
14405  52EB
14406  52EC
14407  52ED
14408  52EE
14409  52EF
14410  52F0
14411  52F1
14412  52F2
14413  52F3
14414  52F4
14415  52F5
14416  52F6
14417  52F7
14418  52F8
14419  52F9
14420  52FA
14421  52FB
14422  52FC
14423  52FD
14424  52FE
14425  52FF
14426  5300
14427  5301
14428  5302
14429  5303
14430  5304
14431  5305
14432  5306
14433  5307
14434  5308
14435  5309
14436  530A
14437  530B
14438  530C
14439  530D
14440  530E
14441  530F
14442  5310
14443  5311
14444  5312
14445  5313
14446  5314
14447  5315
14448  5316
14449  5317
14450  5318
14451  5319
14452  531A
14453  531B
14454  531C
14455  531D
14456  531E
14457  531F
14458  5320
14459  5321
14460  5322
14461  5323
14462  5324
14463  5325
14464  5326
14465  5327
14466  5328
14467  5329
14468  532A
14469  532B
14470  532C
14471  532D
14472  532E
14473  532F
14474  5330
14475  5331
14476  5332
14477  5333
14478  5334
14479  5335
14480  5336
14481  5337
14482  5338
14483  5339
14484  533A
14485  533B
14486  533C
14487  533D
14488  533E
14489  533F
14490  5340
14491  5341
14492  5342
14493  5343
14494  5344
14495  5345
14496  5346
14497  5347
14498  5348
14499  5349
14500  534A
14501  534B
14502  534C
14503  534D
14504  534E
14505  534F
14506  5350
14507  5351
14508  5352
14509  5353
14510  5354
14511  5355
14512  5356
14513  5357
14514  5358
14515  5359
14516  535A
14517  535B
14518  535C
14519  535D
14520  535E
14521  535F
14522  5360
14523  5361
14524  5362
14525  5363
14526  5364
14527  5365
14528  5366
14529  5367
14530  5368
14531  5369
14532  536A
14533  536B
14534  536C
14535  536D
14536  536E
14537  536F
14538  5370
14539  5371
14540  5372
14541  5373
14542  5374
14543  5375
14544  5376
14545  5377
14546  5378
14547  5379
14548  537A
14549  537B
14550  537C
14551  537D
14552  537E
14553  537F
14554  5380
14555  5381
14556  5382
14557  5383
14558  5384
14559  5385
14560  5386
14561  5387
14562  5388
14563  5389
14564  538A
14565  538B
14566  538C
14567  538D
14568  538E
14569  538F
14570  5390
14571  5391
14572  5392
14573  5393
14574  5394
14575  5395
14576  5396
14577  5397
14578  5398
14579  5399
14580  539A
14581  539B
14582  539C
14583  539D
14584  539E
14585  539F
14586  53A0
14587  53A1
14588  53A2
14589  53A3
14590  53A4
14591  53A5
14592  53A6
14593  53A7
14594  53A8
14595  53A9
14596  53AA
14597  53AB
14598  53AC
14599  53AD
14600  53AE
14601  53AF
14602  53B0
14603  53B1
14604  53B2
14605  53B3
14606  53B4
14607  53B5
14608  53B6
14609  53B7
14610  53B8
14611  53B9
14612  53BA
14613  53BB
14614  53BC
14615  53BD
14616  53BE
14617  53BF
14618  53C0
14619  53C1
14620  53C2
14621  53C3
14622  53C4
14623  53C5
14624  53C6
14625  53C7
14626  53C8
14627  53C9
14628  53CA
14629  53CB
14630  53CC
14631  53CD
14632  53CE
14633  53CF
14634  53D0
14635  53D1
14636  53D2
14637  53D3
14638  53D4
14639  53D5
14640  53D6
14641  53D7
14642  53D8
14643  53D9
14644  53DA
14645  53DB
14646  53DC
14647  53DD
14648  53DE
14649  53DF
14650  53E0
14651  53E1
14652  53E2
14653  53E3
14654  53E4
14655  53E5
14656  53E6
14657  53E7
14658  53E8
14659  53E9
14660  53EA
14661  53EB
14662  53EC
14663  53ED
14664  53EE
14665  53EF
14666  53F0
14667  53F1
14668  53F2
14669  53F3
14670  53F4
14671  53F5
14672  53F6
14673  53F7
14674  53F8
14675  53F9
14676  53FA
14677  53FB
14678  53FC
14679  53FD
14680  53FE
14681  53FF
14682  5400
14683  5401
14684  5402
14685  5403
14686  5404
14687  5405
14688  5406
14689  5407
14690  5408
14691  5409
14692  540A
14693  540B
14694  540C
14695  540D
14696  540E
14697  540F
14698  5410
14699  5411
14700  5412
14701  5413
14702  5414
14703  5415
14704  5416
14705  5417
14706  5418
14707  5419
14708  541A
14709  541B
14710  541C
14711  541D
14712  541E
14713  541F
14714  5420
14715  5421
14716  5422
14717  5423
14718  5424
14719  5425
14720  5426
14721  5427
14722  5428
14723  5429
14724  542A
14725  542B
14726  542C
14727  542D
14728  542E
14729  542F
14730  5430
14731  5431
14732  5432
14733  5433
14734  5434
14735  5435
14736  5436
14737  5437
14738  5438
14739  5439
14740  543A
14741  543B
14742  543C
14743  543D
14744  543E
14745  543F
14746  5440
14747  5441
14748  5442
14749  5443
14750  5444
14751  5445
14752  5446
14753  5447
14754  5448
14755  5449
14756  544A
14757  544B
14758  544C
14759  544D
14760  544E
14761  544F
14762  5450
14763  5451
14764  5452
14765  5453
14766  5454
14767  5455
14768  5456
14769  5457
14770  5458
14771  5459
14772  545A
14773  545B
14774  545C
14775  545D
14776  545E
14777  545F
14778  5460
14779  5461
14780  5462
14781  5463
14782  5464
14783  5465
14784  5466
14785  5467
14786  5468
14787  5469
14788  546A
14789  546B
14790  546C
14791  546D
14792  546E
14793  546F
14794  5470
14795  5471
14796  5472
14797  5473
14798  5474
14799  5475
14800  5476
14801  5477
14802  5478
14803  5479
14804  547A
14805  547B
14806  547C
14807  547D
14808  547E
14809  547F
14810  5480
14811  5481
14812  5482
14813  5483
14814  5484
14815  5485
14816  5486
14817  5487
14818  5488
14819  5489
14820  548A
14821  548B
14822  548C
14823  548D
14824  548E
14825  548F
14826  5490
14827  5491
14828  5492
14829  5493
14830  5494
14831  5495
14832  5496
14833  5497
14834  5498
14835  5499
14836  549A
14837  549B
14838  549C
14839  549D
14840  549E
14841  549F
14842  54A0
14843  54A1
14844  54A2
14845  54A3
14846  54A4
14847  54A5
14848  54A6
14849  54A7
14850  54A8
14851  54A9
14852  54AA
14853  54AB
14854  54AC
14855  54AD
14856  54AE
14857  54AF
14858  54B0
14859  54B1
14860  54B2
14861  54B3
14862  54B4
14863  54B5
14864  54B6
14865  54B7
14866  54B8
14867  54B9
14868  54BA
14869  54BB
14870  54BC
14871  54BD
14872  54BE
14873  54BF
14874  54C0
14875  54C1
14876  54C2
14877  54C3
14878  54C4
14879  54C5
14880  54C6
14881  54C7
14882  54C8
14883  54C9
14884  54CA
14885  54CB
14886  54CC
14887  54CD
14888  54CE
14889  54CF
14890  54D0
14891  54D1
14892  54D2
14893  54D3
14894  54D4
14895  54D5
14896  54D6
14897  54D7
14898  54D8
14899  54D9
14900  54DA
14901  54DB
14902  54DC
14903  54DD
14904  54DE
14905  54DF
14906  54E0
14907  54E1
14908  54E2
14909  54E3
14910  54E4
14911  54E5
14912  54E6
14913  54E7
14914  54E8
14915  54E9
14916  54EA
14917  54EB
14918  54EC
14919  54ED
14920  54EE
14921  54EF
14922  54F0
14923  54F1
14924  54F2
14925  54F3
14926  54F4
14927  54F5
14928  54F6
14929  54F7
14930  54F8
14931  54F9
14932  54FA
14933  54FB
14934  54FC
14935  54FD
14936  54FE
14937  54FF
14938  5500
14939  5501
14940  5502
14941  5503
14942  5504
14943  5505
14944  5506
14945  5507
14946  5508
14947  5509
14948  550A
14949  550B
14950  550C
14951  550D
14952  550E
14953  550F
14954  5510
14955  5511
14956  5512
14957  5513
14958  5514
14959  5515
14960  5516
14961  5517
14962  5518
14963  5519
14964  551A
14965  551B
14966  551C
14967  551D
14968  551E
14969  551F
14970  5520
14971  5521
14972  5522
14973  5523
14974  5524
14975  5525
14976  5526
14977  5527
14978  5528
14979  5529
14980  552A
14981  552B
14982  552C
14983  552D
14984  552E
14985  552F
14986  5530
14987  5531
14988  5532
14989  5533
14990  5534
14991  5535
14992  5536
14993  5537
14994  5538
14995  5539
14996  553A
14997  553B
14998  553C
14999  553D
15000  553E
15001  553F
15002  5540
15003  5541
15004  5542
15005  5543
15006  5544
15007  5545
15008  5546
15009  5547
15010  5548
15011  5549
15012  554A
15013  554B
15014  554C
15015  554D
15016  554E
15017  554F
15018  5550
15019  5551
15020  5552
15021  5553
15022  5554
15023  5555
15024  5556
15025  5557
15026  5558
15027  5559
15028  555A
15029  555B
15030  555C
15031  555D
15032  555E
15033  555F
15034  5560
15035  5561
15036  5562
15037  5563
15038  5564
15039  5565
15040  5566
15041  5567
15042  5568
15043  5569
15044  556A
15045  556B
15046  556C
15047  556D
15048  556E
15049  556F
15050  5570
15051  5571
15052  5572
15053  5573
15054  5574
15055  5575
15056  5576
15057  5577
15058  5578
15059  5579
15060  557A
15061  557B
15062  557C
15063  557D
15064  557E
15065  557F
15066  5580
15067  5581
15068  5582
15069  5583
15070  5584
15071  5585
15072  5586
15073  5587
15074  5588
15075  5589
15076  558A
15077  558B
15078  558C
15079  558D
15080  558E
15081  558F
15082  5590
15083  5591
15084  5592
15085  5593
15086  5594
15087  5595
15088  5596
15089  5597
15090  5598
15091  5599
15092  559A
15093  559B
15094  559C
15095  559D
15096  559E
15097  559F
15098  55A0
15099  55A1
15100  55A2
15101  55A3
15102  55A4
15103  55A5
15104  55A6
15105  55A7
15106  55A8
15107  55A9
15108  55AA
15109  55AB
15110  55AC
15111  55AD
15112  55AE
15113  55AF
15114  55B0
15115  55B1
15116  55B2
15117  55B3
15118  55B4
15119  55B5
15120  55B6
15121  55B7
15122  55B8
15123  55B9
15124  55BA
15125  55BB
15126  55BC
15127  55BD
15128  55BE
15129  55BF
15130  55C0
15131  55C1
15132  55C2
15133  55C3
15134  55C4
15135  55C5
15136  55C6
15137  55C7
15138  55C8
15139  55C9
15140  55CA
15141  55CB
15142  55CC
15143  55CD
15144  55CE
15145  55CF
15146  55D0
15147  55D1
15148  55D2
15149  55D3
15150  55D4
15151  55D5
15152  55D6
15153  55D7
15154  55D8
15155  55D9
15156  55DA
15157  55DB
15158  55DC
15159  55DD
15160  55DE
15161  55DF
15162  55E0
15163  55E1
15164  55E2
15165  55E3
15166  55E4
15167  55E5
15168  55E6
15169  55E7
15170  55E8
15171  55E9
15172  55EA
15173  55EB
15174  55EC
15175  55ED
15176  55EE
15177  55EF
15178  55F0
15179  55F1
15180  55F2
15181  55F3
15182  55F4
15183  55F5
15184  55F6
15185  55F7
15186  55F8
15187  55F9
15188  55FA
15189  55FB
15190  55FC
15191  55FD
15192  55FE
15193  55FF
15194  5600
15195  5601
15196  5602
15197  5603
15198  5604
15199  5605
15200  5606
15201  5607
15202  5608
15203  5609
15204  560A
15205  560B
15206  560C
15207  560D
15208  560E
15209  560F
15210  5610
15211  5611
15212  5612
15213  5613
15214  5614
15215  5615
15216  5616
15217  5617
15218  5618
15219  5619
15220  561A
15221  561B
15222  561C
15223  561D
15224  561E
15225  561F
15226  5620
15227  5621
15228  5622
15229  5623
15230  5624
15231  5625
15232  5626
15233  5627
15234  5628
15235  5629
15236  562A
15237  562B
15238  562C
15239  562D
15240  562E
15241  562F
15242  5630
15243  5631
15244  5632
15245  5633
15246  5634
15247  5635
15248  5636
15249  5637
15250  5638
15251  5639
15252  563A
15253  563B
15254  563C
15255  563D
15256  563E
15257  563F
15258  5640
15259  5641
15260  5642
15261  5643
15262  5644
15263  5645
15264  5646
15265  5647
15266  5648
15267  5649
15268  564A
15269  564B
15270  564C
15271  564D
15272  564E
15273  564F
15274  5650
15275  5651
15276  5652
15277  5653
15278  5654
15279  5655
15280  5656
15281  5657
15282  5658
15283  5659
15284  565A
15285  565B
15286  565C
15287  565D
15288  565E
15289  565F
15290  5660
15291  5661
15292  5662
15293  5663
15294  5664
15295  5665
15296  5666
15297  5667
15298  5668
15299  5669
15300  566A
15301  566B
15302  566C
15303  566D
15304  566E
15305  566F
15306  5670
15307  5671
15308  5672
15309  5673
15310  5674
15311  5675
15312  5676
15313  5677
15314  5678
15315  5679
15316  567A
15317  567B
15318  567C
15319  567D
15320  567E
15321  567F
15322  5680
15323  5681
15324  5682
15325  5683
15326  5684
15327  5685
15328  5686
15329  5687
15330  5688
15331  5689
15332  568A
15333  568B
15334  568C
15335  568D
15336  568E
15337  568F
15338  5690
15339  5691
15340  5692
15341  5693
15342  5694
15343  5695
15344  5696
15345  5697
15346  5698
15347  5699
15348  569A
15349  569B
15350  569C
15351  569D
15352  569E
15353  569F
15354  56A0
15355  56A1
15356  56A2
15357  56A3
15358  56A4
15359  56A5
15360  56A6
15361  56A7
15362  56A8
15363  56A9
15364  56AA
15365  56AB
15366  56AC
15367  56AD
15368  56AE
15369  56AF
15370  56B0
15371  56B1
15372  56B2
15373  56B3
15374  56B4
15375  56B5
15376  56B6
15377  56B7
15378  56B8
15379  56B9
15380  56BA
15381  56BB
15382  56BC
15383  56BD
15384  56BE
15385  56BF
15386  56C0
15387  56C1
15388  56C2
15389  56C3
15390  56C4
15391  56C5
15392  56C6
15393  56C7
15394  56C8
15395  56C9
15396  56CA
15397  56CB
15398  56CC
15399  56CD
15400  56CE
15401  56CF
15402  56D0
15403  56D1
15404  56D2
15405  56D3
15406  56D4
15407  56D5
15408  56D6
15409  56D7
15410  56D8
15411  56D9
15412  56DA
15413  56DB
15414  56DC
15415  56DD
15416  56DE
15417  56DF
15418  56E0
15419  56E1
15420  56E2
15421  56E3
15422  56E4
15423  56E5
15424  56E6
15425  56E7
15426  56E8
15427  56E9
15428  56EA
15429  56EB
15430  56EC
15431  56ED
15432  56EE
15433  56EF
15434  56F0
15435  56F1
15436  56F2
15437  56F3
15438  56F4
15439  56F5
15440  56F6
15441  56F7
15442  56F8
15443  56F9
15444  56FA
15445  56FB
15446  56FC
15447  56FD
15448  56FE
15449  56FF
15450  5700
15451  5701
15452  5702
15453  5703
15454  5704
15455  5705
15456  5706
15457  5707
15458  5708
15459  5709
15460  570A
15461  570B
15462  570C
15463  570D
15464  570E
15465  570F
15466  5710
15467  5711
15468  5712
15469  5713
15470  5714
15471  5715
15472  5716
15473  5717
15474  5718
15475  5719
15476  571A
15477  571B
15478  571C
15479  571D
15480  571E
15481  571F
15482  5720
15483  5721
15484  5722
15485  5723
15486  5724
15487  5725
15488  5726
15489  5727
15490  5728
15491  5729
15492  572A
15493  572B
15494  572C
15495  572D
15496  572E
15497  572F
15498  5730
15499  5731
15500  5732
15501  5733
15502  5734
15503  5735
15504  5736
15505  5737
15506  5738
15507  5739
15508  573A
15509  573B
15510  573C
15511  573D
15512  573E
15513  573F
15514  5740
15515  5741
15516  5742
15517  5743
15518  5744
15519  5745
15520  5746
15521  5747
15522  5748
15523  5749
15524  574A
15525  574B
15526  574C
15527  574D
15528  574E
15529  574F
15530  5750
15531  5751
15532  5752
15533  5753
15534  5754
15535  5755
15536  5756
15537  5757
15538  5758
15539  5759
15540  575A
15541  575B
15542  575C
15543  575D
15544  575E
15545  575F
15546  5760
15547  5761
15548  5762
15549  5763
15550  5764
15551  5765
15552  5766
15553  5767
15554  5768
15555  5769
15556  576A
15557  576B
15558  576C
15559  576D
15560  576E
15561  576F
15562  5770
15563  5771
15564  5772
15565  5773
15566  5774
15567  5775
15568  5776
15569  5777
15570  5778
15571  5779
15572  577A
15573  577B
15574  577C
15575  577D
15576  577E
15577  577F
15578  5780
15579  5781
15580  5782
15581  5783
15582  5784
15583  5785
15584  5786
15585  5787
15586  5788
15587  5789
15588  578A
15589  578B
15590  578C
15591  578D
15592  578E
15593  578F
15594  5790
15595  5791
15596  5792
15597  5793
15598  5794
15599  5795
15600  5796
15601  5797
15602  5798
15603  5799
15604  579A
15605  579B
15606  579C
15607  579D
15608  579E
15609  579F
15610  57A0
15611  57A1
15612  57A2
15613  57A3
15614  57A4
15615  57A5
15616  57A6
15617  57A7
15618  57A8
15619  57A9
15620  57AA
15621  57AB
15622  57AC
15623  57AD
15624  57AE
15625  57AF
15626  57B0
15627  57B1
15628  57B2
15629  57B3
15630  57B4
15631  57B5
15632  57B6
15633  57B7
15634  57B8
15635  57B9
15636  57BA
15637  57BB
15638  57BC
15639  57BD
15640  57BE
15641  57BF
15642  57C0
15643  57C1
15644  57C2
15645  57C3
15646  57C4
15647  57C5
15648  57C6
15649  57C7
15650  57C8
15651  57C9
15652  57CA
15653  57CB
15654  57CC
15655  57CD
15656  57CE
15657  57CF
15658  57D0
15659  57D1
15660  57D2
15661  57D3
15662  57D4
15663  57D5
15664  57D6
15665  57D7
15666  57D8
15667  57D9
15668  57DA
15669  57DB
15670  57DC
15671  57DD
15672  57DE
15673  57DF
15674  57E0
15675  57E1
15676  57E2
15677  57E3
15678  57E4
15679  57E5
15680  57E6
15681  57E7
15682  57E8
15683  57E9
15684  57EA
15685  57EB
15686  57EC
15687  57ED
15688  57EE
15689  57EF
15690  57F0
15691  57F1
15692  57F2
15693  57F3
15694  57F4
15695  57F5
15696  57F6
15697  57F7
15698  57F8
15699  57F9
15700  57FA
15701  57FB
15702  57FC
15703  57FD
15704  57FE
15705  57FF
15706  5800
15707  5801
15708  5802
15709  5803
15710  5804
15711  5805
15712  5806
15713  5807
15714  5808
15715  5809
15716  580A
15717  580B
15718  580C
15719  580D
15720  580E
15721  580F
15722  5810
15723  5811
15724  5812
15725  5813
15726  5814
15727  5815
15728  5816
15729  5817
15730  5818
15731  5819
15732  581A
15733  581B
15734  581C
15735  581D
15736  581E
15737  581F
15738  5820
15739  5821
15740  5822
15741  5823
15742  5824
15743  5825
15744  5826
15745  5827
15746  5828
15747  5829
15748  582A
15749  582B
15750  582C
15751  582D
15752  582E
15753  582F
15754  5830
15755  5831
15756  5832
15757  5833
15758  5834
15759  5835
15760  5836
15761  5837
15762  5838
15763  5839
15764  583A
15765  583B
15766  583C
15767  583D
15768  583E
15769  583F
15770  5840
15771  5841
15772  5842
15773  5843
15774  5844
15775  5845
15776  5846
15777  5847
15778  5848
15779  5849
15780  584A
15781  584B
15782  584C
15783  584D
15784  584E
15785  584F
15786  5850
15787  5851
15788  5852
15789  5853
15790  5854
15791  5855
15792  5856
15793  5857
15794  5858
15795  5859
15796  585A
15797  585B
15798  585C
15799  585D
15800  585E
15801  585F
15802  5860
15803  5861
15804  5862
15805  5863
15806  5864
15807  5865
15808  5866
15809  5867
15810  5868
15811  5869
15812  586A
15813  586B
15814  586C
15815  586D
15816  586E
15817  586F
15818  5870
15819  5871
15820  5872
15821  5873
15822  5874
15823  5875
15824  5876
15825  5877
15826  5878
15827  5879
15828  587A
15829  587B
15830  587C
15831  587D
15832  587E
15833  587F
15834  5880
15835  5881
15836  5882
15837  5883
15838  5884
15839  5885
15840  5886
15841  5887
15842  5888
15843  5889
15844  588A
15845  588B
15846  588C
15847  588D
15848  588E
15849  588F
15850  5890
15851  5891
15852  5892
15853  5893
15854  5894
15855  5895
15856  5896
15857  5897
15858  5898
15859  5899
15860  589A
15861  589B
15862  589C
15863  589D
15864  589E
15865  589F
15866  58A0
15867  58A1
15868  58A2
15869  58A3
15870  58A4
15871  58A5
15872  58A6
15873  58A7
15874  58A8
15875  58A9
15876  58AA
15877  58AB
15878  58AC
15879  58AD
15880  58AE
15881  58AF
15882  58B0
15883  58B1
15884  58B2
15885  58B3
15886  58B4
15887  58B5
15888  58B6
15889  58B7
15890  58B8
15891  58B9
15892  58BA
15893  58BB
15894  58BC
15895  58BD
15896  58BE
15897  58BF
15898  58C0
15899  58C1
15900  58C2
15901  58C3
15902  58C4
15903  58C5
15904  58C6
15905  58C7
15906  58C8
15907  58C9
15908  58CA
15909  58CB
15910  58CC
15911  58CD
15912  58CE
15913  58CF
15914  58D0
15915  58D1
15916  58D2
15917  58D3
15918  58D4
15919  58D5
15920  58D6
15921  58D7
15922  58D8
15923  58D9
15924  58DA
15925  58DB
15926  58DC
15927  58DD
15928  58DE
15929  58DF
15930  58E0
15931  58E1
15932  58E2
15933  58E3
15934  58E4
15935  58E5
15936  58E6
15937  58E7
15938  58E8
15939  58E9
15940  58EA
15941  58EB
15942  58EC
15943  58ED
15944  58EE
15945  58EF
15946  58F0
15947  58F1
15948  58F2
15949  58F3
15950  58F4
15951  58F5
15952  58F6
15953  58F7
15954  58F8
15955  58F9
15956  58FA
15957  58FB
15958  58FC
15959  58FD
15960  58FE
15961  58FF
15962  5900
15963  5901
15964  5902
15965  5903
15966  5904
15967  5905
15968  5906
15969  5907
15970  5908
15971  5909
15972  590A
15973  590B
15974  590C
15975  590D
15976  590E
15977  590F
15978  5910
15979  5911
15980  5912
15981  5913
15982  5914
15983  5915
15984  5916
15985  5917
15986  5918
15987  5919
15988  591A
15989  591B
15990  591C
15991  591D
15992  591E
15993  591F
15994  5920
15995  5921
15996  5922
15997  5923
15998  5924
15999  5925
16000  5926
16001  5927
16002  5928
16003  5929
16004  592A
16005  592B
16006  592C
16007  592D
16008  592E
16009  592F
16010  5930
16011  5931
16012  5932
16013  5933
16014  5934
16015  5935
16016  5936
16017  5937
16018  5938
16019  5939
16020  593A
16021  593B
16022  593C
16023  593D
16024  593E
16025  593F
16026  5940
16027  5941
16028  5942
16029  5943
16030  5944
16031  5945
16032  5946
16033  5947
16034  5948
16035  5949
16036  594A
16037  594B
16038  594C
16039  594D
16040  594E
16041  594F
16042  5950
16043  5951
16044  5952
16045  5953
16046  5954
16047  5955
16048  5956
16049  5957
16050  5958
16051  5959
16052  595A
16053  595B
16054  595C
16055  595D
16056  595E
16057  595F
16058  5960
16059  5961
16060  5962
16061  5963
16062  5964
16063  5965
16064  5966
16065  5967
16066  5968
16067  5969
16068  596A
16069  596B
16070  596C
16071  596D
16072  596E
16073  596F
16074  5970
16075  5971
16076  5972
16077  5973
16078  5974
16079  5975
16080  5976
16081  5977
16082  5978
16083  5979
16084  597A
16085  597B
16086  597C
16087  597D
16088  597E
16089  597F
16090  5980
16091  5981
16092  5982
16093  5983
16094  5984
16095  5985
16096  5986
16097  5987
16098  5988
16099  5989
16100  598A
16101  598B
16102  598C
16103  598D
16104  598E
16105  598F
16106  5990
16107  5991
16108  5992
16109  5993
16110  5994
16111  5995
16112  5996
16113  5997
16114  5998
16115  5999
16116  599A
16117  599B
16118  599C
16119  599D
16120  599E
16121  599F
16122  59A0
16123  59A1
16124  59A2
16125  59A3
16126  59A4
16127  59A5
16128  59A6
16129  59A7
16130  59A8
16131  59A9
16132  59AA
16133  59AB
16134  59AC
16135  59AD
16136  59AE
16137  59AF
16138  59B0
16139  59B1
16140  59B2
16141  59B3
16142  59B4
16143  59B5
16144  59B6
16145  59B7
16146  59B8
16147  59B9
16148  59BA
16149  59BB
16150  59BC
16151  59BD
16152  59BE
16153  59BF
16154  59C0
16155  59C1
16156  59C2
16157  59C3
16158  59C4
16159  59C5
16160  59C6
16161  59C7
16162  59C8
16163  59C9
16164  59CA
16165  59CB
16166  59CC
16167  59CD
16168  59CE
16169  59CF
16170  59D0
16171  59D1
16172  59D2
16173  59D3
16174  59D4
16175  59D5
16176  59D6
16177  59D7
16178  59D8
16179  59D9
16180  59DA
16181  59DB
16182  59DC
16183  59DD
16184  59DE
16185  59DF
16186  59E0
16187  59E1
16188  59E2
16189  59E3
16190  59E4
16191  59E5
16192  59E6
16193  59E7
16194  59E8
16195  59E9
16196  59EA
16197  59EB
16198  59EC
16199  59ED
16200  59EE
16201  59EF
16202  59F0
16203  59F1
16204  59F2
16205  59F3
16206  59F4
16207  59F5
16208  59F6
16209  59F7
16210  59F8
16211  59F9
16212  59FA
16213  59FB
16214  59FC
16215  59FD
16216  59FE
16217  59FF
16218  5A00
16219  5A01
16220  5A02
16221  5A03
16222  5A04
16223  5A05
16224  5A06
16225  5A07
16226  5A08
16227  5A09
16228  5A0A
16229  5A0B
16230  5A0C
16231  5A0D
16232  5A0E
16233  5A0F
16234  5A10
16235  5A11
16236  5A12
16237  5A13
16238  5A14
16239  5A15
16240  5A16
16241  5A17
16242  5A18
16243  5A19
16244  5A1A
16245  5A1B
16246  5A1C
16247  5A1D
16248  5A1E
16249  5A1F
16250  5A20
16251  5A21
16252  5A22
16253  5A23
16254  5A24
16255  5A25
16256  5A26
16257  5A27
16258  5A28
16259  5A29
16260  5A2A
16261  5A2B
16262  5A2C
16263  5A2D
16264  5A2E
16265  5A2F
16266  5A30
16267  5A31
16268  5A32
16269  5A33
16270  5A34
16271  5A35
16272  5A36
16273  5A37
16274  5A38
16275  5A39
16276  5A3A
16277  5A3B
16278  5A3C
16279  5A3D
16280  5A3E
16281  5A3F
16282  5A40
16283  5A41
16284  5A42
16285  5A43
16286  5A44
16287  5A45
16288  5A46
16289  5A47
16290  5A48
16291  5A49
16292  5A4A
16293  5A4B
16294  5A4C
16295  5A4D
16296  5A4E
16297  5A4F
16298  5A50
16299  5A51
16300  5A52
16301  5A53
16302  5A54
16303  5A55
16304  5A56
16305  5A57
16306  5A58
16307  5A59
16308  5A5A
16309  5A5B
16310  5A5C
16311  5A5D
16312  5A5E
16313  5A5F
16314  5A60
16315  5A61
16316  5A62
16317  5A63
16318  5A64
16319  5A65
16320  5A66
16321  5A67
16322  5A68
16323  5A69
16324  5A6A
16325  5A6B
16326  5A6C
16327  5A6D
16328  5A6E
16329  5A6F
16330  5A70
16331  5A71
16332  5A72
16333  5A73
16334  5A74
16335  5A75
16336  5A76
16337  5A77
16338  5A78
16339  5A79
16340  5A7A
16341  5A7B
16342  5A7C
16343  5A7D
16344  5A7E
16345  5A7F
16346  5A80
16347  5A81
16348  5A82
16349  5A83
16350  5A84
16351  5A85
16352  5A86
16353  5A87
16354  5A88
16355  5A89
16356  5A8A
16357  5A8B
16358  5A8C
16359  5A8D
16360  5A8E
16361  5A8F
16362  5A90
16363  5A91
16364  5A92
16365  5A93
16366  5A94
16367  5A95
16368  5A96
16369  5A97
16370  5A98
16371  5A99
16372  5A9A
16373  5A9B
16374  5A9C
16375  5A9D
16376  5A9E
16377  5A9F
16378  5AA0
16379  5AA1
16380  5AA2
16381  5AA3
16382  5AA4
16383  5AA5
16384  5AA6
16385  5AA7
16386  5AA8
16387  5AA9
16388  5AAA
16389  5AAB
16390  5AAC
16391  5AAD
16392  5AAE
16393  5AAF
16394  5AB0
16395  5AB1
16396  5AB2
16397  5AB3
16398  5AB4
16399  5AB5
16400  5AB6
16401  5AB7
16402  5AB8
16403  5AB9
16404  5ABA
16405  5ABB
16406  5ABC
16407  5ABD
16408  5ABE
16409  5ABF
16410  5AC0
16411  5AC1
16412  5AC2
16413  5AC3
16414  5AC4
16415  5AC5
16416  5AC6
16417  5AC7
16418  5AC8
16419  5AC9
16420  5ACA
16421  5ACB
16422  5ACC
16423  5ACD
16424  5ACE
16425  5ACF
16426  5AD0
16427  5AD1
16428  5AD2
16429  5AD3
16430  5AD4
16431  5AD5
16432  5AD6
16433  5AD7
16434  5AD8
16435  5AD9
16436  5ADA
16437  5ADB
16438  5ADC
16439  5ADD
16440  5ADE
16441  5ADF
16442  5AE0
16443  5AE1
16444  5AE2
16445  5AE3
16446  5AE4
16447  5AE5
16448  5AE6
16449  5AE7
16450  5AE8
16451  5AE9
16452  5AEA
16453  5AEB
16454  5AEC
16455  5AED
16456  5AEE
16457  5AEF
16458  5AF0
16459  5AF1
16460  5AF2
16461  5AF3
16462  5AF4
16463  5AF5
16464  5AF6
16465  5AF7
16466  5AF8
16467  5AF9
16468  5AFA
16469  5AFB
16470  5AFC
16471  5AFD
16472  5AFE
16473  5AFF
16474  5B00
16475  5B01
16476  5B02
16477  5B03
16478  5B04
16479  5B05
16480  5B06
16481  5B07
16482  5B08
16483  5B09
16484  5B0A
16485  5B0B
16486  5B0C
16487  5B0D
16488  5B0E
16489  5B0F
16490  5B10
16491  5B11
16492  5B12
16493  5B13
16494  5B14
16495  5B15
16496  5B16
16497  5B17
16498  5B18
16499  5B19
16500  5B1A
16501  5B1B
16502  5B1C
16503  5B1D
16504  5B1E
16505  5B1F
16506  5B20
16507  5B21
16508  5B22
16509  5B23
16510  5B24
16511  5B25
16512  5B26
16513  5B27
16514  5B28
16515  5B29
16516  5B2A
16517  5B2B
16518  5B2C
16519  5B2D
16520  5B2E
16521  5B2F
16522  5B30
16523  5B31
16524  5B32
16525  5B33
16526  5B34
16527  5B35
16528  5B36
16529  5B37
16530  5B38
16531  5B39
16532  5B3A
16533  5B3B
16534  5B3C
16535  5B3D
16536  5B3E
16537  5B3F
16538  5B40
16539  5B41
16540  5B42
16541  5B43
16542  5B44
16543  5B45
16544  5B46
16545  5B47
16546  5B48
16547  5B49
16548  5B4A
16549  5B4B
16550  5B4C
16551  5B4D
16552  5B4E
16553  5B4F
16554  5B50
16555  5B51
16556  5B52
16557  5B53
16558  5B54
16559  5B55
16560  5B56
16561  5B57
16562  5B58
16563  5B59
16564  5B5A
16565  5B5B
16566  5B5C
16567  5B5D
16568  5B5E
16569  5B5F
16570  5B60
16571  5B61
16572  5B62
16573  5B63
16574  5B64
16575  5B65
16576  5B66
16577  5B67
16578  5B68
16579  5B69
16580  5B6A
16581  5B6B
16582  5B6C
16583  5B6D
16584  5B6E
16585  5B6F
16586  5B70
16587  5B71
16588  5B72
16589  5B73
16590  5B74
16591  5B75
16592  5B76
16593  5B77
16594  5B78
16595  5B79
16596  5B7A
16597  5B7B
16598  5B7C
16599  5B7D
16600  5B7E
16601  5B7F
16602  5B80
16603  5B81
16604  5B82
16605  5B83
16606  5B84
16607  5B85
16608  5B86
16609  5B87
16610  5B88
16611  5B89
16612  5B8A
16613  5B8B
16614  5B8C
16615  5B8D
16616  5B8E
16617  5B8F
16618  5B90
16619  5B91
16620  5B92
16621  5B93
16622  5B94
16623  5B95
16624  5B96
16625  5B97
16626  5B98
16627  5B99
16628  5B9A
16629  5B9B
16630  5B9C
16631  5B9D
16632  5B9E
16633  5B9F
16634  5BA0
16635  5BA1
16636  5BA2
16637  5BA3
16638  5BA4
16639  5BA5
16640  5BA6
16641  5BA7
16642  5BA8
16643  5BA9
16644  5BAA
16645  5BAB
16646  5BAC
16647  5BAD
16648  5BAE
16649  5BAF
16650  5BB0
16651  5BB1
16652  5BB2
16653  5BB3
16654  5BB4
16655  5BB5
16656  5BB6
16657  5BB7
16658  5BB8
16659  5BB9
16660  5BBA
16661  5BBB
16662  5BBC
16663  5BBD
16664  5BBE
16665  5BBF
16666  5BC0
16667  5BC1
16668  5BC2
16669  5BC3
16670  5BC4
16671  5BC5
16672  5BC6
16673  5BC7
16674  5BC8
16675  5BC9
16676  5BCA
16677  5BCB
16678  5BCC
16679  5BCD
16680  5BCE
16681  5BCF
16682  5BD0
16683  5BD1
16684  5BD2
16685  5BD3
16686  5BD4
16687  5BD5
16688  5BD6
16689  5BD7
16690  5BD8
16691  5BD9
16692  5BDA
16693  5BDB
16694  5BDC
16695  5BDD
16696  5BDE
16697  5BDF
16698  5BE0
16699  5BE1
16700  5BE2
16701  5BE3
16702  5BE4
16703  5BE5
16704  5BE6
16705  5BE7
16706  5BE8
16707  5BE9
16708  5BEA
16709  5BEB
16710  5BEC
16711  5BED
16712  5BEE
16713  5BEF
16714  5BF0
16715  5BF1
16716  5BF2
16717  5BF3
16718  5BF4
16719  5BF5
16720  5BF6
16721  5BF7
16722  5BF8
16723  5BF9
16724  5BFA
16725  5BFB
16726  5BFC
16727  5BFD
16728  5BFE
16729  5BFF
16730  5C00
16731  5C01
16732  5C02
16733  5C03
16734  5C04
16735  5C05
16736  5C06
16737  5C07
16738  5C08
16739  5C09
16740  5C0A
16741  5C0B
16742  5C0C
16743  5C0D
16744  5C0E
16745  5C0F
16746  5C10
16747  5C11
16748  5C12
16749  5C13
16750  5C14
16751  5C15
16752  5C16
16753  5C17
16754  5C18
16755  5C19
16756  5C1A
16757  5C1B
16758  5C1C
16759  5C1D
16760  5C1E
16761  5C1F
16762  5C20
16763  5C21
16764  5C22
16765  5C23
16766  5C24
16767  5C25
16768  5C26
16769  5C27
16770  5C28
16771  5C29
16772  5C2A
16773  5C2B
16774  5C2C
16775  5C2D
16776  5C2E
16777  5C2F
16778  5C30
16779  5C31
16780  5C32
16781  5C33
16782  5C34
16783  5C35
16784  5C36
16785  5C37
16786  5C38
16787  5C39
16788  5C3A
16789  5C3B
16790  5C3C
16791  5C3D
16792  5C3E
16793  5C3F
16794  5C40
16795  5C41
16796  5C42
16797  5C43
16798  5C44
16799  5C45
16800  5C46
16801  5C47
16802  5C48
16803  5C49
16804  5C4A
16805  5C4B
16806  5C4C
16807  5C4D
16808  5C4E
16809  5C4F
16810  5C50
16811  5C51
16812  5C52
16813  5C53
16814  5C54
16815  5C55
16816  5C56
16817  5C57
16818  5C58
16819  5C59
16820  5C5A
16821  5C5B
16822  5C5C
16823  5C5D
16824  5C5E
16825  5C5F
16826  5C60
16827  5C61
16828  5C62
16829  5C63
16830  5C64
16831  5C65
16832  5C66
16833  5C67
16834  5C68
16835  5C69
16836  5C6A
16837  5C6B
16838  5C6C
16839  5C6D
16840  5C6E
16841  5C6F
16842  5C70
16843  5C71
16844  5C72
16845  5C73
16846  5C74
16847  5C75
16848  5C76
16849  5C77
16850  5C78
16851  5C79
16852  5C7A
16853  5C7B
16854  5C7C
16855  5C7D
16856  5C7E
16857  5C7F
16858  5C80
16859  5C81
16860  5C82
16861  5C83
16862  5C84
16863  5C85
16864  5C86
16865  5C87
16866  5C88
16867  5C89
16868  5C8A
16869  5C8B
16870  5C8C
16871  5C8D
16872  5C8E
16873  5C8F
16874  5C90
16875  5C91
16876  5C92
16877  5C93
16878  5C94
16879  5C95
16880  5C96
16881  5C97
16882  5C98
16883  5C99
16884  5C9A
16885  5C9B
16886  5C9C
16887  5C9D
16888  5C9E
16889  5C9F
16890  5CA0
16891  5CA1
16892  5CA2
16893  5CA3
16894  5CA4
16895  5CA5
16896  5CA6
16897  5CA7
16898  5CA8
16899  5CA9
16900  5CAA
16901  5CAB
16902  5CAC
16903  5CAD
16904  5CAE
16905  5CAF
16906  5CB0
16907  5CB1
16908  5CB2
16909  5CB3
16910  5CB4
16911  5CB5
16912  5CB6
16913  5CB7
16914  5CB8
16915  5CB9
16916  5CBA
16917  5CBB
16918  5CBC
16919  5CBD
16920  5CBE
16921  5CBF
16922  5CC0
16923  5CC1
16924  5CC2
16925  5CC3
16926  5CC4
16927  5CC5
16928  5CC6
16929  5CC7
16930  5CC8
16931  5CC9
16932  5CCA
16933  5CCB
16934  5CCC
16935  5CCD
16936  5CCE
16937  5CCF
16938  5CD0
16939  5CD1
16940  5CD2
16941  5CD3
16942  5CD4
16943  5CD5
16944  5CD6
16945  5CD7
16946  5CD8
16947  5CD9
16948  5CDA
16949  5CDB
16950  5CDC
16951  5CDD
16952  5CDE
16953  5CDF
16954  5CE0
16955  5CE1
16956  5CE2
16957  5CE3
16958  5CE4
16959  5CE5
16960  5CE6
16961  5CE7
16962  5CE8
16963  5CE9
16964  5CEA
16965  5CEB
16966  5CEC
16967  5CED
16968  5CEE
16969  5CEF
16970  5CF0
16971  5CF1
16972  5CF2
16973  5CF3
16974  5CF4
16975  5CF5
16976  5CF6
16977  5CF7
16978  5CF8
16979  5CF9
16980  5CFA
16981  5CFB
16982  5CFC
16983  5CFD
16984  5CFE
16985  5CFF
16986  5D00
16987  5D01
16988  5D02
16989  5D03
16990  5D04
16991  5D05
16992  5D06
16993  5D07
16994  5D08
16995  5D09
16996  5D0A
16997  5D0B
16998  5D0C
16999  5D0D
17000  5D0E
17001  5D0F
17002  5D10
17003  5D11
17004  5D12
17005  5D13
17006  5D14
17007  5D15
17008  5D16
17009  5D17
17010  5D18
17011  5D19
17012  5D1A
17013  5D1B
17014  5D1C
17015  5D1D
17016  5D1E
17017  5D1F
17018  5D20
17019  5D21
17020  5D22
17021  5D23
17022  5D24
17023  5D25
17024  5D26
17025  5D27
17026  5D28
17027  5D29
17028  5D2A
17029  5D2B
17030  5D2C
17031  5D2D
17032  5D2E
17033  5D2F
17034  5D30
17035  5D31
17036  5D32
17037  5D33
17038  5D34
17039  5D35
17040  5D36
17041  5D37
17042  5D38
17043  5D39
17044  5D3A
17045  5D3B
17046  5D3C
17047  5D3D
17048  5D3E
17049  5D3F
17050  5D40
17051  5D41
17052  5D42
17053  5D43
17054  5D44
17055  5D45
17056  5D46
17057  5D47
17058  5D48
17059  5D49
17060  5D4A
17061  5D4B
17062  5D4C
17063  5D4D
17064  5D4E
17065  5D4F
17066  5D50
17067  5D51
17068  5D52
17069  5D53
17070  5D54
17071  5D55
17072  5D56
17073  5D57
17074  5D58
17075  5D59
17076  5D5A
17077  5D5B
17078  5D5C
17079  5D5D
17080  5D5E
17081  5D5F
17082  5D60
17083  5D61
17084  5D62
17085  5D63
17086  5D64
17087  5D65
17088  5D66
17089  5D67
17090  5D68
17091  5D69
17092  5D6A
17093  5D6B
17094  5D6C
17095  5D6D
17096  5D6E
17097  5D6F
17098  5D70
17099  5D71
17100  5D72
17101  5D73
17102  5D74
17103  5D75
17104  5D76
17105  5D77
17106  5D78
17107  5D79
17108  5D7A
17109  5D7B
17110  5D7C
17111  5D7D
17112  5D7E
17113  5D7F
17114  5D80
17115  5D81
17116  5D82
17117  5D83
17118  5D84
17119  5D85
17120  5D86
17121  5D87
17122  5D88
17123  5D89
17124  5D8A
17125  5D8B
17126  5D8C
17127  5D8D
17128  5D8E
17129  5D8F
17130  5D90
17131  5D91
17132  5D92
17133  5D93
17134  5D94
17135  5D95
17136  5D96
17137  5D97
17138  5D98
17139  5D99
17140  5D9A
17141  5D9B
17142  5D9C
17143  5D9D
17144  5D9E
17145  5D9F
17146  5DA0
17147  5DA1
17148  5DA2
17149  5DA3
17150  5DA4
17151  5DA5
17152  5DA6
17153  5DA7
17154  5DA8
17155  5DA9
17156  5DAA
17157  5DAB
17158  5DAC
17159  5DAD
17160  5DAE
17161  5DAF
17162  5DB0
17163  5DB1
17164  5DB2
17165  5DB3
17166  5DB4
17167  5DB5
17168  5DB6
17169  5DB7
17170  5DB8
17171  5DB9
17172  5DBA
17173  5DBB
17174  5DBC
17175  5DBD
17176  5DBE
17177  5DBF
17178  5DC0
17179  5DC1
17180  5DC2
17181  5DC3
17182  5DC4
17183  5DC5
17184  5DC6
17185  5DC7
17186  5DC8
17187  5DC9
17188  5DCA
17189  5DCB
17190  5DCC
17191  5DCD
17192  5DCE
17193  5DCF
17194  5DD0
17195  5DD1
17196  5DD2
17197  5DD3
17198  5DD4
17199  5DD5
17200  5DD6
17201  5DD7
17202  5DD8
17203  5DD9
17204  5DDA
17205  5DDB
17206  5DDC
17207  5DDD
17208  5DDE
17209  5DDF
17210  5DE0
17211  5DE1
17212  5DE2
17213  5DE3
17214  5DE4
17215  5DE5
17216  5DE6
17217  5DE7
17218  5DE8
17219  5DE9
17220  5DEA
17221  5DEB
17222  5DEC
17223  5DED
17224  5DEE
17225  5DEF
17226  5DF0
17227  5DF1
17228  5DF2
17229  5DF3
17230  5DF4
17231  5DF5
17232  5DF6
17233  5DF7
17234  5DF8
17235  5DF9
17236  5DFA
17237  5DFB
17238  5DFC
17239  5DFD
17240  5DFE
17241  5DFF
17242  5E00
17243  5E01
17244  5E02
17245  5E03
17246  5E04
17247  5E05
17248  5E06
17249  5E07
17250  5E08
17251  5E09
17252  5E0A
17253  5E0B
17254  5E0C
17255  5E0D
17256  5E0E
17257  5E0F
17258  5E10
17259  5E11
17260  5E12
17261  5E13
17262  5E14
17263  5E15
17264  5E16
17265  5E17
17266  5E18
17267  5E19
17268  5E1A
17269  5E1B
17270  5E1C
17271  5E1D
17272  5E1E
17273  5E1F
17274  5E20
17275  5E21
17276  5E22
17277  5E23
17278  5E24
17279  5E25
17280  5E26
17281  5E27
17282  5E28
17283  5E29
17284  5E2A
17285  5E2B
17286  5E2C
17287  5E2D
17288  5E2E
17289  5E2F
17290  5E30
17291  5E31
17292  5E32
17293  5E33
17294  5E34
17295  5E35
17296  5E36
17297  5E37
17298  5E38
17299  5E39
17300  5E3A
17301  5E3B
17302  5E3C
17303  5E3D
17304  5E3E
17305  5E3F
17306  5E40
17307  5E41
17308  5E42
17309  5E43
17310  5E44
17311  5E45
17312  5E46
17313  5E47
17314  5E48
17315  5E49
17316  5E4A
17317  5E4B
17318  5E4C
17319  5E4D
17320  5E4E
17321  5E4F
17322  5E50
17323  5E51
17324  5E52
17325  5E53
17326  5E54
17327  5E55
17328  5E56
17329  5E57
17330  5E58
17331  5E59
17332  5E5A
17333  5E5B
17334  5E5C
17335  5E5D
17336  5E5E
17337  5E5F
17338  5E60
17339  5E61
17340  5E62
17341  5E63
17342  5E64
17343  5E65
17344  5E66
17345  5E67
17346  5E68
17347  5E69
17348  5E6A
17349  5E6B
17350  5E6C
17351  5E6D
17352  5E6E
17353  5E6F
17354  5E70
17355  5E71
17356  5E72
17357  5E73
17358  5E74
17359  5E75
17360  5E76
17361  5E77
17362  5E78
17363  5E79
17364  5E7A
17365  5E7B
17366  5E7C
17367  5E7D
17368  5E7E
17369  5E7F
17370  5E80
17371  5E81
17372  5E82
17373  5E83
17374  5E84
17375  5E85
17376  5E86
17377  5E87
17378  5E88
17379  5E89
17380  5E8A
17381  5E8B
17382  5E8C
17383  5E8D
17384  5E8E
17385  5E8F
17386  5E90
17387  5E91
17388  5E92
17389  5E93
17390  5E94
17391  5E95
17392  5E96
17393  5E97
17394  5E98
17395  5E99
17396  5E9A
17397  5E9B
17398  5E9C
17399  5E9D
17400  5E9E
17401  5E9F
17402  5EA0
17403  5EA1
17404  5EA2
17405  5EA3
17406  5EA4
17407  5EA5
17408  5EA6
17409  5EA7
17410  5EA8
17411  5EA9
17412  5EAA
17413  5EAB
17414  5EAC
17415  5EAD
17416  5EAE
17417  5EAF
17418  5EB0
17419  5EB1
17420  5EB2
17421  5EB3
17422  5EB4
17423  5EB5
17424  5EB6
17425  5EB7
17426  5EB8
17427  5EB9
17428  5EBA
17429  5EBB
17430  5EBC
17431  5EBD
17432  5EBE
17433  5EBF
17434  5EC0
17435  5EC1
17436  5EC2
17437  5EC3
17438  5EC4
17439  5EC5
17440  5EC6
17441  5EC7
17442  5EC8
17443  5EC9
17444  5ECA
17445  5ECB
17446  5ECC
17447  5ECD
17448  5ECE
17449  5ECF
17450  5ED0
17451  5ED1
17452  5ED2
17453  5ED3
17454  5ED4
17455  5ED5
17456  5ED6
17457  5ED7
17458  5ED8
17459  5ED9
17460  5EDA
17461  5EDB
17462  5EDC
17463  5EDD
17464  5EDE
17465  5EDF
17466  5EE0
17467  5EE1
17468  5EE2
17469  5EE3
17470  5EE4
17471  5EE5
17472  5EE6
17473  5EE7
17474  5EE8
17475  5EE9
17476  5EEA
17477  5EEB
17478  5EEC
17479  5EED
17480  5EEE
17481  5EEF
17482  5EF0
17483  5EF1
17484  5EF2
17485  5EF3
17486  5EF4
17487  5EF5
17488  5EF6
17489  5EF7
17490  5EF8
17491  5EF9
17492  5EFA
17493  5EFB
17494  5EFC
17495  5EFD
17496  5EFE
17497  5EFF
17498  5F00
17499  5F01
17500  5F02
17501  5F03
17502  5F04
17503  5F05
17504  5F06
17505  5F07
17506  5F08
17507  5F09
17508  5F0A
17509  5F0B
17510  5F0C
17511  5F0D
17512  5F0E
17513  5F0F
17514  5F10
17515  5F11
17516  5F12
17517  5F13
17518  5F14
17519  5F15
17520  5F16
17521  5F17
17522  5F18
17523  5F19
17524  5F1A
17525  5F1B
17526  5F1C
17527  5F1D
17528  5F1E
17529  5F1F
17530  5F20
17531  5F21
17532  5F22
17533  5F23
17534  5F24
17535  5F25
17536  5F26
17537  5F27
17538  5F28
17539  5F29
17540  5F2A
17541  5F2B
17542  5F2C
17543  5F2D
17544  5F2E
17545  5F2F
17546  5F30
17547  5F31
17548  5F32
17549  5F33
17550  5F34
17551  5F35
17552  5F36
17553  5F37
17554  5F38
17555  5F39
17556  5F3A
17557  5F3B
17558  5F3C
17559  5F3D
17560  5F3E
17561  5F3F
17562  5F40
17563  5F41
17564  5F42
17565  5F43
17566  5F44
17567  5F45
17568  5F46
17569  5F47
17570  5F48
17571  5F49
17572  5F4A
17573  5F4B
17574  5F4C
17575  5F4D
17576  5F4E
17577  5F4F
17578  5F50
17579  5F51
17580  5F52
17581  5F53
17582  5F54
17583  5F55
17584  5F56
17585  5F57
17586  5F58
17587  5F59
17588  5F5A
17589  5F5B
17590  5F5C
17591  5F5D
17592  5F5E
17593  5F5F
17594  5F60
17595  5F61
17596  5F62
17597  5F63
17598  5F64
17599  5F65
17600  5F66
17601  5F67
17602  5F68
17603  5F69
17604  5F6A
17605  5F6B
17606  5F6C
17607  5F6D
17608  5F6E
17609  5F6F
17610  5F70
17611  5F71
17612  5F72
17613  5F73
17614  5F74
17615  5F75
17616  5F76
17617  5F77
17618  5F78
17619  5F79
17620  5F7A
17621  5F7B
17622  5F7C
17623  5F7D
17624  5F7E
17625  5F7F
17626  5F80
17627  5F81
17628  5F82
17629  5F83
17630  5F84
17631  5F85
17632  5F86
17633  5F87
17634  5F88
17635  5F89
17636  5F8A
17637  5F8B
17638  5F8C
17639  5F8D
17640  5F8E
17641  5F8F
17642  5F90
17643  5F91
17644  5F92
17645  5F93
17646  5F94
17647  5F95
17648  5F96
17649  5F97
17650  5F98
17651  5F99
17652  5F9A
17653  5F9B
17654  5F9C
17655  5F9D
17656  5F9E
17657  5F9F
17658  5FA0
17659  5FA1
17660  5FA2
17661  5FA3
17662  5FA4
17663  5FA5
17664  5FA6
17665  5FA7
17666  5FA8
17667  5FA9
17668  5FAA
17669  5FAB
17670  5FAC
17671  5FAD
17672  5FAE
17673  5FAF
17674  5FB0
17675  5FB1
17676  5FB2
17677  5FB3
17678  5FB4
17679  5FB5
17680  5FB6
17681  5FB7
17682  5FB8
17683  5FB9
17684  5FBA
17685  5FBB
17686  5FBC
17687  5FBD
17688  5FBE
17689  5FBF
17690  5FC0
17691  5FC1
17692  5FC2
17693  5FC3
17694  5FC4
17695  5FC5
17696  5FC6
17697  5FC7
17698  5FC8
17699  5FC9
17700  5FCA
17701  5FCB
17702  5FCC
17703  5FCD
17704  5FCE
17705  5FCF
17706  5FD0
17707  5FD1
17708  5FD2
17709  5FD3
17710  5FD4
17711  5FD5
17712  5FD6
17713  5FD7
17714  5FD8
17715  5FD9
17716  5FDA
17717  5FDB
17718  5FDC
17719  5FDD
17720  5FDE
17721  5FDF
17722  5FE0
17723  5FE1
17724  5FE2
17725  5FE3
17726  5FE4
17727  5FE5
17728  5FE6
17729  5FE7
17730  5FE8
17731  5FE9
17732  5FEA
17733  5FEB
17734  5FEC
17735  5FED
17736  5FEE
17737  5FEF
17738  5FF0
17739  5FF1
17740  5FF2
17741  5FF3
17742  5FF4
17743  5FF5
17744  5FF6
17745  5FF7
17746  5FF8
17747  5FF9
17748  5FFA
17749  5FFB
17750  5FFC
17751  5FFD
17752  5FFE
17753  5FFF
17754  6000
17755  6001
17756  6002
17757  6003
17758  6004
17759  6005
17760  6006
17761  6007
17762  6008
17763  6009
17764  600A
17765  600B
17766  600C
17767  600D
17768  600E
17769  600F
17770  6010
17771  6011
17772  6012
17773  6013
17774  6014
17775  6015
17776  6016
17777  6017
17778  6018
17779  6019
17780  601A
17781  601B
17782  601C
17783  601D
17784  601E
17785  601F
17786  6020
17787  6021
17788  6022
17789  6023
17790  6024
17791  6025
17792  6026
17793  6027
17794  6028
17795  6029
17796  602A
17797  602B
17798  602C
17799  602D
17800  602E
17801  602F
17802  6030
17803  6031
17804  6032
17805  6033
17806  6034
17807  6035
17808  6036
17809  6037
17810  6038
17811  6039
17812  603A
17813  603B
17814  603C
17815  603D
17816  603E
17817  603F
17818  6040
17819  6041
17820  6042
17821  6043
17822  6044
17823  6045
17824  6046
17825  6047
17826  6048
17827  6049
17828  604A
17829  604B
17830  604C
17831  604D
17832  604E
17833  604F
17834  6050
17835  6051
17836  6052
17837  6053
17838  6054
17839  6055
17840  6056
17841  6057
17842  6058
17843  6059
17844  605A
17845  605B
17846  605C
17847  605D
17848  605E
17849  605F
17850  6060
17851  6061
17852  6062
17853  6063
17854  6064
17855  6065
17856  6066
17857  6067
17858  6068
17859  6069
17860  606A
17861  606B
17862  606C
17863  606D
17864  606E
17865  606F
17866  6070
17867  6071
17868  6072
17869  6073
17870  6074
17871  6075
17872  6076
17873  6077
17874  6078
17875  6079
17876  607A
17877  607B
17878  607C
17879  607D
17880  607E
17881  607F
17882  6080
17883  6081
17884  6082
17885  6083
17886  6084
17887  6085
17888  6086
17889  6087
17890  6088
17891  6089
17892  608A
17893  608B
17894  608C
17895  608D
17896  608E
17897  608F
17898  6090
17899  6091
17900  6092
17901  6093
17902  6094
17903  6095
17904  6096
17905  6097
17906  6098
17907  6099
17908  609A
17909  609B
17910  609C
17911  609D
17912  609E
17913  609F
17914  60A0
17915  60A1
17916  60A2
17917  60A3
17918  60A4
17919  60A5
17920  60A6
17921  60A7
17922  60A8
17923  60A9
17924  60AA
17925  60AB
17926  60AC
17927  60AD
17928  60AE
17929  60AF
17930  60B0
17931  60B1
17932  60B2
17933  60B3
17934  60B4
17935  60B5
17936  60B6
17937  60B7
17938  60B8
17939  60B9
17940  60BA
17941  60BB
17942  60BC
17943  60BD
17944  60BE
17945  60BF
17946  60C0
17947  60C1
17948  60C2
17949  60C3
17950  60C4
17951  60C5
17952  60C6
17953  60C7
17954  60C8
17955  60C9
17956  60CA
17957  60CB
17958  60CC
17959  60CD
17960  60CE
17961  60CF
17962  60D0
17963  60D1
17964  60D2
17965  60D3
17966  60D4
17967  60D5
17968  60D6
17969  60D7
17970  60D8
17971  60D9
17972  60DA
17973  60DB
17974  60DC
17975  60DD
17976  60DE
17977  60DF
17978  60E0
17979  60E1
17980  60E2
17981  60E3
17982  60E4
17983  60E5
17984  60E6
17985  60E7
17986  60E8
17987  60E9
17988  60EA
17989  60EB
17990  60EC
17991  60ED
17992  60EE
17993  60EF
17994  60F0
17995  60F1
17996  60F2
17997  60F3
17998  60F4
17999  60F5
18000  60F6
18001  60F7
18002  60F8
18003  60F9
18004  60FA
18005  60FB
18006  60FC
18007  60FD
18008  60FE
18009  60FF
18010  6100
18011  6101
18012  6102
18013  6103
18014  6104
18015  6105
18016  6106
18017  6107
18018  6108
18019  6109
18020  610A
18021  610B
18022  610C
18023  610D
18024  610E
18025  610F
18026  6110
18027  6111
18028  6112
18029  6113
18030  6114
18031  6115
18032  6116
18033  6117
18034  6118
18035  6119
18036  611A
18037  611B
18038  611C
18039  611D
18040  611E
18041  611F
18042  6120
18043  6121
18044  6122
18045  6123
18046  6124
18047  6125
18048  6126
18049  6127
18050  6128
18051  6129
18052  612A
18053  612B
18054  612C
18055  612D
18056  612E
18057  612F
18058  6130
18059  6131
18060  6132
18061  6133
18062  6134
18063  6135
18064  6136
18065  6137
18066  6138
18067  6139
18068  613A
18069  613B
18070  613C
18071  613D
18072  613E
18073  613F
18074  6140
18075  6141
18076  6142
18077  6143
18078  6144
18079  6145
18080  6146
18081  6147
18082  6148
18083  6149
18084  614A
18085  614B
18086  614C
18087  614D
18088  614E
18089  614F
18090  6150
18091  6151
18092  6152
18093  6153
18094  6154
18095  6155
18096  6156
18097  6157
18098  6158
18099  6159
18100  615A
18101  615B
18102  615C
18103  615D
18104  615E
18105  615F
18106  6160
18107  6161
18108  6162
18109  6163
18110  6164
18111  6165
18112  6166
18113  6167
18114  6168
18115  6169
18116  616A
18117  616B
18118  616C
18119  616D
18120  616E
18121  616F
18122  6170
18123  6171
18124  6172
18125  6173
18126  6174
18127  6175
18128  6176
18129  6177
18130  6178
18131  6179
18132  617A
18133  617B
18134  617C
18135  617D
18136  617E
18137  617F
18138  6180
18139  6181
18140  6182
18141  6183
18142  6184
18143  6185
18144  6186
18145  6187
18146  6188
18147  6189
18148  618A
18149  618B
18150  618C
18151  618D
18152  618E
18153  618F
18154  6190
18155  6191
18156  6192
18157  6193
18158  6194
18159  6195
18160  6196
18161  6197
18162  6198
18163  6199
18164  619A
18165  619B
18166  619C
18167  619D
18168  619E
18169  619F
18170  61A0
18171  61A1
18172  61A2
18173  61A3
18174  61A4
18175  61A5
18176  61A6
18177  61A7
18178  61A8
18179  61A9
18180  61AA
18181  61AB
18182  61AC
18183  61AD
18184  61AE
18185  61AF
18186  61B0
18187  61B1
18188  61B2
18189  61B3
18190  61B4
18191  61B5
18192  61B6
18193  61B7
18194  61B8
18195  61B9
18196  61BA
18197  61BB
18198  61BC
18199  61BD
18200  61BE
18201  61BF
18202  61C0
18203  61C1
18204  61C2
18205  61C3
18206  61C4
18207  61C5
18208  61C6
18209  61C7
18210  61C8
18211  61C9
18212  61CA
18213  61CB
18214  61CC
18215  61CD
18216  61CE
18217  61CF
18218  61D0
18219  61D1
18220  61D2
18221  61D3
18222  61D4
18223  61D5
18224  61D6
18225  61D7
18226  61D8
18227  61D9
018228  000652        
018229  000653  var hFonts[50] ;
018230  000654  var stringsCV[50] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
18231  3154
18232  3155
18233  3156
18234  3157
18235  3158
18236  3159
18237  315A
18238  315B
18239  315C
18240  315D
18241  315E
18242  315F
18243  3160
18244  3161
18245  3162
18246  3163
18247  3164
18248  3165
18249  3166
18250  3167
18251  3168
18252  3169
18253  316A
18254  316B
18255  316C
18256  316D
18257  316E
18258  316F
18259  3170
18260  3171
18261  3172
18262  3173
18263  3174
18264  3175
18265  3176
18266  3177
18267  3178
18268  3179
18269  317A
18270  317B
18271  317C
18272  317D
18273  317E
18274  317F
18275  3180
18276  3181
18277  3182
18278  3183
18279  3184
18280  3185
18281  3186
18282  3187
18283  3188
18284  3189
18285  318A
18286  318B
18287  318C
18288  318D
18289  318E
18290  318F
18291  3190
18292  3191
18293  3192
18294  3193
18295  3194
18296  3195
18297  3196
18298  3197
18299  3198
18300  3199
18301  319A
18302  319B
18303  319C
18304  319D
18305  319E
18306  319F
18307  31A0
18308  31A1
18309  31A2
18310  31A3
18311  31A4
18312  31A5
18313  31A6
18314  31A7
18315  31A8
18316  31A9
18317  31AA
18318  31AB
18319  31AC
18320  31AD
18321  31AE
18322  31AF
18323  31B0
18324  31B1
18325  31B2
18326  31B3
18327  31B4
18328  31B5
18329  31B6
18330  31B7
018331  000655  // Start P2.inc
018332  000656  var oObjects[MaxTotObjects+1] ;                 // address of objects
018333  000657  var CurrentForm ;
018334  000658  var TouchXpos, TouchYpos ;
018335  000659  var InputType, TouchState, CurInputData, pInputIndex ;
018336  000660  var comRX[40], cmd[CMDLenMAX] ;
018337  000661        
018338  000662  var InputCS, OutputCS ;
018339  000663        
018340  000664        
018341  000665        
018342  000666  func seroutCS(var op)
018343  000667      serout(op) ;
018344  000668      OutputCS ^= op ;
018345  000669  endfunc
018346  000670        
018347  000671  func nak0()
018348  000672      serout(NAK) ;
018349  000673      InputCS := 0 ;
018350  000674  endfunc
018351  000675        
018352  000676  func seroutOcs()
018353  000677      serout(OutputCS) ;
018354  000678      OutputCS := 0 ;
018355  000679  endfunc
018356  000680        
018357  000681  func SendReport(var id, var objt, var objn, var val)
018358  000682      seroutCS(id) ;
018359  000683      seroutCS(objt) ;
018360  000684      seroutCS(objn) ;
018361  000685      seroutCS(val >> 8) ; // first 8 bits
018362  000686      seroutCS(val) ;
018363  000687      seroutOcs() ;
018364  000688  endfunc
018365  000689        
018366  000690        
018367  000691  func ReadObject(var ObjectType, var ObjectIdx)
018368  000692      var j, k, Objects ;
018369  000693      Objects := *(oObjects+ObjectType) ;
018370  000694        
018371  000695      j := 2 + ObjectIdx * 2 + Objects ;
018372  000696       if (ObjectType == tForm)
018373  000697          k := CurrentForm ;
018374  000698      else if (ObjectType == tStrings)
018375  000699          k := stringsCV[ObjectIdx];
018376  000700          else
018377  000701          k := img_GetWord(hndl, *j, IMAGE_INDEX);
018378  000702          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
018379  000703                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
018380  000704      endif
018381  000705      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
018382  000706  endfunc
018383  000707        
018384  000708        
018385  000709  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
018386  000710      var i, j, k, Objects ;
018387  000711      ObjectType &= 0x3f ;
018388  000712      if (ObjectType == tForm)
018389  000713          ActivateForm(ObjectIdx) ;
018390  000714      else
018391  000715          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
018392  000716          i := *(Objects) ;
018393  000717          switch (ObjectType)
018394  000718              case tUserButton :
018395  000719                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
018396  000720                  break ;
018397  000721              default : j := -1 ;
018398  000722          endswitch
018399  000723          if (j != -1)
018400  000724              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
018401  000725              NewVal := NewVal << 1 ;
018402  000726              if (OVF())      // button group index change
018403  000727                  if (*(j+InputData+Ofs_IPD_P1))
018404  000728                      k &= 1 ;    // mask off old group index for momentary
018405  000729                  else
018406  000730                      k &= 3 ;    // mask off old group index for toggle
018407  000731                  endif
018408  000732              else            // normal set
018409  000733                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
018410  000734                  k &= 0xfffc ;    // retain only group index for state set
018411  000735              endif
018412  000736              NewVal |= k ;
018413  000737          endif
018414  000738           if (ObjectType == tStrings)
018415  000739              PrintStrings(ObjectIdx, NewVal, 0);
018416  000740          else
018417  000741              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
018418  000742              img_Show(hndl, i) ; // will only display if form is current
018419  000743          endif
018420  000744      endif
018421  000745  endfunc
018422  000746        
018423  000747  func TurnOffButtons(var group)
018424  000748      var j, k, l;
018425  000749      for (j := 0; j < nInputs; j++)
018426  000750          k := j*IPDatasize ;
018427  000751          if (*(InputData+k+Ofs_IPD_P2) == group)
018428  000752              l := -1 ;
018429  000753               if (*(InputData+k) == tUserButton)
018430  000754                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
018431  000755                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
018432  000756                  img_Show(hndl, l);      // only shows on current form
018433  000757              endif
018434  000758          endif
018435  000759      next
018436  000760  endfunc
018437  000761        
018438  000762        
018439  000763        
018440  000764        
018441  000765  func ActivateForm(var newform)
018442  000766      var i, j, *p ;
018443  000767        
018444  000768      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
018445  000769          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
018446  000770              if (img_GetWord(hndl, i, IMAGE_TAG))
018447  000771                  img_Disable(hndl,i) ;
018448  000772              endif
018449  000773          next
018450  000774      endif
018451  000775      CurrentForm := newform ;
018452  000776      // display newform image or clear to image color
018453  000777      if (FormBGcolors[CurrentForm] != ColorBGimage)
018454  000778          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
018455  000779          gfx_Cls() ;
018456  000780          DoGFXObjects() ;                                    // display GFX 'widgets'
018457  000781      endif
018458  000782        
018459  000783      // enable inputs
018460  000784      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
018461  000785          j := img_GetWord(hndl, i, IMAGE_TAG) ;
018462  000786          if (j)
018463  000787              j-- ;
018464  000788              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
018465  000789              //if (j != tKeyboard)
018466  000790              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
018467  000791                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
018468  000792              endif
018469  000793              img_Show(hndl,i) ; // show initialy, if required
018470  000794              if (j == tForm)
018471  000795                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
018472  000796              endif
018473  000797          endif
018474  000798      next
018475  000799      for (i := 0; i < nStrings; i++)
018476  000800          if (stringsCV[i] != -1)
018477  000801              WriteObject(tStrings, i, stringsCV[i]) ;
018478  000802          endif
018479  000803      next
018480  000804        
018481  000805  endfunc
018482  000806        
018483  000807  func UpdateObjects(var newval)
018484  000808      var IPidx, otherOBJ ;
018485  000809      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
018486  000810        
018487  000811          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
018488  000812              img_Show(hndl, *(pInputIndex));      // only shows on current form
018489  000813          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
018490  000814              if (*(CurInputData+Ofs_IPD_P1))
018491  000815                  newval &= 1;
018492  000816              else
018493  000817                  newval &= 3;
018494  000818              endif
018495  000819              if (newval > 1) newval := 1;
018496  000820          endif
018497  000821          IPidx := *(CurInputData+TouchState) ;
018498  000822          while(IPidx != 0)
018499  000823              otherOBJ := IPidx + InputData;
018500  000824              if (*(otherOBJ) == OT_REPORT)
018501  000825          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
018502  000826              else if (*(otherOBJ) == OT_MAGIC)
018503  000827                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
018504  000828                  IPidx(newval) ;
018505  000829              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
018506  000830                  if (*(otherOBJ) == OT_ACTIVATE)
018507  000831                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
018508  000832                      InputType := tForm ;
018509  000833                  else if (*(otherOBJ) == OT_SETCONST)
018510  000834                      newval := *(otherOBJ+Ofs_IPD_P3) ;
018511  000835                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
018512  000836                  else if (*(otherOBJ) == OT_SETANOTHER)
018513  000837                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
018514  000838                  else if (*(otherOBJ) == OT_PREVFRAME)
018515  000839                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
018516  000840                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
018517  000841                      endif
018518  000842                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
018519  000843                  else if (*(otherOBJ) == OT_NEXTFRAME)
018520  000844                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
018521  000845                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
018522  000846                      endif
018523  000847                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
018524  000848                  else if (*(otherOBJ) == OT_PREVSTRING)
018525  000849                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
018526  000850                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
018527  000851                      endif
018528  000852                  else if (*(otherOBJ) == OT_NEXTSTRING)
018529  000853                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
018530  000854                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
018531  000855                      endif
018532  000856                  endif
018533  000857              endif
018534  000858              IPidx := *(otherOBJ+TouchState) ;
018535  000859          wend
018536  000860      endif
018537  000861  endfunc
018538  000862        
018539  000863  // End P2.inc
018540  000864  func DoGFXObjects()
018541  000865  endfunc
018542  000866        
018543  000867  // Start P3.inc
018544  000868  func main()
018545  000869      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
018546  000870        
018547  000871      putstr("Mounting...\n");
018548  000872      if (!(file_Mount()))
018549  000873          while(!(file_Mount()))
018550  000874              putstr("Drive not mounted...");
018551  000875              pause(200);
018552  000876              gfx_Cls();
018553  000877              pause(200);
018554  000878          wend
018555  000879      endif
018556  000880  //    gfx_MoveTo(0, 0);
018557  000881  //    print(mem_Heap()," ") ;
018558  000882  //    gfx_TransparentColour(0x0020);
018559  000883  //    gfx_Transparency(ON);
018560  000884        
018561  000885      gfx_ScreenMode(LANDSCAPE) ;
018562  000886        
018563  000887      // open image control
018564  000888      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
018565  000889        
018566  000890      // init 'constants'
018567  000891  // End P3.inc
018568  000892        
018569  000893      oObjects[tDipSwitch] := oDipSwitchs ;
018570  000894      oObjects[tKnob] := oKnobs ;
018571  000895      oObjects[tRockerSwitch] := oRockerSwitchs ;
018572  000896      oObjects[tRotarySwitch] := oRotarySwitchs ;
018573  000897      oObjects[tGSlider] := oGSliders ;
018574  000898      oObjects[tTrackbar] := oTrackbars ;
018575  000899      oObjects[tWinButton] := oWinButtons ;
018576  000900      oObjects[tAngularmeter] := oAngularmeters ;
018577  000901      oObjects[tCoolgauge] := oCoolgauges ;
018578  000902      oObjects[tCustomdigits] := oCustomdigitss ;
018579  000903      oObjects[tForm] := oForms ;
018580  000904      oObjects[tGauge] := oGauges ;
018581  000905      oObjects[tImage] := oImages ;
018582  000906      oObjects[tKeyboard] := oKeyboards ;
018583  000907      oObjects[tLed] := oLeds ;
018584  000908      oObjects[tLeddigits] := oLeddigitss ;
018585  000909      oObjects[tMeter] := oMeters ;
018586  000910      oObjects[tStrings] := oStringss ;
018587  000911      oObjects[tThermometer] := oThermometers ;
018588  000912      oObjects[tUserled] := oUserleds ;
018589  000913      oObjects[tVideo] := oVideos ;
018590  000914      oObjects[tStaticText] := oStaticTexts ;
018591  000915      oObjects[tSounds] := oSoundss ;
018592  000916      oObjects[tTimer] := oTimers ;
018593  000917      oObjects[tSpectrum] := oSpectrums ;
018594  000918      oObjects[tTank] := oTanks ;
018595  000919      oObjects[tUserImages] := oUserImagess ;
018596  000920      oObjects[tPinOutput] := oPinOutputs ;
018597  000921      oObjects[tPinInput] := oPinInputs ;
018598  000922      oObjects[t4Dbutton] := o4Dbuttons ;
018599  000923      oObjects[tAniButton] := oAniButtons ;
018600  000924      oObjects[tColorPicker] := oColorPickers ;
018601  000925      oObjects[tUserButton] := oUserButtons ;
018602  000926      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
018603  000927      hFonts[2] := file_LoadImageControl("BCN3D_~1.d03", "BCN3D_~1.g03", 1)  ;
018604  000928      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
018605  000929      hFonts[5] := file_LoadImageControl("BCN3D_~1.d05", "BCN3D_~1.g05", 1)  ;
018606  000930      hFonts[28] := file_LoadImageControl("BCN3D_~1.d06", "BCN3D_~1.g06", 1)  ;
018607  000931      hFonts[40] := file_LoadImageControl("BCN3D_~1.d04", "BCN3D_~1.g04", 1)  ;
018608  000932      hFonts[46] := file_LoadImageControl("BCN3D_~1.d07", "BCN3D_~1.g07", 1)  ;
018609  000933      hFonts[0] := hFonts[2] ;
018610  000934      hFonts[4] := hFonts[2] ;
018611  000935      hFonts[6] := hFonts[2] ;
018612  000936      hFonts[7] := hFonts[1] ;
018613  000937      hFonts[8] := hFonts[1] ;
018614  000938      hFonts[9] := hFonts[2] ;
018615  000939      hFonts[10] := hFonts[5] ;
018616  000940      hFonts[11] := hFonts[2] ;
018617  000941      hFonts[12] := hFonts[1] ;
018618  000942      hFonts[13] := hFonts[2] ;
018619  000943      hFonts[14] := hFonts[2] ;
018620  000944      hFonts[15] := hFonts[2] ;
018621  000945      hFonts[16] := hFonts[1] ;
018622  000946      hFonts[17] := hFonts[5] ;
018623  000947      hFonts[18] := hFonts[2] ;
018624  000948      hFonts[19] := hFonts[2] ;
018625  000949      hFonts[20] := hFonts[2] ;
018626  000950      hFonts[21] := hFonts[2] ;
018627  000951      hFonts[22] := hFonts[2] ;
018628  000952      hFonts[23] := hFonts[1] ;
018629  000953      hFonts[24] := hFonts[1] ;
018630  000954      hFonts[25] := hFonts[1] ;
018631  000955      hFonts[26] := hFonts[1] ;
018632  000956      hFonts[27] := hFonts[2] ;
018633  000957      hFonts[29] := hFonts[2] ;
018634  000958      hFonts[30] := hFonts[1] ;
018635  000959      hFonts[31] := hFonts[2] ;
018636  000960      hFonts[32] := hFonts[2] ;
018637  000961      hFonts[33] := hFonts[2] ;
018638  000962      hFonts[34] := hFonts[2] ;
018639  000963      hFonts[35] := hFonts[2] ;
018640  000964      hFonts[36] := hFonts[2] ;
018641  000965      hFonts[37] := hFonts[2] ;
018642  000966      hFonts[38] := hFonts[2] ;
018643  000967      hFonts[39] := hFonts[2] ;
018644  000968      hFonts[41] := hFonts[40] ;
018645  000969      hFonts[42] := hFonts[40] ;
018646  000970      hFonts[43] := hFonts[46] ;
018647  000971      hFonts[44] := hFonts[2] ;
018648  000972      hFonts[45] := hFonts[46] ;
018649  000973      hFonts[47] := hFonts[46] ;
018650  000974      hFonts[48] := hFonts[2] ;
018651  000975      hFonts[49] := hFonts[2] ;
018652  000976  // Start P4.inc
018653  000977      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
018654  000978      // init comms
018655  000979      com_Init(comRX,CMDLenMAX,0);
018656  000980      com_SetBaud(COM0,19886);
018657  000981      com_TXbuffer(comTX, 100, 0);
018658  000982      snd_BufSize(2) ;
018659  000983      // tag 'real' objects
018660  000984      for (i := 0; i <= MaxTotObjects; i++)
018661  000985          if (   (i != tSounds)
018662  000986              && (i != tTimer)
018663  000987              && (i != tPinOutput)
018664  000988              && (i != tPinInput) )
018665  000989              TouchXpos := oObjects[i] ;
018666  000990              TouchYpos := *(TouchXpos) ;
018667  000991              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
018668  000992                  oldn := *(TouchXpos+ImageTouched*2) ;
018669  000993                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
018670  000994                  if (oldn != -1)
018671  000995                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
018672  000996                      img_Disable(hndl, oldn) ;
018673  000997                  endif
018674  000998              next
018675  000999          endif
018676  001000      next
018677  001001        
018678  001002      // display initial form
018679  001003      CurrentForm := -1 ;
018680  001004      ActivateForm(0) ; // need to change this according to first actual form
018681  001005        
018682  001006  // End P4.inc
018683  001007  // Start P5.inc
018684  001008      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
018685  001009      oldn := -1 ;
018686  001010      repeat
018687  001011        
018688  001012          // check comms for command, how to NAK invalid command
018689  001013          if (com_Count() != 0)
018690  001014              i := serin() ;
018691  001015              InputCS ^= i ;               // update checksum
018692  001016              if (   (cmdi > 2)
018693  001017                  && (cmd[0] == WRITE_STRU) )
018694  001018                  j := (cmdi-1) >> 1 + 2 ;
018695  001019                  if (j == CMDLenMAX)    // max length exceeded
018696  001020                      nak0() ;
018697  001021                      cmdi := -1 ;
018698  001022                  else if (cmdi & 1)
018699  001023                      cmd[j] := i ;
018700  001024                      if (cmd[2] == 0)    // if string complete
018701  001025                          if (InputCS)
018702  001026                              nak0() ;
018703  001027                          else
018704  001028                              if (cmd[0] == WRITE_STRU)
018705  001029                              cmd[j] := 0 ;                     // terminate it
018706  001030                              PrintStrings(cmd[1], &cmd[3], 1) ;
018707  001031                              serout(ACK) ;
018708  001032                              else
018709  001033                              endif
018710  001034                          endif
018711  001035                          cmdi := -1 ;
018712  001036                      endif
018713  001037                  else
018714  001038                      cmd[j] := cmd[j] << 8 + i ;
018715  001039                      cmd[2]-- ;          // dec length
018716  001040                  endif
018717  001041                  cmdi++ ;
018718  001042              else // not unicode string
018719  001043                  cmd[cmdi++] := i ;
018720  001044                   if (cmd[0] == WRITE_STR)                  // Ansi String
018721  001045                      if (cmdi == CMDLenMAX)      // max length exceeded
018722  001046                          nak0() ;
018723  001047                          cmdi := 0 ;
018724  001048                      else if (cmdi > 2)
018725  001049                          if (cmd[2] == -1)
018726  001050                              if (InputCS)
018727  001051                                  nak0() ;
018728  001052                              else
018729  001053                                  if (cmd[0] == WRITE_STR)
018730  001054                                  cmd[cmdi-1] := 0 ;                     // terminate it
018731  001055                                  PrintStrings(cmd[1], &cmd[3], 1) ;
018732  001056                                  serout(ACK) ;
018733  001057                                  else
018734  001058                                  endif
018735  001059                              endif
018736  001060                              cmdi := 0 ;
018737  001061                          else
018738  001062                              cmd[2]-- ;          // dec length
018739  001063                          endif
018740  001064                      endif
018741  001065                  else if (   (cmd[0] == READ_OBJ)
018742  001066                           && (cmdi == 4)         )
018743  001067                      if (InputCS)
018744  001068                          nak0() ;
018745  001069                      else
018746  001070                          ReadObject(cmd[1], cmd[2]) ;
018747  001071                      endif
018748  001072                      cmdi := 0 ;
018749  001073                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
018750  001074                           && (cmdi == 6)          )
018751  001075                      if (InputCS)
018752  001076                          nak0() ;
018753  001077                      else
018754  001078                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
018755  001079                          serout(ACK) ;
018756  001080                      endif
018757  001081                      cmdi := 0 ;
018758  001082                  else if (   (cmd[0] == WRITE_CONTRAST)
018759  001083                           && (cmdi == 3)         )
018760  001084                      if (InputCS)
018761  001085                          nak0() ;
018762  001086                      else
018763  001087                          gfx_Contrast(cmd[1]) ;
018764  001088                          serout(ACK) ;
018765  001089                      endif
018766  001090                      cmdi := 0 ;
018767  001091                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
018768  001092                      nak0() ;
018769  001093                      cmdi := 0 ;
018770  001094                  endif
018771  001095              endif   // not unicode string
018772  001096          endif   // a character is available
018773  001097        
018774  001098        
018775  001099      // touch code processing
018776  001100        
018777  001101          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
018778  001102          ImageTouched := img_Touched(hndl,-1) ;
018779  001103          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
018780  001104              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
018781  001105                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
018782  001106              endif
018783  001107              if (TouchStatus != TOUCH_RELEASED)        // if not released
018784  001108                  if (oldn != -1)
018785  001109                      ImageTouched := oldn ;
018786  001110                  else
018787  001111                      if (oldn != ImageTouched)
018788  001112                  oldn := ImageTouched ;
018789  001113                          TouchStatus := TOUCH_PRESSED ;
018790  001114                      endif
018791  001115                  endif
018792  001116                  TouchXpos  := touch_Get(TOUCH_GETX);
018793  001117                  TouchYpos  := touch_Get(TOUCH_GETY);
018794  001118                  TouchState := Ofs_IPD_DOWN ;
018795  001119              else
018796  001120                  ImageTouched := oldn ;                     // simulate release of what we touched
018797  001121                  oldn := -1 ;                    // prevent double release
018798  001122                  TouchState := Ofs_IPD_RELEASE ;
018799  001123              endif
018800  001124              if (ImageTouched != -1)
018801  001125                          CurInputData := InputControls[ImageTouched] + InputData;
018802  001126                          InputType := *(CurInputData) ;
018803  001127                          i := InputType ;
018804  001128                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
018805  001129                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
018806  001130              endif
018807  001131          endif
018808  001132   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
018809  001133        
018810  001134          sys_EventsResume() ;
018811  001135      forever
018812  001136        
018813  001137  cDipswitch:
018814  001138        
018815  001139  cKnob:
018816  001140        
018817  001141  cRockerswitch:
018818  001142        
018819  001143  cRotaryswitch:
018820  001144        
018821  001145  cSlider:
018822  001146  cTrackbar:
018823  001147        
018824  001148  c4DButton:
018825  001149  cUserButton:
018826  001150      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
018827  001151      goto gbutton ;
018828  001152  cWinbutton:
018829  001153  gbutton:
018830  001154      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
018831  001155      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
018832  001156          if (TouchStatus == TOUCH_RELEASED)
018833  001157              i &= 0xfffe ;
018834  001158              TouchState == Ofs_IPD_DOWN ;
018835  001159          else
018836  001160              i |= 1 ;
018837  001161              TouchState == Ofs_IPD_RELEASE ;
018838  001162          endif
018839  001163      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
018840  001164          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
018841  001165              if ((i & 3) == 3)
018842  001166                  i &= 0xfffc ;
018843  001167              else
018844  001168                  i++ ;
018845  001169              endif
018846  001170          else
018847  001171              i |= 1 ;                                      // make down regardless of current state
018848  001172          endif
018849  001173      else                        // group action, up all other buttons on touch press, reports 0 for button down
018850  001174          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
018851  001175              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
018852  001176          endif
018853  001177          i := (i & 0xfffc) | 2 ;
018854  001178      endif
018855  001179        
018856  001180      UpdateObjects(i) ;
018857  001181  endsub ;
018858  001182        
018859  001183  cAniButton:
018860  001184        
018861  001185  cColorPicker:
018862  001186        
018863  001187  endfunc
018864  001188  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 828 file:BCN3D_SIGMA.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 766 file:BCN3D_SIGMA.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       15519  0x00003c9f (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 108)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS    2805  0x00000af5 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  366  0x0000016e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 210)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                286  0x0000011e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         282  0x0000011a (mem) word (global)  (usage 24)
CurrentForm                          272  0x00000110 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       14887  0x00003a27 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       12387  0x00003063FormBGcolors                       12387  0x00003063 (mem) word[69] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         145  0x00000091FormEndIndex                         145  0x00000091 (mem) word[69] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[69] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[50] (global)  (usage 282)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 87)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             202  0x000000ca (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm11                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm12                              171  0x000000ab (const ??? 0)  (usage 3)
iForm13                              120  0x00000078 (const ??? 0)  (usage 3)
iForm14                               36  0x00000024 (const ??? 0)  (usage 3)
iForm15                              173  0x000000ad (const ??? 0)  (usage 3)
iForm16                              102  0x00000066 (const ??? 0)  (usage 3)
iForm17                              126  0x0000007e (const ??? 0)  (usage 3)
iForm18                              187  0x000000bb (const ??? 0)  (usage 3)
iForm19                               40  0x00000028 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               42  0x0000002a (const ??? 0)  (usage 3)
iForm21                               51  0x00000033 (const ??? 0)  (usage 3)
iForm22                              202  0x000000ca (const ??? 0)  (usage 3)
iForm23                              217  0x000000d9 (const ??? 0)  (usage 3)
iForm24                              248  0x000000f8 (const ??? 0)  (usage 3)
iForm25                              128  0x00000080 (const ??? 0)  (usage 3)
iForm27                               54  0x00000036 (const ??? 0)  (usage 3)
iForm28                               66  0x00000042 (const ??? 0)  (usage 3)
iForm29                              194  0x000000c2 (const ??? 0)  (usage 3)
iForm3                               116  0x00000074 (const ??? 0)  (usage 3)
iForm31                               74  0x0000004a (const ??? 0)  (usage 3)
iForm32                               77  0x0000004d (const ??? 0)  (usage 3)
iForm33                               80  0x00000050 (const ??? 0)  (usage 3)
iForm34                               92  0x0000005c (const ??? 0)  (usage 3)
iForm35                               97  0x00000061 (const ??? 0)  (usage 3)
iForm36                              192  0x000000c0 (const ??? 0)  (usage 3)
iForm37                              207  0x000000cf (const ??? 0)  (usage 3)
iForm38                              209  0x000000d1 (const ??? 0)  (usage 3)
iForm39                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm4                                16  0x00000010 (const ??? 0)  (usage 3)
iForm40                              283  0x0000011b (const ??? 0)  (usage 3)
iForm41                              245  0x000000f5 (const ??? 0)  (usage 3)
iForm42                              220  0x000000dc (const ??? 0)  (usage 3)
iForm43                              225  0x000000e1 (const ??? 0)  (usage 3)
iForm44                              106  0x0000006a (const ??? 0)  (usage 3)
iForm46                              227  0x000000e3 (const ??? 0)  (usage 3)
iForm47                              124  0x0000007c (const ??? 0)  (usage 3)
iForm48                              135  0x00000087 (const ??? 0)  (usage 3)
iForm49                              142  0x0000008e (const ??? 0)  (usage 3)
iForm5                                21  0x00000015 (const ??? 0)  (usage 3)
iForm50                              230  0x000000e6 (const ??? 0)  (usage 3)
iForm51                              235  0x000000eb (const ??? 0)  (usage 3)
iForm52                              147  0x00000093 (const ??? 0)  (usage 3)
iForm53                              159  0x0000009f (const ??? 0)  (usage 3)
iForm54                              238  0x000000ee (const ??? 0)  (usage 3)
iForm55                              241  0x000000f1 (const ??? 0)  (usage 3)
iForm56                              250  0x000000fa (const ??? 0)  (usage 3)
iForm57                              252  0x000000fc (const ??? 0)  (usage 3)
iForm58                              257  0x00000101 (const ??? 0)  (usage 3)
iForm59                              269  0x0000010d (const ??? 0)  (usage 3)
iForm6                                26  0x0000001a (const ??? 0)  (usage 3)
iForm60                              259  0x00000103 (const ??? 0)  (usage 3)
iForm61                              262  0x00000106 (const ??? 0)  (usage 3)
iForm62                              264  0x00000108 (const ??? 0)  (usage 3)
iForm63                              267  0x0000010b (const ??? 0)  (usage 3)
iForm64                              280  0x00000118 (const ??? 0)  (usage 3)
iForm65                              285  0x0000011d (const ??? 0)  (usage 3)
iForm66                              289  0x00000121 (const ??? 0)  (usage 3)
iForm67                              292  0x00000124 (const ??? 0)  (usage 3)
iForm68                              295  0x00000127 (const ??? 0)  (usage 3)
iForm7                               255  0x000000ff (const ??? 0)  (usage 3)
iForm8                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm9                                32  0x00000020 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 39)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 12)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 15)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        283  0x0000011bInputControls                        283  0x0000011b (mem) word[298] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
InputCS                              526  0x0000020e (mem) word (global)  (usage 21)
InputData                            879  0x0000036fInputData                            879  0x0000036f (mem) word[4708] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 24)
InputType                            278  0x00000116 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          10295  0x00002837iStrings0                          10295  0x00002837 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings1                          10321  0x00002851iStrings1                          10321  0x00002851 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings10                         10555  0x0000293biStrings10                         10555  0x0000293b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings11                         10581  0x00002955iStrings11                         10581  0x00002955 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings12                         10607  0x0000296fiStrings12                         10607  0x0000296f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings13                         10633  0x00002989iStrings13                         10633  0x00002989 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings14                         10659  0x000029a3iStrings14                         10659  0x000029a3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings15                         10685  0x000029bdiStrings15                         10685  0x000029bd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings16                         10711  0x000029d7iStrings16                         10711  0x000029d7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings17                         10737  0x000029f1iStrings17                         10737  0x000029f1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings18                         10763  0x00002a0biStrings18                         10763  0x00002a0b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings19                         10789  0x00002a25iStrings19                         10789  0x00002a25 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings2                          10347  0x0000286biStrings2                          10347  0x0000286b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings20                         10815  0x00002a3fiStrings20                         10815  0x00002a3f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings21                         10841  0x00002a59iStrings21                         10841  0x00002a59 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings22                         10867  0x00002a73iStrings22                         10867  0x00002a73 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings23                         10893  0x00002a8diStrings23                         10893  0x00002a8d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings24                         10919  0x00002aa7iStrings24                         10919  0x00002aa7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings25                         10945  0x00002ac1iStrings25                         10945  0x00002ac1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings26                         10971  0x00002adbiStrings26                         10971  0x00002adb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings27                         10997  0x00002af5iStrings27                         10997  0x00002af5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings28                         11023  0x00002b0fiStrings28                         11023  0x00002b0f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings29                         11049  0x00002b29iStrings29                         11049  0x00002b29 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings3                          10373  0x00002885iStrings3                          10373  0x00002885 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings30                         11075  0x00002b43iStrings30                         11075  0x00002b43 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings31                         11101  0x00002b5diStrings31                         11101  0x00002b5d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings32                         11127  0x00002b77iStrings32                         11127  0x00002b77 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings33                         11153  0x00002b91iStrings33                         11153  0x00002b91 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings34                         11179  0x00002babiStrings34                         11179  0x00002bab (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings35                         11205  0x00002bc5iStrings35                         11205  0x00002bc5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings36                         11231  0x00002bdfiStrings36                         11231  0x00002bdf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings37                         11257  0x00002bf9iStrings37                         11257  0x00002bf9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings38                         11283  0x00002c13iStrings38                         11283  0x00002c13 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings39                         11309  0x00002c2diStrings39                         11309  0x00002c2d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings4                          10399  0x0000289fiStrings4                          10399  0x0000289f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings40                         11335  0x00002c47iStrings40                         11335  0x00002c47 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings41                         11361  0x00002c61iStrings41                         11361  0x00002c61 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings42                         11387  0x00002c7biStrings42                         11387  0x00002c7b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings43                         11413  0x00002c95iStrings43                         11413  0x00002c95 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings44                         11439  0x00002cafiStrings44                         11439  0x00002caf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings45                         11465  0x00002cc9iStrings45                         11465  0x00002cc9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings46                         11491  0x00002ce3iStrings46                         11491  0x00002ce3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings47                         11517  0x00002cfdiStrings47                         11517  0x00002cfd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings48                         11543  0x00002d17iStrings48                         11543  0x00002d17 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings49                         11569  0x00002d31iStrings49                         11569  0x00002d31 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings5                          10425  0x000028b9iStrings5                          10425  0x000028b9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings6                          10451  0x000028d3iStrings6                          10451  0x000028d3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings7                          10477  0x000028ediStrings7                          10477  0x000028ed (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings8                          10503  0x00002907iStrings8                          10503  0x00002907 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings9                          10529  0x00002921iStrings9                          10529  0x00002921 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          27  0x0000001b (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        268  0x0000010c (const ??? 0)  (usage 3)
iUserbutton100                        63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton101                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton102                        81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton103                        82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton104                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton105                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton106                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton107                        86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton108                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton109                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton11                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton110                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton111                        90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton112                        93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton113                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton114                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton115                        98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton116                        99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton117                       100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton118                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton119                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton12                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton120                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton121                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton122                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton123                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton124                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton125                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton126                        50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton127                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton128                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton129                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton13                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton130                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton131                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton132                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton133                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton134                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton135                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton136                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton137                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton138                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton139                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton14                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton140                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton141                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton142                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton143                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton144                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton145                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton146                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton147                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton148                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton149                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton15                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton150                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton151                       107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton152                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton153                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton154                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton155                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton156                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton157                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton158                       104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton159                        30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton16                         35  0x00000023 (const ??? 0)  (usage 3)
iUserbutton160                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton161                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton162                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton163                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton164                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton165                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton166                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton167                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton168                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton169                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton17                         37  0x00000025 (const ??? 0)  (usage 3)
iUserbutton170                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton171                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton177                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton178                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton179                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton18                         33  0x00000021 (const ??? 0)  (usage 3)
iUserbutton180                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton181                       236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton182                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton183                       242  0x000000f2 (const ??? 0)  (usage 3)
iUserbutton184                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton185                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton186                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton187                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton188                       247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton189                       251  0x000000fb (const ??? 0)  (usage 3)
iUserbutton19                         34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton190                       254  0x000000fe (const ??? 0)  (usage 3)
iUserbutton191                       265  0x00000109 (const ??? 0)  (usage 3)
iUserbutton192                       256  0x00000100 (const ??? 0)  (usage 3)
iUserbutton193                       270  0x0000010e (const ??? 0)  (usage 3)
iUserbutton194                       260  0x00000104 (const ??? 0)  (usage 3)
iUserbutton195                       261  0x00000105 (const ??? 0)  (usage 3)
iUserbutton196                       271  0x0000010f (const ??? 0)  (usage 3)
iUserbutton197                       286  0x0000011e (const ??? 0)  (usage 3)
iUserbutton198                       287  0x0000011f (const ??? 0)  (usage 3)
iUserbutton199                       272  0x00000110 (const ??? 0)  (usage 3)
iUserbutton2                          28  0x0000001c (const ??? 0)  (usage 3)
iUserbutton20                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton200                       273  0x00000111 (const ??? 0)  (usage 3)
iUserbutton201                       274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton202                       275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton203                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton204                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton205                       278  0x00000116 (const ??? 0)  (usage 3)
iUserbutton206                       281  0x00000119 (const ??? 0)  (usage 3)
iUserbutton207                       282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton209                       288  0x00000120 (const ??? 0)  (usage 3)
iUserbutton21                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton210                       290  0x00000122 (const ??? 0)  (usage 3)
iUserbutton211                       293  0x00000125 (const ??? 0)  (usage 3)
iUserbutton212                       296  0x00000128 (const ??? 0)  (usage 3)
iUserbutton213                       297  0x00000129 (const ??? 0)  (usage 3)
iUserbutton215                       291  0x00000123 (const ??? 0)  (usage 3)
iUserbutton22                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton23                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton24                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton25                        140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton26                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton27                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton28                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton29                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton3                         179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton30                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton31                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton32                         38  0x00000026 (const ??? 0)  (usage 3)
iUserbutton33                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton34                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton35                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton36                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton37                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton38                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton39                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton41                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton44                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton45                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton46                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton47                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton48                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton49                        253  0x000000fd (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton51                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton52                         41  0x00000029 (const ??? 0)  (usage 3)
iUserbutton53                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton54                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton55                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton56                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton57                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton58                        125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton59                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton6                          17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton60                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton63                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton64                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton65                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton66                        218  0x000000da (const ??? 0)  (usage 3)
iUserbutton67                        246  0x000000f6 (const ??? 0)  (usage 3)
iUserbutton68                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton69                        249  0x000000f9 (const ??? 0)  (usage 3)
iUserbutton7                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton70                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton71                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton72                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton73                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton74                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton75                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton76                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton77                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton78                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton79                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton8                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton80                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton81                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton82                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton83                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton84                        201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton85                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton86                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton87                        221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton89                         31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton9                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton90                        203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton91                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton92                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton94                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton95                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton96                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton97                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton98                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton99                         62  0x0000003e (const ??? 0)  (usage 3)
iUserimages0                         200  0x000000c8 (const ??? 0)  (usage 3)
iUserimages1                          14  0x0000000e (const ??? 0)  (usage 3)
iUserimages2                         279  0x00000117 (const ??? 0)  (usage 3)
iUserimages4                          76  0x0000004c (const ??? 0)  (usage 3)
iUserimages5                          79  0x0000004f (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              177  0x000000b1 (const ??? 0)  (usage 3)
iVideo10                             105  0x00000069 (const ??? 0)  (usage 3)
iVideo11                              53  0x00000035 (const ??? 0)  (usage 3)
iVideo12                             219  0x000000db (const ??? 0)  (usage 3)
iVideo13                             266  0x0000010a (const ??? 0)  (usage 3)
iVideo14                              15  0x0000000f (const ??? 0)  (usage 3)
iVideo15                             186  0x000000ba (const ??? 0)  (usage 3)
iVideo16                              96  0x00000060 (const ??? 0)  (usage 3)
iVideo17                             101  0x00000065 (const ??? 0)  (usage 3)
iVideo18                             294  0x00000126 (const ??? 0)  (usage 3)
iVideo19                             258  0x00000102 (const ??? 0)  (usage 3)
iVideo2                              193  0x000000c1 (const ??? 0)  (usage 3)
iVideo20                             115  0x00000073 (const ??? 0)  (usage 3)
iVideo3                               71  0x00000047 (const ??? 0)  (usage 3)
iVideo4                               72  0x00000048 (const ??? 0)  (usage 3)
iVideo5                               73  0x00000049 (const ??? 0)  (usage 3)
iVideo6                              127  0x0000007f (const ??? 0)  (usage 3)
iVideo7                              263  0x00000107 (const ??? 0)  (usage 3)
iVideo8                              284  0x0000011c (const ??? 0)  (usage 3)
iVideo9                              229  0x000000e5 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                12525  0x000030edkKeyboardKeystrokes                12525  0x000030ed (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               12919  0x00003277 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               16485  0x00004065 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (usage 15)
nInputs                              428  0x000001ac (const dword)  (usage 3)
nObjects                             298  0x0000012a (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              50  0x00000032 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         11941  0x00002ea5o4Dbuttons                         11941  0x00002ea5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAngularmeters                     11609  0x00002d59oAngularmeters                     11609  0x00002d59 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAniButtons                        11943  0x00002ea7oAniButtons                        11943  0x00002ea7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      11945  0x00002ea9oColorPickers                      11945  0x00002ea9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCoolgauges                        11611  0x00002d5boCoolgauges                        11611  0x00002d5b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCustomdigitss                     11613  0x00002d5doCustomdigitss                     11613  0x00002d5d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oDipSwitchs                        11595  0x00002d4boDipSwitchs                        11595  0x00002d4b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                             11615  0x00002d5foForms                             11615  0x00002d5f (mem) word[70] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 9)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            11755  0x00002deboGauges                            11755  0x00002deb (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oGSliders                          11603  0x00002d53oGSliders                          11603  0x00002d53 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oImages                            11757  0x00002dedoImages                            11757  0x00002ded (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKeyboards                         11759  0x00002defoKeyboards                         11759  0x00002def (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKnobs                             11597  0x00002d4doKnobs                             11597  0x00002d4d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                        11763  0x00002df3oLeddigitss                        11763  0x00002df3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oLeds                              11761  0x00002df1oLeds                              11761  0x00002df1 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                            11765  0x00002df5oMeters                            11765  0x00002df5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             204  0x000000cc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         11939  0x00002ea3oPinInputs                         11939  0x00002ea3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oPinOutputs                        12385  0x00003061oPinOutputs                        12385  0x00003061 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     11599  0x00002d4foRockerSwitchs                     11599  0x00002d4f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oRotarySwitchs                     11601  0x00002d51oRotarySwitchs                     11601  0x00002d51 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oScopes                            11921  0x00002e91oScopes                            11921  0x00002e91 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
oSoundss                           12383  0x0000305foSoundss                           12383  0x0000305f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSpectrums                         11919  0x00002e8foSpectrums                         11919  0x00002e8f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStaticTexts                       11917  0x00002e8doStaticTexts                       11917  0x00002e8d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStringss                          11767  0x00002df7oStringss                          11767  0x00002df7 (mem) word[51] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 69)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 600)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             11923  0x00002e93oTanks                             11923  0x00002e93 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oThermometers                      11869  0x00002e5doThermometers                      11869  0x00002e5d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTimers                            12381  0x0000305doTimers                            12381  0x0000305d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTrackbars                         11605  0x00002d55oTrackbars                         11605  0x00002d55 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserButtons                       11947  0x00002eaboUserButtons                       11947  0x00002eab (mem) word[217] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 12)
oUserImagess                       11925  0x00002e95oUserImagess                       11925  0x00002e95 (mem) word[7] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserleds                          11871  0x00002e5foUserleds                          11871  0x00002e5f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             528  0x00000210 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            11873  0x00002e61oVideos                            11873  0x00002e61 (mem) word[22] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        11607  0x00002d57oWinButtons                        11607  0x00002d57 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          284  0x0000011c (mem) word (global)  (usage 15)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       16520  0x00004088 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         16270  0x00003f8e (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  12527  0x000030efrKeyboardRoutines                  12527  0x000030ef (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_120\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 15)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         16418  0x00004022 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           16501  0x00004075 (User func) args[1] r=0  (usage 15)
seroutOcs                          16468  0x00004054 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           4  0x00000004 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          7  0x00000007 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          9  0x00000009 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          9  0x00000009 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          9  0x00000009 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          9  0x00000009 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         19  0x00000013 (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     3072  0x00000c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         37  0x00000025 (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         37  0x00000025 (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         22  0x00000016 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                          4  0x00000004 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         37  0x00000025 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          4  0x00000004 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                          4  0x00000004 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                          4  0x00000004 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings34Count                         1  0x00000001 (const dword)  (not used)
Strings34Size                          4  0x00000004 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                          4  0x00000004 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings36Count                         1  0x00000001 (const dword)  (not used)
Strings36Size                          4  0x00000004 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings37Count                         1  0x00000001 (const dword)  (not used)
Strings37Size                          4  0x00000004 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings38Count                         1  0x00000001 (const dword)  (not used)
Strings38Size                          4  0x00000004 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         16  0x00000010 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings41Count                         0  0x00000000 (const dword)  (not used)
Strings41Size                          1  0x00000001 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings42Count                         0  0x00000000 (const dword)  (not used)
Strings42Size                          1  0x00000001 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                           4  0x00000004 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      8704  0x00002200 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                           7  0x00000007 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           4  0x00000004 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     17920  0x00004600 (const dword)  (usage 3)
Strings7Count                          1  0x00000001 (const dword)  (not used)
Strings7Size                          37  0x00000025 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                           4  0x00000004 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                            102  0x00000066 (mem) word[50] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           280  0x00000118 (mem) word (global)  (usage 24)
TouchXpos                            274  0x00000112 (mem) word (global)  (usage 12)
TouchYpos                            276  0x00000114 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     15840  0x00003de0 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 636)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      14888  0x00003a28 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 9)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        15977  0x00003e69 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
