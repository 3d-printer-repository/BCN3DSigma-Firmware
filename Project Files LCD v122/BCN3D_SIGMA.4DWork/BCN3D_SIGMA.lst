file C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003  // generated 23/12/2016 10:26:56
005194  000004        
005195  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005196  000006  #inherit "4DGL_16bitColours.fnc"
005197  000006  #inherit "4DGL_16bitColours.fnc"
005198  000004  */
005199  000005        
005200  000006        
005201  000007        
005202  000008  #CONST
005203  000149  #END
005204  000150        
005205  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005206  000008  #inherit "VisualConst.inc"
005207  000008  #inherit "VisualConst.inc"
005208  000001  // Line Patterns
005209  000002  #constant  LPCOARSE    0xF0F0
005210  000002  #constant  LPCOARSE    0xF0F0
005211  000003  #constant  LPMEDIUM    0x3333
005212  000003  #constant  LPMEDIUM    0x3333
005213  000004  #constant  LPFINE      0xAAAA
005214  000004  #constant  LPFINE      0xAAAA
005215  000005  #constant  LPDASHDOT   0x03CF
005216  000005  #constant  LPDASHDOT   0x03CF
005217  000006  #constant  LPDASHDOTDOT 0x0333
005218  000006  #constant  LPDASHDOTDOT 0x0333
005219  000007  #constant  LPSOLID     0x0000
005220  000007  #constant  LPSOLID     0x0000
005221  000009        
005222  000010        
file C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMAConst.inc

005223  000011  #inherit "BCN3D_SIGMAConst.inc"
005224  000011  #inherit "BCN3D_SIGMAConst.inc"
005225  000001  // File generated 23/12/2016 10:26:26
005226  000002  // Warning! This is a generated file, any manual changes will be
005227  000003  // lost during the next generation.
005228  000004        
005229  000005  #constant  Strings3Count    0
005230  000005  #constant  Strings3Count    0
005231  000006  #constant  Strings3Size     1
005232  000006  #constant  Strings3Size     1
005233  000007  #constant  Strings1Count    0
005234  000007  #constant  Strings1Count    0
005235  000008  #constant  Strings1Size     1
005236  000008  #constant  Strings1Size     1
005237  000009  #constant  Strings7Count    1
005238  000009  #constant  Strings7Count    1
005239  000010  #constant  Strings7Size     37
005240  000010  #constant  Strings7Size     37
005241  000011  #constant  Strings8Count    0
005242  000011  #constant  Strings8Count    0
005243  000012  #constant  Strings8Size     1
005244  000012  #constant  Strings8Size     1
005245  000013  #constant  Strings12Count    0
005246  000013  #constant  Strings12Count    0
005247  000014  #constant  Strings12Size     1
005248  000014  #constant  Strings12Size     1
005249  000015  #constant  Strings23Count    0
005250  000015  #constant  Strings23Count    0
005251  000016  #constant  Strings23Size     1
005252  000016  #constant  Strings23Size     1
005253  000017  #constant  Strings24Count    1
005254  000017  #constant  Strings24Count    1
005255  000018  #constant  Strings24Size     19
005256  000018  #constant  Strings24Size     19
005257  000019  #constant  Strings25Count    1
005258  000019  #constant  Strings25Count    1
005259  000020  #constant  Strings25Size     37
005260  000020  #constant  Strings25Size     37
005261  000021  #constant  Strings26Count    1
005262  000021  #constant  Strings26Count    1
005263  000022  #constant  Strings26Size     37
005264  000022  #constant  Strings26Size     37
005265  000023  #constant  Strings16Count    0
005266  000023  #constant  Strings16Count    0
005267  000024  #constant  Strings16Size     1
005268  000024  #constant  Strings16Size     1
005269  000025  #constant  Strings30Count    1
005270  000025  #constant  Strings30Count    1
005271  000026  #constant  Strings30Size     37
005272  000026  #constant  Strings30Size     37
005273  000027  #constant  Strings2Count    1
005274  000027  #constant  Strings2Count    1
005275  000028  #constant  Strings2Size     4
005276  000028  #constant  Strings2Size     4
005277  000029  #constant  Strings0Count    1
005278  000029  #constant  Strings0Count    1
005279  000030  #constant  Strings0Size     4
005280  000030  #constant  Strings0Size     4
005281  000031  #constant  Strings9Count    1
005282  000031  #constant  Strings9Count    1
005283  000032  #constant  Strings9Size     4
005284  000032  #constant  Strings9Size     4
005285  000033  #constant  Strings34Count    1
005286  000033  #constant  Strings34Count    1
005287  000034  #constant  Strings34Size     4
005288  000034  #constant  Strings34Size     4
005289  000035  #constant  Strings36Count    1
005290  000035  #constant  Strings36Count    1
005291  000036  #constant  Strings36Size     4
005292  000036  #constant  Strings36Size     4
005293  000037  #constant  Strings37Count    1
005294  000037  #constant  Strings37Count    1
005295  000038  #constant  Strings37Size     4
005296  000038  #constant  Strings37Size     4
005297  000039  #constant  Strings4Count    1
005298  000039  #constant  Strings4Count    1
005299  000040  #constant  Strings4Size     4
005300  000040  #constant  Strings4Size     4
005301  000041  #constant  Strings40Count    1
005302  000041  #constant  Strings40Count    1
005303  000042  #constant  Strings40Size     16
005304  000042  #constant  Strings40Size     16
005305  000043  #constant  Strings41Count    0
005306  000043  #constant  Strings41Count    0
005307  000044  #constant  Strings41Size     1
005308  000044  #constant  Strings41Size     1
005309  000045  #constant  Strings42Count    0
005310  000045  #constant  Strings42Count    0
005311  000046  #constant  Strings42Size     1
005312  000046  #constant  Strings42Size     1
005313  000047  #constant  Strings5Count    1
005314  000047  #constant  Strings5Count    1
005315  000048  #constant  Strings5Size     7
005316  000048  #constant  Strings5Size     7
005317  000049  #constant  Strings10Count    1
005318  000049  #constant  Strings10Count    1
005319  000050  #constant  Strings10Size     7
005320  000050  #constant  Strings10Size     7
005321  000051  #constant  Strings17Count    1
005322  000051  #constant  Strings17Count    1
005323  000052  #constant  Strings17Size     7
005324  000052  #constant  Strings17Size     7
005325  000053  #constant  Strings13Count    1
005326  000053  #constant  Strings13Count    1
005327  000054  #constant  Strings13Size     7
005328  000054  #constant  Strings13Size     7
005329  000055  #constant  Strings14Count    1
005330  000055  #constant  Strings14Count    1
005331  000056  #constant  Strings14Size     7
005332  000056  #constant  Strings14Size     7
005333  000057  #constant  Strings15Count    1
005334  000057  #constant  Strings15Count    1
005335  000058  #constant  Strings15Size     7
005336  000058  #constant  Strings15Size     7
005337  000059  #constant  Strings18Count    1
005338  000059  #constant  Strings18Count    1
005339  000060  #constant  Strings18Size     7
005340  000060  #constant  Strings18Size     7
005341  000061  #constant  Strings19Count    1
005342  000061  #constant  Strings19Count    1
005343  000062  #constant  Strings19Size     9
005344  000062  #constant  Strings19Size     9
005345  000063  #constant  Strings20Count    1
005346  000063  #constant  Strings20Count    1
005347  000064  #constant  Strings20Size     9
005348  000064  #constant  Strings20Size     9
005349  000065  #constant  Strings21Count    1
005350  000065  #constant  Strings21Count    1
005351  000066  #constant  Strings21Size     9
005352  000066  #constant  Strings21Size     9
005353  000067  #constant  Strings22Count    1
005354  000067  #constant  Strings22Count    1
005355  000068  #constant  Strings22Size     9
005356  000068  #constant  Strings22Size     9
005357  000069  #constant  Strings27Count    0
005358  000069  #constant  Strings27Count    0
005359  000070  #constant  Strings27Size     1
005360  000070  #constant  Strings27Size     1
005361  000071  #constant  Strings28Count    1
005362  000071  #constant  Strings28Count    1
005363  000072  #constant  Strings28Size     22
005364  000072  #constant  Strings28Size     22
005365  000073  #constant  Strings46Count    0
005366  000073  #constant  Strings46Count    0
005367  000074  #constant  Strings46Size     1
005368  000074  #constant  Strings46Size     1
005369  000075  #constant  Strings6Count    1
005370  000075  #constant  Strings6Count    1
005371  000076  #constant  Strings6Size     4
005372  000076  #constant  Strings6Size     4
005373  000077  #constant  Strings29Count    1
005374  000077  #constant  Strings29Count    1
005375  000078  #constant  Strings29Size     4
005376  000078  #constant  Strings29Size     4
005377  000079  #constant  Strings31Count    1
005378  000079  #constant  Strings31Count    1
005379  000080  #constant  Strings31Size     4
005380  000080  #constant  Strings31Size     4
005381  000081  #constant  Strings32Count    1
005382  000081  #constant  Strings32Count    1
005383  000082  #constant  Strings32Size     4
005384  000082  #constant  Strings32Size     4
005385  000083  #constant  Strings33Count    1
005386  000083  #constant  Strings33Count    1
005387  000084  #constant  Strings33Size     4
005388  000084  #constant  Strings33Size     4
005389  000085  #constant  Strings35Count    1
005390  000085  #constant  Strings35Count    1
005391  000086  #constant  Strings35Size     4
005392  000086  #constant  Strings35Size     4
005393  000087  #constant  Strings38Count    1
005394  000087  #constant  Strings38Count    1
005395  000088  #constant  Strings38Size     4
005396  000088  #constant  Strings38Size     4
005397  000089  #constant  Strings47Count    0
005398  000089  #constant  Strings47Count    0
005399  000090  #constant  Strings47Size     1
005400  000090  #constant  Strings47Size     1
005401  000091  #constant  Strings43Count    0
005402  000091  #constant  Strings43Count    0
005403  000092  #constant  Strings43Size     1
005404  000092  #constant  Strings43Size     1
005405  000093  #constant  Strings11Count    1
005406  000093  #constant  Strings11Count    1
005407  000094  #constant  Strings11Size     7
005408  000094  #constant  Strings11Size     7
005409  000095  #constant  Strings45Count    0
005410  000095  #constant  Strings45Count    0
005411  000096  #constant  Strings45Size     1
005412  000096  #constant  Strings45Size     1
005413  000097  #constant  Strings48Count    0
005414  000097  #constant  Strings48Count    0
005415  000098  #constant  Strings48Size     1
005416  000098  #constant  Strings48Size     1
005417  000099  #constant  Strings39Count    0
005418  000099  #constant  Strings39Count    0
005419  000100  #constant  Strings39Size     1
005420  000100  #constant  Strings39Size     1
005421  000101  #constant  Strings44Count    0
005422  000101  #constant  Strings44Count    0
005423  000102  #constant  Strings44Size     1
005424  000102  #constant  Strings44Size     1
005425  000103  #constant  Strings49Count    1
005426  000103  #constant  Strings49Count    1
005427  000104  #constant  Strings49Size     12
005428  000104  #constant  Strings49Size     12
005429  000105  #constant  Strings50Count    0
005430  000105  #constant  Strings50Count    0
005431  000106  #constant  Strings50Size     1
005432  000106  #constant  Strings50Size     1
005433  000107  // object indexes into ImageControl
005434  000108  #CONST
005435  000428  #END
005436  000429        
005437  000430  #constant  Strings3StartH   0x0
005438  000430  #constant  Strings3StartH   0x0
005439  000431  #constant  Strings3StartL   0x0
005440  000431  #constant  Strings3StartL   0x0
005441  000432  #constant  Strings1StartH   0x0
005442  000432  #constant  Strings1StartH   0x0
005443  000433  #constant  Strings1StartL   0x200
005444  000433  #constant  Strings1StartL   0x200
005445  000434  #constant  Strings7StartH   0x0
005446  000434  #constant  Strings7StartH   0x0
005447  000435  #constant  Strings7StartL   0x400
005448  000435  #constant  Strings7StartL   0x400
005449  000436  #constant  Strings8StartH   0x0
005450  000436  #constant  Strings8StartH   0x0
005451  000437  #constant  Strings8StartL   0x600
005452  000437  #constant  Strings8StartL   0x600
005453  000438  #constant  Strings12StartH   0x0
005454  000438  #constant  Strings12StartH   0x0
005455  000439  #constant  Strings12StartL   0x800
005456  000439  #constant  Strings12StartL   0x800
005457  000440  #constant  Strings23StartH   0x0
005458  000440  #constant  Strings23StartH   0x0
005459  000441  #constant  Strings23StartL   0xA00
005460  000441  #constant  Strings23StartL   0xA00
005461  000442  #constant  Strings24StartH   0x0
005462  000442  #constant  Strings24StartH   0x0
005463  000443  #constant  Strings24StartL   0xC00
005464  000443  #constant  Strings24StartL   0xC00
005465  000444  #constant  Strings25StartH   0x0
005466  000444  #constant  Strings25StartH   0x0
005467  000445  #constant  Strings25StartL   0xE00
005468  000445  #constant  Strings25StartL   0xE00
005469  000446  #constant  Strings26StartH   0x0
005470  000446  #constant  Strings26StartH   0x0
005471  000447  #constant  Strings26StartL   0x1000
005472  000447  #constant  Strings26StartL   0x1000
005473  000448  #constant  Strings16StartH   0x0
005474  000448  #constant  Strings16StartH   0x0
005475  000449  #constant  Strings16StartL   0x1200
005476  000449  #constant  Strings16StartL   0x1200
005477  000450  #constant  Strings30StartH   0x0
005478  000450  #constant  Strings30StartH   0x0
005479  000451  #constant  Strings30StartL   0x1400
005480  000451  #constant  Strings30StartL   0x1400
005481  000452  #constant  Strings2StartH   0x0
005482  000452  #constant  Strings2StartH   0x0
005483  000453  #constant  Strings2StartL   0x1600
005484  000453  #constant  Strings2StartL   0x1600
005485  000454  #constant  Strings0StartH   0x0
005486  000454  #constant  Strings0StartH   0x0
005487  000455  #constant  Strings0StartL   0x1800
005488  000455  #constant  Strings0StartL   0x1800
005489  000456  #constant  Strings9StartH   0x0
005490  000456  #constant  Strings9StartH   0x0
005491  000457  #constant  Strings9StartL   0x1A00
005492  000457  #constant  Strings9StartL   0x1A00
005493  000458  #constant  Strings34StartH   0x0
005494  000458  #constant  Strings34StartH   0x0
005495  000459  #constant  Strings34StartL   0x1C00
005496  000459  #constant  Strings34StartL   0x1C00
005497  000460  #constant  Strings36StartH   0x0
005498  000460  #constant  Strings36StartH   0x0
005499  000461  #constant  Strings36StartL   0x1E00
005500  000461  #constant  Strings36StartL   0x1E00
005501  000462  #constant  Strings37StartH   0x0
005502  000462  #constant  Strings37StartH   0x0
005503  000463  #constant  Strings37StartL   0x2000
005504  000463  #constant  Strings37StartL   0x2000
005505  000464  #constant  Strings4StartH   0x0
005506  000464  #constant  Strings4StartH   0x0
005507  000465  #constant  Strings4StartL   0x2200
005508  000465  #constant  Strings4StartL   0x2200
005509  000466  #constant  Strings40StartH   0x0
005510  000466  #constant  Strings40StartH   0x0
005511  000467  #constant  Strings40StartL   0x2400
005512  000467  #constant  Strings40StartL   0x2400
005513  000468  #constant  Strings41StartH   0x0
005514  000468  #constant  Strings41StartH   0x0
005515  000469  #constant  Strings41StartL   0x2600
005516  000469  #constant  Strings41StartL   0x2600
005517  000470  #constant  Strings42StartH   0x0
005518  000470  #constant  Strings42StartH   0x0
005519  000471  #constant  Strings42StartL   0x2800
005520  000471  #constant  Strings42StartL   0x2800
005521  000472  #constant  Strings5StartH   0x0
005522  000472  #constant  Strings5StartH   0x0
005523  000473  #constant  Strings5StartL   0x2A00
005524  000473  #constant  Strings5StartL   0x2A00
005525  000474  #constant  Strings10StartH   0x0
005526  000474  #constant  Strings10StartH   0x0
005527  000475  #constant  Strings10StartL   0x2C00
005528  000475  #constant  Strings10StartL   0x2C00
005529  000476  #constant  Strings17StartH   0x0
005530  000476  #constant  Strings17StartH   0x0
005531  000477  #constant  Strings17StartL   0x2E00
005532  000477  #constant  Strings17StartL   0x2E00
005533  000478  #constant  Strings13StartH   0x0
005534  000478  #constant  Strings13StartH   0x0
005535  000479  #constant  Strings13StartL   0x3000
005536  000479  #constant  Strings13StartL   0x3000
005537  000480  #constant  Strings14StartH   0x0
005538  000480  #constant  Strings14StartH   0x0
005539  000481  #constant  Strings14StartL   0x3200
005540  000481  #constant  Strings14StartL   0x3200
005541  000482  #constant  Strings15StartH   0x0
005542  000482  #constant  Strings15StartH   0x0
005543  000483  #constant  Strings15StartL   0x3400
005544  000483  #constant  Strings15StartL   0x3400
005545  000484  #constant  Strings18StartH   0x0
005546  000484  #constant  Strings18StartH   0x0
005547  000485  #constant  Strings18StartL   0x3600
005548  000485  #constant  Strings18StartL   0x3600
005549  000486  #constant  Strings19StartH   0x0
005550  000486  #constant  Strings19StartH   0x0
005551  000487  #constant  Strings19StartL   0x3800
005552  000487  #constant  Strings19StartL   0x3800
005553  000488  #constant  Strings20StartH   0x0
005554  000488  #constant  Strings20StartH   0x0
005555  000489  #constant  Strings20StartL   0x3A00
005556  000489  #constant  Strings20StartL   0x3A00
005557  000490  #constant  Strings21StartH   0x0
005558  000490  #constant  Strings21StartH   0x0
005559  000491  #constant  Strings21StartL   0x3C00
005560  000491  #constant  Strings21StartL   0x3C00
005561  000492  #constant  Strings22StartH   0x0
005562  000492  #constant  Strings22StartH   0x0
005563  000493  #constant  Strings22StartL   0x3E00
005564  000493  #constant  Strings22StartL   0x3E00
005565  000494  #constant  Strings27StartH   0x0
005566  000494  #constant  Strings27StartH   0x0
005567  000495  #constant  Strings27StartL   0x4000
005568  000495  #constant  Strings27StartL   0x4000
005569  000496  #constant  Strings28StartH   0x0
005570  000496  #constant  Strings28StartH   0x0
005571  000497  #constant  Strings28StartL   0x4200
005572  000497  #constant  Strings28StartL   0x4200
005573  000498  #constant  Strings46StartH   0x0
005574  000498  #constant  Strings46StartH   0x0
005575  000499  #constant  Strings46StartL   0x4400
005576  000499  #constant  Strings46StartL   0x4400
005577  000500  #constant  Strings6StartH   0x0
005578  000500  #constant  Strings6StartH   0x0
005579  000501  #constant  Strings6StartL   0x4600
005580  000501  #constant  Strings6StartL   0x4600
005581  000502  #constant  Strings29StartH   0x0
005582  000502  #constant  Strings29StartH   0x0
005583  000503  #constant  Strings29StartL   0x4800
005584  000503  #constant  Strings29StartL   0x4800
005585  000504  #constant  Strings31StartH   0x0
005586  000504  #constant  Strings31StartH   0x0
005587  000505  #constant  Strings31StartL   0x4A00
005588  000505  #constant  Strings31StartL   0x4A00
005589  000506  #constant  Strings32StartH   0x0
005590  000506  #constant  Strings32StartH   0x0
005591  000507  #constant  Strings32StartL   0x4C00
005592  000507  #constant  Strings32StartL   0x4C00
005593  000508  #constant  Strings33StartH   0x0
005594  000508  #constant  Strings33StartH   0x0
005595  000509  #constant  Strings33StartL   0x4E00
005596  000509  #constant  Strings33StartL   0x4E00
005597  000510  #constant  Strings35StartH   0x0
005598  000510  #constant  Strings35StartH   0x0
005599  000511  #constant  Strings35StartL   0x5000
005600  000511  #constant  Strings35StartL   0x5000
005601  000512  #constant  Strings38StartH   0x0
005602  000512  #constant  Strings38StartH   0x0
005603  000513  #constant  Strings38StartL   0x5200
005604  000513  #constant  Strings38StartL   0x5200
005605  000514  #constant  Strings47StartH   0x0
005606  000514  #constant  Strings47StartH   0x0
005607  000515  #constant  Strings47StartL   0x5400
005608  000515  #constant  Strings47StartL   0x5400
005609  000516  #constant  Strings43StartH   0x0
005610  000516  #constant  Strings43StartH   0x0
005611  000517  #constant  Strings43StartL   0x5600
005612  000517  #constant  Strings43StartL   0x5600
005613  000518  #constant  Strings11StartH   0x0
005614  000518  #constant  Strings11StartH   0x0
005615  000519  #constant  Strings11StartL   0x5800
005616  000519  #constant  Strings11StartL   0x5800
005617  000520  #constant  Strings45StartH   0x0
005618  000520  #constant  Strings45StartH   0x0
005619  000521  #constant  Strings45StartL   0x5A00
005620  000521  #constant  Strings45StartL   0x5A00
005621  000522  #constant  Strings48StartH   0x0
005622  000522  #constant  Strings48StartH   0x0
005623  000523  #constant  Strings48StartL   0x5C00
005624  000523  #constant  Strings48StartL   0x5C00
005625  000524  #constant  Strings39StartH   0x0
005626  000524  #constant  Strings39StartH   0x0
005627  000525  #constant  Strings39StartL   0x5E00
005628  000525  #constant  Strings39StartL   0x5E00
005629  000526  #constant  Strings44StartH   0x0
005630  000526  #constant  Strings44StartH   0x0
005631  000527  #constant  Strings44StartL   0x6000
005632  000527  #constant  Strings44StartL   0x6000
005633  000528  #constant  Strings49StartH   0x0
005634  000528  #constant  Strings49StartH   0x0
005635  000529  #constant  Strings49StartL   0x6200
005636  000529  #constant  Strings49StartL   0x6200
005637  000530  #constant  Strings50StartH   0x0
005638  000530  #constant  Strings50StartH   0x0
005639  000531  #constant  Strings50StartL   0x6400
005640  000531  #constant  Strings50StartL   0x6400
005641  000532  #IFNOT EXISTS NOGLOBALS
005642  000533  var hndl ;
005643  000534  #ENDIF
005644  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005645  000013  #inherit "CLPrintStrings.inc"
005646  000013  #inherit "CLPrintStrings.inc"
005647  000001  func PrintStrings(var ID, var *msgid, var String)
005648  000002      var StringID, i, ch, offs32[2], res32[2];
005649  000003      StringID := oStringss[1+ID] ;
005650  000004      if (String)
005651  000005          stringsCV[ID] := -1 ;
005652  000006      else
005653  000007          stringsCV[ID] := msgid ;
005654  000008      endif
005655  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005656  000010      txt_FontID(hFonts[ID]) ;
005657  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005658  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005659  000013        
005660  000014      if (*(StringID + Ofs_String_Transparent))
005661  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005662  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005663  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005664  000018      else
005665  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005666  000020          gfx_Clipping(ON) ;
005667  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005668  000022          gfx_Clipping(OFF) ;
005669  000023        
005670  000024      endif
005671  000025        
005672  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005673  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005674  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005675  000029        
005676  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005677  000031        
005678  000032      if (String)
005679  000033          i := 0 ;
005680  000034          ch := msgid[i++] ;
005681  000035          while (ch != 0)
005682  000036              putch(ch) ;
005683  000037              ch := msgid[i++] ;
005684  000038          wend
005685  000039      else
005686  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005687  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005688  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005689  000043          uadd_3232(res32,res32,offs32) ;
005690  000044          file_Seek(hstrings, res32[1], res32[0]);
005691  000045          repeat
005692  000046              if (*(StringID + Ofs_String_Ansi))
005693  000047                  ch := file_GetC(hstrings) ;
005694  000048              else
005695  000049                  ch := file_GetW(hstrings) ;
005696  000050              endif
005697  000051              putch(ch) ;
005698  000052          until (ch == 0) ;
005699  000053      endif
005700  000054        
005701  000055  endfunc
005702  000056        
005703  000014        
005704  000015  #constant IPDatasize 22
005705  000015  #constant IPDatasize 22
005706  000016        
005707  000017  #CONST
005708  000021  #END
005709  000022        
005710  000023  #CONST
005711  000130  #END
005712  000131        
005713  000670  #END
5714  32F8
5715  32F9
5716  32FA
5717  32FB
5718  32FC
5719  32FD
5720  32FE
5721  32FF
5722  3300
5723  3301
5724  3302
5725  3303
5726  3304
5727  3305
5728  3306
5729  3307
5730  3308
5731  3309
5732  330A
5733  330B
5734  330C
5735  330D
5736  330E
5737  330F
5738  3310
5739  3311
5740  3312
5741  3313
5742  3314
5743  3315
5744  3316
5745  3317
5746  3318
5747  3319
5748  331A
5749  331B
5750  331C
5751  331D
5752  331E
5753  331F
5754  3320
5755  3321
5756  3322
5757  3323
5758  3324
5759  3325
5760  3326
5761  3327
5762  3328
5763  3329
5764  332A
5765  332B
5766  332C
5767  332D
5768  332E
5769  332F
5770  3330
5771  3331
5772  3332
5773  3333
5774  3334
5775  3335
5776  3336
5777  3337
5778  3338
5779  3339
5780  333A
5781  333B
5782  333C
5783  333D
5784  333E
5785  333F
5786  3340
5787  3341
5788  3342
5789  3343
5790  3344
5791  3345
5792  3346
5793  3347
5794  3348
5795  3349
5796  334A
5797  334B
5798  334C
5799  334D
5800  334E
5801  334F
5802  3350
5803  3351
5804  3352
5805  3353
5806  3354
5807  3355
5808  3356
5809  3357
5810  3358
5811  3359
5812  335A
5813  335B
5814  335C
5815  335D
5816  335E
5817  335F
5818  3360
5819  3361
5820  3362
5821  3363
5822  3364
5823  3365
5824  3366
5825  3367
5826  3368
5827  3369
5828  336A
5829  336B
5830  336C
5831  336D
5832  336E
5833  336F
5834  3370
5835  3371
5836  3372
5837  3373
5838  3374
5839  3375
5840  3376
5841  3377
5842  3378
5843  3379
5844  337A
5845  337B
5846  337C
5847  337D
5848  337E
5849  337F
5850  3380
5851  3381
5852  3382
5853  3383
5854  3384
5855  3385
5856  3386
5857  3387
5858  3388
5859  3389
5860  338A
5861  338B
5862  338C
5863  338D
5864  338E
5865  338F
5866  3390
5867  3391
5868  3392
5869  3393
5870  3394
5871  3395
5872  3396
5873  3397
5874  3398
5875  3399
5876  339A
5877  339B
5878  339C
5879  339D
5880  339E
5881  339F
5882  33A0
5883  33A1
5884  33A2
5885  33A3
5886  33A4
5887  33A5
5888  33A6
5889  33A7
5890  33A8
5891  33A9
5892  33AA
5893  33AB
5894  33AC
5895  33AD
5896  33AE
5897  33AF
5898  33B0
5899  33B1
5900  33B2
5901  33B3
5902  33B4
5903  33B5
5904  33B6
5905  33B7
5906  33B8
5907  33B9
5908  33BA
5909  33BB
5910  33BC
5911  33BD
5912  33BE
5913  33BF
5914  33C0
5915  33C1
5916  33C2
5917  33C3
5918  33C4
5919  33C5
5920  33C6
5921  33C7
5922  33C8
5923  33C9
5924  33CA
5925  33CB
5926  33CC
5927  33CD
5928  33CE
5929  33CF
5930  33D0
5931  33D1
5932  33D2
5933  33D3
5934  33D4
5935  33D5
5936  33D6
5937  33D7
5938  33D8
5939  33D9
5940  33DA
5941  33DB
5942  33DC
5943  33DD
5944  33DE
5945  33DF
5946  33E0
5947  33E1
5948  33E2
5949  33E3
5950  33E4
5951  33E5
5952  33E6
5953  33E7
5954  33E8
5955  33E9
5956  33EA
5957  33EB
5958  33EC
5959  33ED
5960  33EE
5961  33EF
5962  33F0
5963  33F1
5964  33F2
5965  33F3
5966  33F4
5967  33F5
5968  33F6
5969  33F7
5970  33F8
5971  33F9
5972  33FA
5973  33FB
5974  33FC
5975  33FD
5976  33FE
5977  33FF
5978  3400
5979  3401
5980  3402
5981  3403
5982  3404
5983  3405
5984  3406
5985  3407
5986  3408
5987  3409
5988  340A
5989  340B
5990  340C
5991  340D
5992  340E
5993  340F
5994  3410
5995  3411
5996  3412
5997  3413
5998  3414
5999  3415
6000  3416
6001  3417
6002  3418
6003  3419
6004  341A
6005  341B
6006  341C
6007  341D
6008  341E
6009  341F
6010  3420
6011  3421
6012  3422
6013  3423
6014  3424
6015  3425
6016  3426
6017  3427
6018  3428
6019  3429
6020  342A
6021  342B
6022  342C
6023  342D
6024  342E
6025  342F
6026  3430
6027  3431
6028  3432
6029  3433
6030  3434
6031  3435
6032  3436
6033  3437
6034  3438
6035  3439
6036  343A
6037  343B
6038  343C
6039  343D
6040  343E
6041  343F
6042  3440
6043  3441
6044  3442
6045  3443
6046  3444
6047  3445
6048  3446
6049  3447
6050  3448
6051  3449
6052  344A
6053  344B
6054  344C
6055  344D
6056  344E
6057  344F
6058  3450
6059  3451
6060  3452
6061  3453
6062  3454
6063  3455
6064  3456
6065  3457
6066  3458
6067  3459
6068  345A
6069  345B
6070  345C
6071  345D
6072  345E
6073  345F
6074  3460
6075  3461
6076  3462
6077  3463
6078  3464
6079  3465
6080  3466
6081  3467
6082  3468
6083  3469
6084  346A
6085  346B
6086  346C
6087  346D
6088  346E
6089  346F
6090  3470
6091  3471
6092  3472
6093  3473
6094  3474
6095  3475
6096  3476
6097  3477
6098  3478
6099  3479
6100  347A
6101  347B
6102  347C
6103  347D
6104  347E
6105  347F
6106  3480
6107  3481
6108  3482
6109  3483
6110  3484
6111  3485
6112  3486
6113  3487
6114  3488
6115  3489
6116  348A
6117  348B
6118  348C
6119  348D
6120  348E
6121  348F
6122  3490
6123  3491
6124  3492
6125  3493
6126  3494
6127  3495
6128  3496
6129  3497
6130  3498
6131  3499
6132  349A
6133  349B
6134  349C
6135  349D
6136  349E
6137  349F
6138  34A0
6139  34A1
6140  34A2
6141  34A3
6142  34A4
6143  34A5
6144  34A6
6145  34A7
6146  34A8
6147  34A9
6148  34AA
6149  34AB
6150  34AC
6151  34AD
6152  34AE
6153  34AF
6154  34B0
6155  34B1
6156  34B2
6157  34B3
6158  34B4
6159  34B5
6160  34B6
6161  34B7
6162  34B8
6163  34B9
6164  34BA
6165  34BB
6166  34BC
6167  34BD
6168  34BE
6169  34BF
6170  34C0
6171  34C1
6172  34C2
6173  34C3
6174  34C4
6175  34C5
6176  34C6
6177  34C7
6178  34C8
6179  34C9
6180  34CA
6181  34CB
6182  34CC
6183  34CD
6184  34CE
6185  34CF
6186  34D0
6187  34D1
6188  34D2
6189  34D3
6190  34D4
6191  34D5
6192  34D6
6193  34D7
6194  34D8
6195  34D9
6196  34DA
6197  34DB
6198  34DC
6199  34DD
6200  34DE
6201  34DF
6202  34E0
6203  34E1
6204  34E2
6205  34E3
6206  34E4
6207  34E5
6208  34E6
6209  34E7
6210  34E8
6211  34E9
6212  34EA
6213  34EB
6214  34EC
6215  34ED
6216  34EE
6217  34EF
6218  34F0
6219  34F1
6220  34F2
6221  34F3
6222  34F4
6223  34F5
6224  34F6
6225  34F7
6226  34F8
6227  34F9
6228  34FA
6229  34FB
6230  34FC
6231  34FD
6232  34FE
6233  34FF
6234  3500
6235  3501
6236  3502
6237  3503
6238  3504
6239  3505
6240  3506
6241  3507
6242  3508
6243  3509
6244  350A
6245  350B
6246  350C
6247  350D
6248  350E
6249  350F
6250  3510
6251  3511
6252  3512
6253  3513
6254  3514
6255  3515
6256  3516
6257  3517
6258  3518
6259  3519
6260  351A
6261  351B
6262  351C
6263  351D
6264  351E
6265  351F
6266  3520
6267  3521
6268  3522
6269  3523
6270  3524
6271  3525
6272  3526
6273  3527
6274  3528
6275  3529
6276  352A
6277  352B
6278  352C
6279  352D
6280  352E
6281  352F
6282  3530
6283  3531
6284  3532
6285  3533
6286  3534
6287  3535
6288  3536
6289  3537
6290  3538
6291  3539
6292  353A
6293  353B
6294  353C
6295  353D
6296  353E
6297  353F
6298  3540
6299  3541
6300  3542
6301  3543
6302  3544
6303  3545
6304  3546
6305  3547
6306  3548
6307  3549
6308  354A
6309  354B
6310  354C
6311  354D
6312  354E
6313  354F
6314  3550
6315  3551
6316  3552
6317  3553
6318  3554
6319  3555
6320  3556
6321  3557
6322  3558
6323  3559
6324  355A
6325  355B
6326  355C
6327  355D
6328  355E
6329  355F
6330  3560
6331  3561
6332  3562
6333  3563
6334  3564
6335  3565
6336  3566
6337  3567
6338  3568
6339  3569
6340  356A
6341  356B
6342  356C
6343  356D
6344  356E
6345  356F
6346  3570
6347  3571
6348  3572
6349  3573
6350  3574
6351  3575
6352  3576
6353  3577
6354  3578
6355  3579
6356  357A
6357  357B
6358  357C
6359  357D
6360  357E
6361  357F
6362  3580
6363  3581
6364  3582
6365  3583
6366  3584
6367  3585
6368  3586
6369  3587
6370  3588
6371  3589
6372  358A
6373  358B
6374  358C
6375  358D
6376  358E
6377  358F
6378  3590
6379  3591
6380  3592
6381  3593
6382  3594
6383  3595
6384  3596
6385  3597
6386  3598
6387  3599
6388  359A
6389  359B
6390  359C
6391  359D
6392  359E
6393  359F
6394  35A0
6395  35A1
6396  35A2
6397  35A3
6398  35A4
6399  35A5
6400  35A6
6401  35A7
6402  35A8
6403  35A9
6404  35AA
6405  35AB
6406  35AC
6407  35AD
6408  35AE
6409  35AF
6410  35B0
6411  35B1
6412  35B2
6413  35B3
6414  35B4
6415  35B5
6416  35B6
6417  35B7
6418  35B8
6419  35B9
6420  35BA
6421  35BB
6422  35BC
6423  35BD
6424  35BE
6425  35BF
6426  35C0
6427  35C1
6428  35C2
6429  35C3
6430  35C4
6431  35C5
6432  35C6
6433  35C7
6434  35C8
6435  35C9
6436  35CA
6437  35CB
6438  35CC
6439  35CD
6440  35CE
6441  35CF
6442  35D0
6443  35D1
6444  35D2
6445  35D3
6446  35D4
6447  35D5
6448  35D6
6449  35D7
6450  35D8
6451  35D9
6452  35DA
6453  35DB
6454  35DC
6455  35DD
6456  35DE
6457  35DF
6458  35E0
6459  35E1
6460  35E2
6461  35E3
6462  35E4
6463  35E5
6464  35E6
6465  35E7
6466  35E8
6467  35E9
6468  35EA
6469  35EB
6470  35EC
6471  35ED
6472  35EE
6473  35EF
6474  35F0
6475  35F1
6476  35F2
6477  35F3
6478  35F4
6479  35F5
6480  35F6
6481  35F7
6482  35F8
6483  35F9
6484  35FA
6485  35FB
6486  35FC
6487  35FD
6488  35FE
6489  35FF
6490  3600
6491  3601
6492  3602
6493  3603
6494  3604
6495  3605
6496  3606
6497  3607
6498  3608
6499  3609
6500  360A
6501  360B
6502  360C
6503  360D
6504  360E
6505  360F
6506  3610
6507  3611
6508  3612
6509  3613
6510  3614
6511  3615
6512  3616
6513  3617
6514  3618
6515  3619
6516  361A
6517  361B
6518  361C
6519  361D
6520  361E
6521  361F
6522  3620
6523  3621
6524  3622
6525  3623
6526  3624
6527  3625
6528  3626
6529  3627
6530  3628
6531  3629
6532  362A
6533  362B
6534  362C
6535  362D
6536  362E
6537  362F
6538  3630
6539  3631
6540  3632
6541  3633
6542  3634
6543  3635
6544  3636
6545  3637
6546  3638
6547  3639
6548  363A
6549  363B
6550  363C
6551  363D
6552  363E
6553  363F
6554  3640
6555  3641
6556  3642
6557  3643
6558  3644
6559  3645
6560  3646
6561  3647
6562  3648
6563  3649
6564  364A
6565  364B
6566  364C
6567  364D
6568  364E
6569  364F
6570  3650
6571  3651
6572  3652
6573  3653
6574  3654
6575  3655
6576  3656
6577  3657
6578  3658
6579  3659
6580  365A
6581  365B
6582  365C
6583  365D
6584  365E
6585  365F
6586  3660
6587  3661
6588  3662
6589  3663
6590  3664
6591  3665
6592  3666
6593  3667
6594  3668
6595  3669
6596  366A
6597  366B
6598  366C
6599  366D
6600  366E
6601  366F
6602  3670
6603  3671
6604  3672
6605  3673
6606  3674
6607  3675
6608  3676
6609  3677
6610  3678
6611  3679
6612  367A
6613  367B
6614  367C
6615  367D
6616  367E
6617  367F
6618  3680
6619  3681
6620  3682
6621  3683
6622  3684
6623  3685
6624  3686
6625  3687
6626  3688
6627  3689
6628  368A
6629  368B
6630  368C
6631  368D
6632  368E
6633  368F
6634  3690
6635  3691
6636  3692
6637  3693
6638  3694
6639  3695
6640  3696
6641  3697
6642  3698
6643  3699
6644  369A
6645  369B
6646  369C
6647  369D
6648  369E
6649  369F
6650  36A0
6651  36A1
6652  36A2
6653  36A3
6654  36A4
6655  36A5
6656  36A6
6657  36A7
6658  36A8
6659  36A9
6660  36AA
6661  36AB
6662  36AC
6663  36AD
6664  36AE
6665  36AF
6666  36B0
6667  36B1
6668  36B2
6669  36B3
6670  36B4
6671  36B5
6672  36B6
6673  36B7
6674  36B8
6675  36B9
6676  36BA
6677  36BB
6678  36BC
6679  36BD
6680  36BE
6681  36BF
6682  36C0
6683  36C1
6684  36C2
6685  36C3
6686  36C4
6687  36C5
6688  36C6
6689  36C7
6690  36C8
6691  36C9
6692  36CA
6693  36CB
6694  36CC
6695  36CD
6696  36CE
6697  36CF
6698  36D0
6699  36D1
6700  36D2
6701  36D3
6702  36D4
6703  36D5
6704  36D6
6705  36D7
6706  36D8
6707  36D9
6708  36DA
6709  36DB
6710  36DC
6711  36DD
6712  36DE
6713  36DF
6714  36E0
6715  36E1
6716  36E2
6717  36E3
6718  36E4
6719  36E5
6720  36E6
6721  36E7
6722  36E8
6723  36E9
6724  36EA
6725  36EB
6726  36EC
6727  36ED
6728  36EE
6729  36EF
6730  36F0
6731  36F1
6732  36F2
6733  36F3
6734  36F4
6735  36F5
6736  36F6
6737  36F7
6738  36F8
6739  36F9
6740  36FA
6741  36FB
6742  36FC
6743  36FD
6744  36FE
6745  36FF
6746  3700
6747  3701
6748  3702
6749  3703
6750  3704
6751  3705
6752  3706
6753  3707
6754  3708
6755  3709
6756  370A
6757  370B
6758  370C
6759  370D
6760  370E
6761  370F
6762  3710
6763  3711
6764  3712
6765  3713
6766  3714
6767  3715
6768  3716
6769  3717
6770  3718
6771  3719
6772  371A
6773  371B
6774  371C
6775  371D
6776  371E
6777  371F
6778  3720
6779  3721
6780  3722
6781  3723
6782  3724
6783  3725
6784  3726
6785  3727
6786  3728
6787  3729
6788  372A
6789  372B
6790  372C
6791  372D
6792  372E
6793  372F
6794  3730
6795  3731
6796  3732
6797  3733
6798  3734
6799  3735
6800  3736
6801  3737
6802  3738
6803  3739
6804  373A
6805  373B
6806  373C
6807  373D
6808  373E
6809  373F
6810  3740
6811  3741
6812  3742
6813  3743
6814  3744
6815  3745
6816  3746
6817  3747
6818  3748
6819  3749
6820  374A
6821  374B
6822  374C
6823  374D
6824  374E
6825  374F
6826  3750
6827  3751
6828  3752
6829  3753
6830  3754
6831  3755
6832  3756
6833  3757
6834  3758
6835  3759
6836  375A
6837  375B
6838  375C
6839  375D
6840  375E
6841  375F
6842  3760
6843  3761
6844  3762
6845  3763
6846  3764
6847  3765
6848  3766
6849  3767
6850  3768
6851  3769
6852  376A
6853  376B
6854  376C
6855  376D
6856  376E
6857  376F
6858  3770
6859  3771
6860  3772
6861  3773
6862  3774
6863  3775
6864  3776
6865  3777
6866  3778
6867  3779
6868  377A
6869  377B
6870  377C
6871  377D
6872  377E
6873  377F
6874  3780
6875  3781
6876  3782
6877  3783
6878  3784
6879  3785
6880  3786
6881  3787
6882  3788
6883  3789
6884  378A
6885  378B
6886  378C
6887  378D
6888  378E
6889  378F
6890  3790
6891  3791
6892  3792
6893  3793
6894  3794
6895  3795
6896  3796
6897  3797
6898  3798
6899  3799
6900  379A
6901  379B
6902  379C
6903  379D
6904  379E
6905  379F
6906  37A0
6907  37A1
6908  37A2
6909  37A3
6910  37A4
6911  37A5
6912  37A6
6913  37A7
6914  37A8
6915  37A9
6916  37AA
6917  37AB
6918  37AC
6919  37AD
6920  37AE
6921  37AF
6922  37B0
6923  37B1
6924  37B2
6925  37B3
6926  37B4
6927  37B5
6928  37B6
6929  37B7
6930  37B8
6931  37B9
6932  37BA
6933  37BB
6934  37BC
6935  37BD
6936  37BE
6937  37BF
6938  37C0
6939  37C1
6940  37C2
6941  37C3
6942  37C4
6943  37C5
6944  37C6
6945  37C7
6946  37C8
6947  37C9
6948  37CA
6949  37CB
6950  37CC
6951  37CD
6952  37CE
6953  37CF
6954  37D0
6955  37D1
6956  37D2
6957  37D3
6958  37D4
6959  37D5
6960  37D6
6961  37D7
6962  37D8
6963  37D9
6964  37DA
6965  37DB
6966  37DC
6967  37DD
6968  37DE
6969  37DF
6970  37E0
6971  37E1
6972  37E2
6973  37E3
6974  37E4
6975  37E5
6976  37E6
6977  37E7
6978  37E8
6979  37E9
6980  37EA
6981  37EB
6982  37EC
6983  37ED
6984  37EE
6985  37EF
6986  37F0
6987  37F1
6988  37F2
6989  37F3
6990  37F4
6991  37F5
6992  37F6
6993  37F7
6994  37F8
6995  37F9
6996  37FA
6997  37FB
6998  37FC
6999  37FD
7000  37FE
7001  37FF
7002  3800
7003  3801
7004  3802
7005  3803
7006  3804
7007  3805
7008  3806
7009  3807
7010  3808
7011  3809
7012  380A
7013  380B
7014  380C
7015  380D
7016  380E
7017  380F
7018  3810
7019  3811
7020  3812
7021  3813
7022  3814
7023  3815
7024  3816
7025  3817
7026  3818
7027  3819
7028  381A
7029  381B
7030  381C
7031  381D
7032  381E
7033  381F
7034  3820
7035  3821
7036  3822
7037  3823
7038  3824
7039  3825
7040  3826
7041  3827
7042  3828
7043  3829
7044  382A
7045  382B
7046  382C
7047  382D
7048  382E
7049  382F
7050  3830
7051  3831
7052  3832
7053  3833
7054  3834
7055  3835
7056  3836
7057  3837
7058  3838
7059  3839
7060  383A
7061  383B
7062  383C
7063  383D
7064  383E
7065  383F
7066  3840
7067  3841
7068  3842
7069  3843
7070  3844
7071  3845
7072  3846
7073  3847
7074  3848
7075  3849
7076  384A
7077  384B
7078  384C
7079  384D
7080  384E
7081  384F
7082  3850
7083  3851
7084  3852
7085  3853
7086  3854
7087  3855
7088  3856
7089  3857
7090  3858
7091  3859
7092  385A
7093  385B
7094  385C
7095  385D
7096  385E
7097  385F
7098  3860
7099  3861
7100  3862
7101  3863
7102  3864
7103  3865
7104  3866
7105  3867
7106  3868
7107  3869
7108  386A
7109  386B
7110  386C
7111  386D
7112  386E
7113  386F
7114  3870
7115  3871
7116  3872
7117  3873
7118  3874
7119  3875
7120  3876
7121  3877
7122  3878
7123  3879
7124  387A
7125  387B
7126  387C
7127  387D
7128  387E
7129  387F
7130  3880
7131  3881
7132  3882
7133  3883
7134  3884
7135  3885
7136  3886
7137  3887
7138  3888
7139  3889
7140  388A
7141  388B
7142  388C
7143  388D
7144  388E
7145  388F
7146  3890
7147  3891
7148  3892
7149  3893
7150  3894
7151  3895
7152  3896
7153  3897
7154  3898
7155  3899
7156  389A
7157  389B
7158  389C
7159  389D
7160  389E
7161  389F
7162  38A0
7163  38A1
7164  38A2
7165  38A3
7166  38A4
7167  38A5
7168  38A6
7169  38A7
7170  38A8
7171  38A9
7172  38AA
7173  38AB
7174  38AC
7175  38AD
7176  38AE
7177  38AF
7178  38B0
7179  38B1
7180  38B2
7181  38B3
7182  38B4
7183  38B5
7184  38B6
7185  38B7
7186  38B8
7187  38B9
7188  38BA
7189  38BB
7190  38BC
7191  38BD
7192  38BE
7193  38BF
7194  38C0
7195  38C1
7196  38C2
7197  38C3
7198  38C4
7199  38C5
7200  38C6
7201  38C7
7202  38C8
7203  38C9
7204  38CA
7205  38CB
7206  38CC
7207  38CD
7208  38CE
7209  38CF
7210  38D0
7211  38D1
7212  38D2
7213  38D3
7214  38D4
7215  38D5
7216  38D6
7217  38D7
7218  38D8
7219  38D9
7220  38DA
7221  38DB
7222  38DC
7223  38DD
7224  38DE
7225  38DF
7226  38E0
7227  38E1
7228  38E2
7229  38E3
7230  38E4
7231  38E5
7232  38E6
7233  38E7
7234  38E8
7235  38E9
7236  38EA
7237  38EB
7238  38EC
7239  38ED
7240  38EE
7241  38EF
7242  38F0
7243  38F1
7244  38F2
7245  38F3
7246  38F4
7247  38F5
7248  38F6
7249  38F7
7250  38F8
7251  38F9
7252  38FA
7253  38FB
7254  38FC
7255  38FD
7256  38FE
7257  38FF
7258  3900
7259  3901
7260  3902
7261  3903
7262  3904
7263  3905
7264  3906
7265  3907
7266  3908
7267  3909
7268  390A
7269  390B
7270  390C
7271  390D
7272  390E
7273  390F
7274  3910
7275  3911
7276  3912
7277  3913
7278  3914
7279  3915
7280  3916
7281  3917
7282  3918
7283  3919
7284  391A
7285  391B
7286  391C
7287  391D
7288  391E
7289  391F
7290  3920
7291  3921
7292  3922
7293  3923
7294  3924
7295  3925
7296  3926
7297  3927
7298  3928
7299  3929
7300  392A
7301  392B
7302  392C
7303  392D
7304  392E
7305  392F
7306  3930
7307  3931
7308  3932
7309  3933
7310  3934
7311  3935
7312  3936
7313  3937
7314  3938
7315  3939
7316  393A
7317  393B
7318  393C
7319  393D
7320  393E
7321  393F
7322  3940
7323  3941
7324  3942
7325  3943
7326  3944
7327  3945
7328  3946
7329  3947
7330  3948
7331  3949
7332  394A
7333  394B
7334  394C
7335  394D
7336  394E
7337  394F
7338  3950
7339  3951
7340  3952
7341  3953
7342  3954
7343  3955
7344  3956
7345  3957
7346  3958
7347  3959
7348  395A
7349  395B
7350  395C
7351  395D
7352  395E
7353  395F
7354  3960
7355  3961
7356  3962
7357  3963
7358  3964
7359  3965
7360  3966
7361  3967
7362  3968
7363  3969
7364  396A
7365  396B
7366  396C
7367  396D
7368  396E
7369  396F
7370  3970
7371  3971
7372  3972
7373  3973
7374  3974
7375  3975
7376  3976
7377  3977
7378  3978
7379  3979
7380  397A
7381  397B
7382  397C
7383  397D
7384  397E
7385  397F
7386  3980
7387  3981
7388  3982
7389  3983
7390  3984
7391  3985
7392  3986
7393  3987
7394  3988
7395  3989
7396  398A
7397  398B
7398  398C
7399  398D
7400  398E
7401  398F
7402  3990
7403  3991
7404  3992
7405  3993
7406  3994
7407  3995
7408  3996
7409  3997
7410  3998
7411  3999
7412  399A
7413  399B
7414  399C
7415  399D
7416  399E
7417  399F
7418  39A0
7419  39A1
7420  39A2
7421  39A3
7422  39A4
7423  39A5
7424  39A6
7425  39A7
7426  39A8
7427  39A9
7428  39AA
7429  39AB
7430  39AC
7431  39AD
7432  39AE
7433  39AF
7434  39B0
7435  39B1
7436  39B2
7437  39B3
7438  39B4
7439  39B5
7440  39B6
7441  39B7
7442  39B8
7443  39B9
7444  39BA
7445  39BB
7446  39BC
7447  39BD
7448  39BE
7449  39BF
7450  39C0
7451  39C1
7452  39C2
7453  39C3
7454  39C4
7455  39C5
7456  39C6
7457  39C7
7458  39C8
7459  39C9
7460  39CA
7461  39CB
7462  39CC
7463  39CD
7464  39CE
7465  39CF
7466  39D0
7467  39D1
7468  39D2
7469  39D3
7470  39D4
7471  39D5
7472  39D6
7473  39D7
7474  39D8
7475  39D9
7476  39DA
7477  39DB
7478  39DC
7479  39DD
7480  39DE
7481  39DF
7482  39E0
7483  39E1
7484  39E2
7485  39E3
7486  39E4
7487  39E5
7488  39E6
7489  39E7
7490  39E8
7491  39E9
7492  39EA
7493  39EB
7494  39EC
7495  39ED
7496  39EE
7497  39EF
7498  39F0
7499  39F1
7500  39F2
7501  39F3
7502  39F4
7503  39F5
7504  39F6
7505  39F7
7506  39F8
7507  39F9
7508  39FA
7509  39FB
7510  39FC
7511  39FD
7512  39FE
7513  39FF
7514  3A00
7515  3A01
7516  3A02
7517  3A03
7518  3A04
7519  3A05
7520  3A06
7521  3A07
7522  3A08
7523  3A09
7524  3A0A
7525  3A0B
7526  3A0C
7527  3A0D
7528  3A0E
7529  3A0F
7530  3A10
7531  3A11
7532  3A12
7533  3A13
7534  3A14
7535  3A15
7536  3A16
7537  3A17
7538  3A18
7539  3A19
7540  3A1A
7541  3A1B
7542  3A1C
7543  3A1D
7544  3A1E
7545  3A1F
7546  3A20
7547  3A21
7548  3A22
7549  3A23
7550  3A24
7551  3A25
7552  3A26
7553  3A27
7554  3A28
7555  3A29
7556  3A2A
7557  3A2B
7558  3A2C
7559  3A2D
7560  3A2E
7561  3A2F
7562  3A30
7563  3A31
7564  3A32
7565  3A33
7566  3A34
7567  3A35
7568  3A36
7569  3A37
7570  3A38
7571  3A39
7572  3A3A
7573  3A3B
7574  3A3C
7575  3A3D
7576  3A3E
7577  3A3F
7578  3A40
7579  3A41
7580  3A42
7581  3A43
7582  3A44
7583  3A45
7584  3A46
7585  3A47
7586  3A48
7587  3A49
7588  3A4A
7589  3A4B
7590  3A4C
7591  3A4D
7592  3A4E
7593  3A4F
7594  3A50
7595  3A51
7596  3A52
7597  3A53
7598  3A54
7599  3A55
7600  3A56
7601  3A57
7602  3A58
7603  3A59
7604  3A5A
7605  3A5B
7606  3A5C
7607  3A5D
7608  3A5E
7609  3A5F
7610  3A60
7611  3A61
7612  3A62
7613  3A63
7614  3A64
7615  3A65
7616  3A66
7617  3A67
7618  3A68
7619  3A69
7620  3A6A
7621  3A6B
7622  3A6C
7623  3A6D
7624  3A6E
7625  3A6F
7626  3A70
7627  3A71
7628  3A72
7629  3A73
7630  3A74
7631  3A75
7632  3A76
7633  3A77
7634  3A78
7635  3A79
7636  3A7A
7637  3A7B
7638  3A7C
7639  3A7D
7640  3A7E
7641  3A7F
7642  3A80
7643  3A81
7644  3A82
7645  3A83
7646  3A84
7647  3A85
7648  3A86
7649  3A87
7650  3A88
7651  3A89
7652  3A8A
7653  3A8B
7654  3A8C
7655  3A8D
7656  3A8E
7657  3A8F
7658  3A90
7659  3A91
7660  3A92
7661  3A93
7662  3A94
7663  3A95
7664  3A96
7665  3A97
7666  3A98
7667  3A99
7668  3A9A
7669  3A9B
7670  3A9C
7671  3A9D
7672  3A9E
7673  3A9F
7674  3AA0
7675  3AA1
7676  3AA2
7677  3AA3
7678  3AA4
7679  3AA5
7680  3AA6
7681  3AA7
7682  3AA8
7683  3AA9
7684  3AAA
7685  3AAB
7686  3AAC
7687  3AAD
7688  3AAE
7689  3AAF
7690  3AB0
7691  3AB1
7692  3AB2
7693  3AB3
7694  3AB4
7695  3AB5
7696  3AB6
7697  3AB7
7698  3AB8
7699  3AB9
7700  3ABA
7701  3ABB
7702  3ABC
7703  3ABD
7704  3ABE
7705  3ABF
7706  3AC0
7707  3AC1
7708  3AC2
7709  3AC3
7710  3AC4
7711  3AC5
7712  3AC6
7713  3AC7
7714  3AC8
7715  3AC9
7716  3ACA
7717  3ACB
7718  3ACC
7719  3ACD
7720  3ACE
7721  3ACF
7722  3AD0
7723  3AD1
7724  3AD2
7725  3AD3
7726  3AD4
7727  3AD5
7728  3AD6
7729  3AD7
7730  3AD8
7731  3AD9
7732  3ADA
7733  3ADB
7734  3ADC
7735  3ADD
7736  3ADE
7737  3ADF
7738  3AE0
7739  3AE1
7740  3AE2
7741  3AE3
7742  3AE4
7743  3AE5
7744  3AE6
7745  3AE7
7746  3AE8
7747  3AE9
7748  3AEA
7749  3AEB
7750  3AEC
7751  3AED
7752  3AEE
7753  3AEF
7754  3AF0
7755  3AF1
7756  3AF2
7757  3AF3
7758  3AF4
7759  3AF5
7760  3AF6
7761  3AF7
7762  3AF8
7763  3AF9
7764  3AFA
7765  3AFB
7766  3AFC
7767  3AFD
7768  3AFE
7769  3AFF
7770  3B00
7771  3B01
7772  3B02
7773  3B03
7774  3B04
7775  3B05
7776  3B06
7777  3B07
7778  3B08
7779  3B09
7780  3B0A
7781  3B0B
7782  3B0C
7783  3B0D
7784  3B0E
7785  3B0F
7786  3B10
7787  3B11
7788  3B12
7789  3B13
7790  3B14
7791  3B15
7792  3B16
7793  3B17
7794  3B18
7795  3B19
7796  3B1A
7797  3B1B
7798  3B1C
7799  3B1D
7800  3B1E
7801  3B1F
7802  3B20
7803  3B21
7804  3B22
7805  3B23
7806  3B24
7807  3B25
7808  3B26
7809  3B27
7810  3B28
7811  3B29
7812  3B2A
7813  3B2B
7814  3B2C
7815  3B2D
7816  3B2E
7817  3B2F
7818  3B30
7819  3B31
7820  3B32
7821  3B33
7822  3B34
7823  3B35
7824  3B36
7825  3B37
7826  3B38
7827  3B39
7828  3B3A
7829  3B3B
7830  3B3C
7831  3B3D
7832  3B3E
7833  3B3F
7834  3B40
7835  3B41
7836  3B42
7837  3B43
7838  3B44
7839  3B45
7840  3B46
7841  3B47
7842  3B48
7843  3B49
7844  3B4A
7845  3B4B
7846  3B4C
7847  3B4D
7848  3B4E
7849  3B4F
7850  3B50
7851  3B51
7852  3B52
7853  3B53
7854  3B54
7855  3B55
7856  3B56
7857  3B57
7858  3B58
7859  3B59
7860  3B5A
7861  3B5B
7862  3B5C
7863  3B5D
7864  3B5E
7865  3B5F
7866  3B60
7867  3B61
7868  3B62
7869  3B63
7870  3B64
7871  3B65
7872  3B66
7873  3B67
7874  3B68
7875  3B69
7876  3B6A
7877  3B6B
7878  3B6C
7879  3B6D
7880  3B6E
7881  3B6F
7882  3B70
7883  3B71
7884  3B72
7885  3B73
7886  3B74
7887  3B75
7888  3B76
7889  3B77
7890  3B78
7891  3B79
7892  3B7A
7893  3B7B
7894  3B7C
7895  3B7D
7896  3B7E
7897  3B7F
7898  3B80
7899  3B81
7900  3B82
7901  3B83
7902  3B84
7903  3B85
7904  3B86
7905  3B87
7906  3B88
7907  3B89
7908  3B8A
7909  3B8B
7910  3B8C
7911  3B8D
7912  3B8E
7913  3B8F
7914  3B90
7915  3B91
7916  3B92
7917  3B93
7918  3B94
7919  3B95
7920  3B96
7921  3B97
7922  3B98
7923  3B99
7924  3B9A
7925  3B9B
7926  3B9C
7927  3B9D
7928  3B9E
7929  3B9F
7930  3BA0
7931  3BA1
7932  3BA2
7933  3BA3
7934  3BA4
7935  3BA5
7936  3BA6
7937  3BA7
7938  3BA8
7939  3BA9
7940  3BAA
7941  3BAB
7942  3BAC
7943  3BAD
7944  3BAE
7945  3BAF
7946  3BB0
7947  3BB1
7948  3BB2
7949  3BB3
7950  3BB4
7951  3BB5
7952  3BB6
7953  3BB7
7954  3BB8
7955  3BB9
7956  3BBA
7957  3BBB
7958  3BBC
7959  3BBD
7960  3BBE
7961  3BBF
7962  3BC0
7963  3BC1
7964  3BC2
7965  3BC3
7966  3BC4
7967  3BC5
7968  3BC6
7969  3BC7
7970  3BC8
7971  3BC9
7972  3BCA
7973  3BCB
7974  3BCC
7975  3BCD
7976  3BCE
7977  3BCF
7978  3BD0
7979  3BD1
7980  3BD2
7981  3BD3
7982  3BD4
7983  3BD5
7984  3BD6
7985  3BD7
7986  3BD8
7987  3BD9
7988  3BDA
7989  3BDB
7990  3BDC
7991  3BDD
7992  3BDE
7993  3BDF
7994  3BE0
7995  3BE1
7996  3BE2
7997  3BE3
7998  3BE4
7999  3BE5
8000  3BE6
8001  3BE7
8002  3BE8
8003  3BE9
8004  3BEA
8005  3BEB
8006  3BEC
8007  3BED
8008  3BEE
8009  3BEF
8010  3BF0
8011  3BF1
8012  3BF2
8013  3BF3
8014  3BF4
8015  3BF5
8016  3BF6
8017  3BF7
8018  3BF8
8019  3BF9
8020  3BFA
8021  3BFB
8022  3BFC
8023  3BFD
8024  3BFE
8025  3BFF
8026  3C00
8027  3C01
8028  3C02
8029  3C03
8030  3C04
8031  3C05
8032  3C06
8033  3C07
8034  3C08
8035  3C09
8036  3C0A
8037  3C0B
8038  3C0C
8039  3C0D
8040  3C0E
8041  3C0F
8042  3C10
8043  3C11
8044  3C12
8045  3C13
8046  3C14
8047  3C15
8048  3C16
8049  3C17
8050  3C18
8051  3C19
8052  3C1A
8053  3C1B
8054  3C1C
8055  3C1D
8056  3C1E
8057  3C1F
8058  3C20
8059  3C21
8060  3C22
8061  3C23
8062  3C24
8063  3C25
8064  3C26
8065  3C27
8066  3C28
8067  3C29
8068  3C2A
8069  3C2B
8070  3C2C
8071  3C2D
8072  3C2E
8073  3C2F
8074  3C30
8075  3C31
8076  3C32
8077  3C33
8078  3C34
8079  3C35
8080  3C36
8081  3C37
8082  3C38
8083  3C39
8084  3C3A
8085  3C3B
8086  3C3C
8087  3C3D
8088  3C3E
8089  3C3F
8090  3C40
8091  3C41
8092  3C42
8093  3C43
8094  3C44
8095  3C45
8096  3C46
8097  3C47
8098  3C48
8099  3C49
8100  3C4A
8101  3C4B
8102  3C4C
8103  3C4D
8104  3C4E
8105  3C4F
8106  3C50
8107  3C51
8108  3C52
8109  3C53
8110  3C54
8111  3C55
8112  3C56
8113  3C57
8114  3C58
8115  3C59
8116  3C5A
8117  3C5B
8118  3C5C
8119  3C5D
8120  3C5E
8121  3C5F
8122  3C60
8123  3C61
8124  3C62
8125  3C63
8126  3C64
8127  3C65
8128  3C66
8129  3C67
8130  3C68
8131  3C69
8132  3C6A
8133  3C6B
8134  3C6C
8135  3C6D
8136  3C6E
8137  3C6F
8138  3C70
8139  3C71
8140  3C72
8141  3C73
8142  3C74
8143  3C75
8144  3C76
8145  3C77
8146  3C78
8147  3C79
8148  3C7A
8149  3C7B
8150  3C7C
8151  3C7D
8152  3C7E
8153  3C7F
8154  3C80
8155  3C81
8156  3C82
8157  3C83
8158  3C84
8159  3C85
8160  3C86
8161  3C87
8162  3C88
8163  3C89
8164  3C8A
8165  3C8B
8166  3C8C
8167  3C8D
8168  3C8E
8169  3C8F
8170  3C90
8171  3C91
8172  3C92
8173  3C93
8174  3C94
8175  3C95
8176  3C96
8177  3C97
8178  3C98
8179  3C99
8180  3C9A
8181  3C9B
8182  3C9C
8183  3C9D
8184  3C9E
8185  3C9F
8186  3CA0
8187  3CA1
8188  3CA2
8189  3CA3
8190  3CA4
8191  3CA5
8192  3CA6
8193  3CA7
8194  3CA8
8195  3CA9
8196  3CAA
8197  3CAB
8198  3CAC
8199  3CAD
8200  3CAE
8201  3CAF
8202  3CB0
8203  3CB1
8204  3CB2
8205  3CB3
8206  3CB4
8207  3CB5
8208  3CB6
8209  3CB7
8210  3CB8
8211  3CB9
8212  3CBA
8213  3CBB
8214  3CBC
8215  3CBD
8216  3CBE
8217  3CBF
8218  3CC0
8219  3CC1
8220  3CC2
8221  3CC3
8222  3CC4
8223  3CC5
8224  3CC6
8225  3CC7
8226  3CC8
8227  3CC9
8228  3CCA
8229  3CCB
8230  3CCC
8231  3CCD
8232  3CCE
8233  3CCF
8234  3CD0
8235  3CD1
8236  3CD2
8237  3CD3
8238  3CD4
8239  3CD5
8240  3CD6
8241  3CD7
8242  3CD8
8243  3CD9
8244  3CDA
8245  3CDB
8246  3CDC
8247  3CDD
8248  3CDE
8249  3CDF
8250  3CE0
8251  3CE1
8252  3CE2
8253  3CE3
8254  3CE4
8255  3CE5
8256  3CE6
8257  3CE7
8258  3CE8
8259  3CE9
8260  3CEA
8261  3CEB
8262  3CEC
8263  3CED
8264  3CEE
8265  3CEF
8266  3CF0
8267  3CF1
8268  3CF2
8269  3CF3
8270  3CF4
8271  3CF5
8272  3CF6
8273  3CF7
8274  3CF8
8275  3CF9
8276  3CFA
8277  3CFB
8278  3CFC
8279  3CFD
8280  3CFE
8281  3CFF
8282  3D00
8283  3D01
8284  3D02
8285  3D03
8286  3D04
8287  3D05
8288  3D06
8289  3D07
8290  3D08
8291  3D09
8292  3D0A
8293  3D0B
8294  3D0C
8295  3D0D
8296  3D0E
8297  3D0F
8298  3D10
8299  3D11
8300  3D12
8301  3D13
8302  3D14
8303  3D15
8304  3D16
8305  3D17
8306  3D18
8307  3D19
8308  3D1A
8309  3D1B
8310  3D1C
8311  3D1D
8312  3D1E
8313  3D1F
8314  3D20
8315  3D21
8316  3D22
8317  3D23
8318  3D24
8319  3D25
8320  3D26
8321  3D27
8322  3D28
8323  3D29
8324  3D2A
8325  3D2B
8326  3D2C
8327  3D2D
8328  3D2E
8329  3D2F
8330  3D30
8331  3D31
8332  3D32
8333  3D33
8334  3D34
8335  3D35
8336  3D36
8337  3D37
8338  3D38
8339  3D39
8340  3D3A
8341  3D3B
8342  3D3C
8343  3D3D
8344  3D3E
8345  3D3F
8346  3D40
8347  3D41
8348  3D42
8349  3D43
8350  3D44
8351  3D45
8352  3D46
8353  3D47
8354  3D48
8355  3D49
8356  3D4A
8357  3D4B
8358  3D4C
8359  3D4D
8360  3D4E
8361  3D4F
8362  3D50
8363  3D51
8364  3D52
8365  3D53
8366  3D54
8367  3D55
8368  3D56
8369  3D57
8370  3D58
8371  3D59
8372  3D5A
8373  3D5B
8374  3D5C
8375  3D5D
8376  3D5E
8377  3D5F
8378  3D60
8379  3D61
8380  3D62
8381  3D63
8382  3D64
8383  3D65
8384  3D66
8385  3D67
8386  3D68
8387  3D69
8388  3D6A
8389  3D6B
8390  3D6C
8391  3D6D
8392  3D6E
8393  3D6F
8394  3D70
8395  3D71
8396  3D72
8397  3D73
8398  3D74
8399  3D75
8400  3D76
8401  3D77
8402  3D78
8403  3D79
8404  3D7A
8405  3D7B
8406  3D7C
8407  3D7D
8408  3D7E
8409  3D7F
8410  3D80
8411  3D81
8412  3D82
8413  3D83
8414  3D84
8415  3D85
8416  3D86
8417  3D87
8418  3D88
8419  3D89
8420  3D8A
8421  3D8B
8422  3D8C
8423  3D8D
8424  3D8E
8425  3D8F
8426  3D90
8427  3D91
8428  3D92
8429  3D93
8430  3D94
8431  3D95
8432  3D96
8433  3D97
8434  3D98
8435  3D99
8436  3D9A
8437  3D9B
8438  3D9C
8439  3D9D
8440  3D9E
8441  3D9F
8442  3DA0
8443  3DA1
8444  3DA2
8445  3DA3
8446  3DA4
8447  3DA5
8448  3DA6
8449  3DA7
8450  3DA8
8451  3DA9
8452  3DAA
8453  3DAB
8454  3DAC
8455  3DAD
8456  3DAE
8457  3DAF
8458  3DB0
8459  3DB1
8460  3DB2
8461  3DB3
8462  3DB4
8463  3DB5
8464  3DB6
8465  3DB7
8466  3DB8
8467  3DB9
8468  3DBA
8469  3DBB
8470  3DBC
8471  3DBD
8472  3DBE
8473  3DBF
8474  3DC0
8475  3DC1
8476  3DC2
8477  3DC3
8478  3DC4
8479  3DC5
8480  3DC6
8481  3DC7
8482  3DC8
8483  3DC9
8484  3DCA
8485  3DCB
8486  3DCC
8487  3DCD
8488  3DCE
8489  3DCF
8490  3DD0
8491  3DD1
8492  3DD2
8493  3DD3
8494  3DD4
8495  3DD5
8496  3DD6
8497  3DD7
8498  3DD8
8499  3DD9
8500  3DDA
8501  3DDB
8502  3DDC
8503  3DDD
8504  3DDE
8505  3DDF
8506  3DE0
8507  3DE1
8508  3DE2
8509  3DE3
8510  3DE4
8511  3DE5
8512  3DE6
8513  3DE7
8514  3DE8
8515  3DE9
8516  3DEA
8517  3DEB
8518  3DEC
8519  3DED
8520  3DEE
8521  3DEF
8522  3DF0
8523  3DF1
8524  3DF2
8525  3DF3
8526  3DF4
8527  3DF5
8528  3DF6
8529  3DF7
8530  3DF8
8531  3DF9
8532  3DFA
8533  3DFB
8534  3DFC
8535  3DFD
8536  3DFE
8537  3DFF
8538  3E00
8539  3E01
8540  3E02
8541  3E03
8542  3E04
8543  3E05
8544  3E06
8545  3E07
8546  3E08
8547  3E09
8548  3E0A
8549  3E0B
8550  3E0C
8551  3E0D
8552  3E0E
8553  3E0F
8554  3E10
8555  3E11
8556  3E12
8557  3E13
8558  3E14
8559  3E15
8560  3E16
8561  3E17
8562  3E18
8563  3E19
8564  3E1A
8565  3E1B
8566  3E1C
8567  3E1D
8568  3E1E
8569  3E1F
8570  3E20
8571  3E21
8572  3E22
8573  3E23
8574  3E24
8575  3E25
8576  3E26
8577  3E27
8578  3E28
8579  3E29
8580  3E2A
8581  3E2B
8582  3E2C
8583  3E2D
8584  3E2E
8585  3E2F
8586  3E30
8587  3E31
8588  3E32
8589  3E33
8590  3E34
8591  3E35
8592  3E36
8593  3E37
8594  3E38
8595  3E39
8596  3E3A
8597  3E3B
8598  3E3C
8599  3E3D
8600  3E3E
8601  3E3F
8602  3E40
8603  3E41
8604  3E42
8605  3E43
8606  3E44
8607  3E45
8608  3E46
8609  3E47
8610  3E48
8611  3E49
8612  3E4A
8613  3E4B
8614  3E4C
8615  3E4D
8616  3E4E
8617  3E4F
8618  3E50
8619  3E51
8620  3E52
8621  3E53
8622  3E54
8623  3E55
8624  3E56
8625  3E57
8626  3E58
8627  3E59
8628  3E5A
8629  3E5B
8630  3E5C
8631  3E5D
8632  3E5E
8633  3E5F
8634  3E60
8635  3E61
8636  3E62
8637  3E63
8638  3E64
8639  3E65
8640  3E66
8641  3E67
8642  3E68
8643  3E69
8644  3E6A
8645  3E6B
8646  3E6C
8647  3E6D
8648  3E6E
8649  3E6F
8650  3E70
8651  3E71
8652  3E72
8653  3E73
8654  3E74
8655  3E75
8656  3E76
8657  3E77
8658  3E78
8659  3E79
8660  3E7A
8661  3E7B
8662  3E7C
8663  3E7D
8664  3E7E
8665  3E7F
8666  3E80
8667  3E81
8668  3E82
8669  3E83
8670  3E84
8671  3E85
8672  3E86
8673  3E87
8674  3E88
8675  3E89
8676  3E8A
8677  3E8B
8678  3E8C
8679  3E8D
8680  3E8E
8681  3E8F
8682  3E90
8683  3E91
8684  3E92
8685  3E93
8686  3E94
8687  3E95
8688  3E96
8689  3E97
8690  3E98
8691  3E99
8692  3E9A
8693  3E9B
8694  3E9C
8695  3E9D
8696  3E9E
8697  3E9F
8698  3EA0
8699  3EA1
8700  3EA2
8701  3EA3
8702  3EA4
8703  3EA5
8704  3EA6
8705  3EA7
8706  3EA8
8707  3EA9
8708  3EAA
8709  3EAB
8710  3EAC
8711  3EAD
8712  3EAE
8713  3EAF
8714  3EB0
8715  3EB1
8716  3EB2
8717  3EB3
8718  3EB4
8719  3EB5
8720  3EB6
8721  3EB7
8722  3EB8
8723  3EB9
8724  3EBA
8725  3EBB
8726  3EBC
8727  3EBD
8728  3EBE
8729  3EBF
8730  3EC0
8731  3EC1
8732  3EC2
8733  3EC3
8734  3EC4
8735  3EC5
8736  3EC6
8737  3EC7
8738  3EC8
8739  3EC9
8740  3ECA
8741  3ECB
8742  3ECC
8743  3ECD
8744  3ECE
8745  3ECF
8746  3ED0
8747  3ED1
8748  3ED2
8749  3ED3
8750  3ED4
8751  3ED5
8752  3ED6
8753  3ED7
8754  3ED8
8755  3ED9
8756  3EDA
8757  3EDB
8758  3EDC
8759  3EDD
8760  3EDE
8761  3EDF
8762  3EE0
8763  3EE1
8764  3EE2
8765  3EE3
8766  3EE4
8767  3EE5
8768  3EE6
8769  3EE7
8770  3EE8
8771  3EE9
8772  3EEA
8773  3EEB
8774  3EEC
8775  3EED
8776  3EEE
8777  3EEF
8778  3EF0
8779  3EF1
8780  3EF2
8781  3EF3
8782  3EF4
8783  3EF5
8784  3EF6
8785  3EF7
8786  3EF8
8787  3EF9
8788  3EFA
8789  3EFB
8790  3EFC
8791  3EFD
8792  3EFE
8793  3EFF
8794  3F00
8795  3F01
8796  3F02
8797  3F03
8798  3F04
8799  3F05
8800  3F06
8801  3F07
8802  3F08
8803  3F09
8804  3F0A
8805  3F0B
8806  3F0C
8807  3F0D
8808  3F0E
8809  3F0F
8810  3F10
8811  3F11
8812  3F12
8813  3F13
8814  3F14
8815  3F15
8816  3F16
8817  3F17
8818  3F18
8819  3F19
8820  3F1A
8821  3F1B
8822  3F1C
8823  3F1D
8824  3F1E
8825  3F1F
8826  3F20
8827  3F21
8828  3F22
8829  3F23
8830  3F24
8831  3F25
8832  3F26
8833  3F27
8834  3F28
8835  3F29
8836  3F2A
8837  3F2B
8838  3F2C
8839  3F2D
8840  3F2E
8841  3F2F
8842  3F30
8843  3F31
8844  3F32
8845  3F33
8846  3F34
8847  3F35
8848  3F36
8849  3F37
8850  3F38
8851  3F39
8852  3F3A
8853  3F3B
8854  3F3C
8855  3F3D
8856  3F3E
8857  3F3F
8858  3F40
8859  3F41
8860  3F42
8861  3F43
8862  3F44
8863  3F45
8864  3F46
8865  3F47
8866  3F48
8867  3F49
8868  3F4A
8869  3F4B
8870  3F4C
8871  3F4D
8872  3F4E
8873  3F4F
8874  3F50
8875  3F51
8876  3F52
8877  3F53
8878  3F54
8879  3F55
8880  3F56
8881  3F57
8882  3F58
8883  3F59
8884  3F5A
8885  3F5B
8886  3F5C
8887  3F5D
8888  3F5E
8889  3F5F
8890  3F60
8891  3F61
8892  3F62
8893  3F63
8894  3F64
8895  3F65
8896  3F66
8897  3F67
8898  3F68
8899  3F69
8900  3F6A
8901  3F6B
8902  3F6C
8903  3F6D
8904  3F6E
8905  3F6F
8906  3F70
8907  3F71
8908  3F72
8909  3F73
8910  3F74
8911  3F75
8912  3F76
8913  3F77
8914  3F78
8915  3F79
8916  3F7A
8917  3F7B
8918  3F7C
8919  3F7D
8920  3F7E
8921  3F7F
8922  3F80
8923  3F81
8924  3F82
8925  3F83
8926  3F84
8927  3F85
8928  3F86
8929  3F87
8930  3F88
8931  3F89
8932  3F8A
8933  3F8B
8934  3F8C
8935  3F8D
8936  3F8E
8937  3F8F
8938  3F90
8939  3F91
8940  3F92
8941  3F93
8942  3F94
8943  3F95
8944  3F96
8945  3F97
8946  3F98
8947  3F99
8948  3F9A
8949  3F9B
8950  3F9C
8951  3F9D
8952  3F9E
8953  3F9F
8954  3FA0
8955  3FA1
8956  3FA2
8957  3FA3
8958  3FA4
8959  3FA5
8960  3FA6
8961  3FA7
8962  3FA8
8963  3FA9
8964  3FAA
8965  3FAB
8966  3FAC
8967  3FAD
8968  3FAE
8969  3FAF
8970  3FB0
8971  3FB1
8972  3FB2
8973  3FB3
8974  3FB4
8975  3FB5
8976  3FB6
8977  3FB7
8978  3FB8
8979  3FB9
8980  3FBA
8981  3FBB
8982  3FBC
8983  3FBD
8984  3FBE
8985  3FBF
8986  3FC0
8987  3FC1
8988  3FC2
8989  3FC3
8990  3FC4
8991  3FC5
8992  3FC6
8993  3FC7
8994  3FC8
8995  3FC9
8996  3FCA
8997  3FCB
8998  3FCC
8999  3FCD
9000  3FCE
9001  3FCF
9002  3FD0
9003  3FD1
9004  3FD2
9005  3FD3
9006  3FD4
9007  3FD5
9008  3FD6
9009  3FD7
9010  3FD8
9011  3FD9
9012  3FDA
9013  3FDB
9014  3FDC
9015  3FDD
9016  3FDE
9017  3FDF
9018  3FE0
9019  3FE1
9020  3FE2
9021  3FE3
9022  3FE4
9023  3FE5
9024  3FE6
9025  3FE7
9026  3FE8
9027  3FE9
9028  3FEA
9029  3FEB
9030  3FEC
9031  3FED
9032  3FEE
9033  3FEF
9034  3FF0
9035  3FF1
9036  3FF2
9037  3FF3
9038  3FF4
9039  3FF5
9040  3FF6
9041  3FF7
9042  3FF8
9043  3FF9
9044  3FFA
9045  3FFB
9046  3FFC
9047  3FFD
9048  3FFE
9049  3FFF
9050  4000
9051  4001
9052  4002
9053  4003
9054  4004
9055  4005
9056  4006
9057  4007
9058  4008
9059  4009
9060  400A
9061  400B
9062  400C
9063  400D
9064  400E
9065  400F
9066  4010
9067  4011
9068  4012
9069  4013
9070  4014
9071  4015
9072  4016
9073  4017
9074  4018
9075  4019
9076  401A
9077  401B
9078  401C
9079  401D
9080  401E
9081  401F
9082  4020
9083  4021
9084  4022
9085  4023
9086  4024
9087  4025
9088  4026
9089  4027
9090  4028
9091  4029
9092  402A
9093  402B
9094  402C
9095  402D
9096  402E
9097  402F
9098  4030
9099  4031
9100  4032
9101  4033
9102  4034
9103  4035
9104  4036
9105  4037
9106  4038
9107  4039
9108  403A
9109  403B
9110  403C
9111  403D
9112  403E
9113  403F
9114  4040
9115  4041
9116  4042
9117  4043
9118  4044
9119  4045
9120  4046
9121  4047
9122  4048
9123  4049
9124  404A
9125  404B
9126  404C
9127  404D
9128  404E
9129  404F
9130  4050
9131  4051
9132  4052
9133  4053
9134  4054
9135  4055
9136  4056
9137  4057
9138  4058
9139  4059
9140  405A
9141  405B
9142  405C
9143  405D
9144  405E
9145  405F
9146  4060
9147  4061
9148  4062
9149  4063
9150  4064
9151  4065
9152  4066
9153  4067
9154  4068
9155  4069
9156  406A
9157  406B
9158  406C
9159  406D
9160  406E
9161  406F
9162  4070
9163  4071
9164  4072
9165  4073
9166  4074
9167  4075
9168  4076
9169  4077
9170  4078
9171  4079
9172  407A
9173  407B
9174  407C
9175  407D
9176  407E
9177  407F
9178  4080
9179  4081
9180  4082
9181  4083
9182  4084
9183  4085
9184  4086
9185  4087
9186  4088
9187  4089
9188  408A
9189  408B
9190  408C
9191  408D
9192  408E
9193  408F
9194  4090
9195  4091
9196  4092
9197  4093
9198  4094
9199  4095
9200  4096
9201  4097
9202  4098
9203  4099
9204  409A
9205  409B
9206  409C
9207  409D
9208  409E
9209  409F
9210  40A0
9211  40A1
9212  40A2
9213  40A3
9214  40A4
9215  40A5
9216  40A6
9217  40A7
9218  40A8
9219  40A9
9220  40AA
9221  40AB
9222  40AC
9223  40AD
9224  40AE
9225  40AF
9226  40B0
9227  40B1
9228  40B2
9229  40B3
9230  40B4
9231  40B5
9232  40B6
9233  40B7
9234  40B8
9235  40B9
9236  40BA
9237  40BB
9238  40BC
9239  40BD
9240  40BE
9241  40BF
9242  40C0
9243  40C1
9244  40C2
9245  40C3
9246  40C4
9247  40C5
9248  40C6
9249  40C7
9250  40C8
9251  40C9
9252  40CA
9253  40CB
9254  40CC
9255  40CD
9256  40CE
9257  40CF
9258  40D0
9259  40D1
9260  40D2
9261  40D3
9262  40D4
9263  40D5
9264  40D6
9265  40D7
9266  40D8
9267  40D9
9268  40DA
9269  40DB
9270  40DC
9271  40DD
9272  40DE
9273  40DF
9274  40E0
9275  40E1
9276  40E2
9277  40E3
9278  40E4
9279  40E5
9280  40E6
9281  40E7
9282  40E8
9283  40E9
9284  40EA
9285  40EB
9286  40EC
9287  40ED
9288  40EE
9289  40EF
9290  40F0
9291  40F1
9292  40F2
9293  40F3
9294  40F4
9295  40F5
9296  40F6
9297  40F7
9298  40F8
9299  40F9
9300  40FA
9301  40FB
9302  40FC
9303  40FD
9304  40FE
9305  40FF
9306  4100
9307  4101
9308  4102
9309  4103
9310  4104
9311  4105
9312  4106
9313  4107
9314  4108
9315  4109
9316  410A
9317  410B
9318  410C
9319  410D
9320  410E
9321  410F
9322  4110
9323  4111
9324  4112
9325  4113
9326  4114
9327  4115
9328  4116
9329  4117
9330  4118
9331  4119
9332  411A
9333  411B
9334  411C
9335  411D
9336  411E
9337  411F
9338  4120
9339  4121
9340  4122
9341  4123
9342  4124
9343  4125
9344  4126
9345  4127
9346  4128
9347  4129
9348  412A
9349  412B
9350  412C
9351  412D
9352  412E
9353  412F
9354  4130
9355  4131
9356  4132
9357  4133
9358  4134
9359  4135
9360  4136
9361  4137
9362  4138
9363  4139
9364  413A
9365  413B
9366  413C
9367  413D
9368  413E
9369  413F
9370  4140
9371  4141
9372  4142
9373  4143
9374  4144
9375  4145
9376  4146
9377  4147
9378  4148
9379  4149
9380  414A
9381  414B
9382  414C
9383  414D
9384  414E
9385  414F
9386  4150
9387  4151
9388  4152
9389  4153
9390  4154
9391  4155
9392  4156
9393  4157
9394  4158
9395  4159
9396  415A
9397  415B
9398  415C
9399  415D
9400  415E
9401  415F
9402  4160
9403  4161
9404  4162
9405  4163
9406  4164
9407  4165
9408  4166
9409  4167
9410  4168
9411  4169
9412  416A
9413  416B
9414  416C
9415  416D
9416  416E
9417  416F
9418  4170
9419  4171
9420  4172
9421  4173
9422  4174
9423  4175
9424  4176
9425  4177
9426  4178
9427  4179
9428  417A
9429  417B
9430  417C
9431  417D
9432  417E
9433  417F
9434  4180
9435  4181
9436  4182
9437  4183
9438  4184
9439  4185
9440  4186
9441  4187
9442  4188
9443  4189
9444  418A
9445  418B
9446  418C
9447  418D
9448  418E
9449  418F
9450  4190
9451  4191
9452  4192
9453  4193
9454  4194
9455  4195
9456  4196
9457  4197
9458  4198
9459  4199
9460  419A
9461  419B
9462  419C
9463  419D
9464  419E
9465  419F
9466  41A0
9467  41A1
9468  41A2
9469  41A3
9470  41A4
9471  41A5
9472  41A6
9473  41A7
9474  41A8
9475  41A9
9476  41AA
9477  41AB
9478  41AC
9479  41AD
9480  41AE
9481  41AF
9482  41B0
9483  41B1
9484  41B2
9485  41B3
9486  41B4
9487  41B5
9488  41B6
9489  41B7
9490  41B8
9491  41B9
9492  41BA
9493  41BB
9494  41BC
9495  41BD
9496  41BE
9497  41BF
9498  41C0
9499  41C1
9500  41C2
9501  41C3
9502  41C4
9503  41C5
9504  41C6
9505  41C7
9506  41C8
9507  41C9
9508  41CA
9509  41CB
9510  41CC
9511  41CD
9512  41CE
9513  41CF
9514  41D0
9515  41D1
9516  41D2
9517  41D3
9518  41D4
9519  41D5
9520  41D6
9521  41D7
9522  41D8
9523  41D9
9524  41DA
9525  41DB
9526  41DC
9527  41DD
9528  41DE
9529  41DF
9530  41E0
9531  41E1
9532  41E2
9533  41E3
9534  41E4
9535  41E5
9536  41E6
9537  41E7
9538  41E8
9539  41E9
9540  41EA
9541  41EB
9542  41EC
9543  41ED
9544  41EE
9545  41EF
9546  41F0
9547  41F1
9548  41F2
9549  41F3
9550  41F4
9551  41F5
9552  41F6
9553  41F7
9554  41F8
9555  41F9
9556  41FA
9557  41FB
9558  41FC
9559  41FD
9560  41FE
9561  41FF
9562  4200
9563  4201
9564  4202
9565  4203
9566  4204
9567  4205
9568  4206
9569  4207
9570  4208
9571  4209
9572  420A
9573  420B
9574  420C
9575  420D
9576  420E
9577  420F
9578  4210
9579  4211
9580  4212
9581  4213
9582  4214
9583  4215
9584  4216
9585  4217
9586  4218
9587  4219
9588  421A
9589  421B
9590  421C
9591  421D
9592  421E
9593  421F
9594  4220
9595  4221
9596  4222
9597  4223
9598  4224
9599  4225
9600  4226
9601  4227
9602  4228
9603  4229
9604  422A
9605  422B
9606  422C
9607  422D
9608  422E
9609  422F
9610  4230
9611  4231
9612  4232
9613  4233
9614  4234
9615  4235
9616  4236
9617  4237
9618  4238
9619  4239
9620  423A
9621  423B
9622  423C
9623  423D
9624  423E
9625  423F
9626  4240
9627  4241
9628  4242
9629  4243
9630  4244
9631  4245
9632  4246
9633  4247
9634  4248
9635  4249
9636  424A
9637  424B
9638  424C
9639  424D
9640  424E
9641  424F
9642  4250
9643  4251
9644  4252
9645  4253
9646  4254
9647  4255
9648  4256
9649  4257
9650  4258
9651  4259
9652  425A
9653  425B
9654  425C
9655  425D
9656  425E
9657  425F
9658  4260
9659  4261
9660  4262
9661  4263
9662  4264
9663  4265
9664  4266
9665  4267
9666  4268
9667  4269
9668  426A
9669  426B
9670  426C
9671  426D
9672  426E
9673  426F
9674  4270
9675  4271
9676  4272
9677  4273
9678  4274
9679  4275
9680  4276
9681  4277
9682  4278
9683  4279
9684  427A
9685  427B
9686  427C
9687  427D
9688  427E
9689  427F
9690  4280
9691  4281
9692  4282
9693  4283
9694  4284
9695  4285
9696  4286
9697  4287
9698  4288
9699  4289
9700  428A
9701  428B
9702  428C
9703  428D
9704  428E
9705  428F
9706  4290
9707  4291
9708  4292
9709  4293
9710  4294
9711  4295
9712  4296
9713  4297
9714  4298
9715  4299
9716  429A
9717  429B
9718  429C
9719  429D
9720  429E
9721  429F
9722  42A0
9723  42A1
9724  42A2
9725  42A3
9726  42A4
9727  42A5
9728  42A6
9729  42A7
9730  42A8
9731  42A9
9732  42AA
9733  42AB
9734  42AC
9735  42AD
9736  42AE
9737  42AF
9738  42B0
9739  42B1
9740  42B2
9741  42B3
9742  42B4
9743  42B5
9744  42B6
9745  42B7
9746  42B8
9747  42B9
9748  42BA
9749  42BB
9750  42BC
9751  42BD
9752  42BE
9753  42BF
9754  42C0
9755  42C1
9756  42C2
9757  42C3
9758  42C4
9759  42C5
9760  42C6
9761  42C7
9762  42C8
9763  42C9
9764  42CA
9765  42CB
9766  42CC
9767  42CD
9768  42CE
9769  42CF
9770  42D0
9771  42D1
9772  42D2
9773  42D3
9774  42D4
9775  42D5
9776  42D6
9777  42D7
9778  42D8
9779  42D9
9780  42DA
9781  42DB
9782  42DC
9783  42DD
9784  42DE
9785  42DF
9786  42E0
9787  42E1
9788  42E2
9789  42E3
9790  42E4
9791  42E5
9792  42E6
9793  42E7
9794  42E8
9795  42E9
9796  42EA
9797  42EB
9798  42EC
9799  42ED
9800  42EE
9801  42EF
9802  42F0
9803  42F1
9804  42F2
9805  42F3
9806  42F4
9807  42F5
9808  42F6
9809  42F7
9810  42F8
9811  42F9
9812  42FA
9813  42FB
9814  42FC
9815  42FD
9816  42FE
9817  42FF
9818  4300
9819  4301
9820  4302
9821  4303
9822  4304
9823  4305
9824  4306
9825  4307
9826  4308
9827  4309
9828  430A
9829  430B
9830  430C
9831  430D
9832  430E
9833  430F
9834  4310
9835  4311
9836  4312
9837  4313
9838  4314
9839  4315
9840  4316
9841  4317
9842  4318
9843  4319
9844  431A
9845  431B
9846  431C
9847  431D
9848  431E
9849  431F
9850  4320
9851  4321
9852  4322
9853  4323
9854  4324
9855  4325
9856  4326
9857  4327
9858  4328
9859  4329
9860  432A
9861  432B
9862  432C
9863  432D
9864  432E
9865  432F
9866  4330
9867  4331
9868  4332
9869  4333
9870  4334
9871  4335
9872  4336
9873  4337
9874  4338
9875  4339
9876  433A
9877  433B
9878  433C
9879  433D
9880  433E
9881  433F
9882  4340
9883  4341
9884  4342
9885  4343
9886  4344
9887  4345
9888  4346
9889  4347
9890  4348
9891  4349
9892  434A
9893  434B
9894  434C
9895  434D
9896  434E
9897  434F
9898  4350
9899  4351
9900  4352
9901  4353
9902  4354
9903  4355
9904  4356
9905  4357
9906  4358
9907  4359
9908  435A
9909  435B
9910  435C
9911  435D
9912  435E
9913  435F
9914  4360
9915  4361
9916  4362
9917  4363
9918  4364
9919  4365
9920  4366
9921  4367
9922  4368
9923  4369
9924  436A
9925  436B
9926  436C
9927  436D
9928  436E
9929  436F
9930  4370
9931  4371
9932  4372
9933  4373
9934  4374
9935  4375
9936  4376
9937  4377
9938  4378
9939  4379
9940  437A
9941  437B
9942  437C
9943  437D
9944  437E
9945  437F
9946  4380
9947  4381
9948  4382
9949  4383
9950  4384
9951  4385
9952  4386
9953  4387
9954  4388
9955  4389
9956  438A
9957  438B
9958  438C
9959  438D
9960  438E
9961  438F
9962  4390
9963  4391
9964  4392
9965  4393
9966  4394
9967  4395
9968  4396
9969  4397
9970  4398
9971  4399
9972  439A
9973  439B
9974  439C
9975  439D
9976  439E
9977  439F
9978  43A0
9979  43A1
9980  43A2
9981  43A3
9982  43A4
9983  43A5
9984  43A6
9985  43A7
9986  43A8
9987  43A9
9988  43AA
9989  43AB
9990  43AC
9991  43AD
9992  43AE
9993  43AF
9994  43B0
9995  43B1
9996  43B2
9997  43B3
9998  43B4
9999  43B5
10000  43B6
10001  43B7
10002  43B8
10003  43B9
10004  43BA
10005  43BB
10006  43BC
10007  43BD
10008  43BE
10009  43BF
10010  43C0
10011  43C1
10012  43C2
10013  43C3
10014  43C4
10015  43C5
10016  43C6
10017  43C7
10018  43C8
10019  43C9
10020  43CA
10021  43CB
10022  43CC
10023  43CD
10024  43CE
10025  43CF
10026  43D0
10027  43D1
10028  43D2
10029  43D3
10030  43D4
10031  43D5
10032  43D6
10033  43D7
10034  43D8
10035  43D9
10036  43DA
10037  43DB
10038  43DC
10039  43DD
10040  43DE
10041  43DF
10042  43E0
10043  43E1
10044  43E2
10045  43E3
10046  43E4
10047  43E5
10048  43E6
10049  43E7
10050  43E8
10051  43E9
10052  43EA
10053  43EB
10054  43EC
10055  43ED
10056  43EE
10057  43EF
10058  43F0
10059  43F1
10060  43F2
10061  43F3
10062  43F4
10063  43F5
10064  43F6
10065  43F7
10066  43F8
10067  43F9
10068  43FA
10069  43FB
10070  43FC
10071  43FD
10072  43FE
10073  43FF
10074  4400
10075  4401
10076  4402
10077  4403
10078  4404
10079  4405
10080  4406
10081  4407
10082  4408
10083  4409
10084  440A
10085  440B
10086  440C
10087  440D
10088  440E
10089  440F
10090  4410
10091  4411
10092  4412
10093  4413
10094  4414
10095  4415
10096  4416
10097  4417
10098  4418
10099  4419
10100  441A
10101  441B
10102  441C
10103  441D
10104  441E
10105  441F
10106  4420
10107  4421
10108  4422
10109  4423
10110  4424
10111  4425
10112  4426
10113  4427
10114  4428
10115  4429
10116  442A
10117  442B
10118  442C
10119  442D
10120  442E
10121  442F
10122  4430
10123  4431
10124  4432
10125  4433
10126  4434
10127  4435
10128  4436
10129  4437
10130  4438
10131  4439
10132  443A
10133  443B
10134  443C
10135  443D
10136  443E
10137  443F
10138  4440
10139  4441
10140  4442
10141  4443
10142  4444
10143  4445
10144  4446
10145  4447
10146  4448
10147  4449
10148  444A
10149  444B
10150  444C
10151  444D
10152  444E
10153  444F
10154  4450
10155  4451
10156  4452
10157  4453
10158  4454
10159  4455
10160  4456
10161  4457
10162  4458
10163  4459
10164  445A
10165  445B
10166  445C
10167  445D
10168  445E
10169  445F
10170  4460
10171  4461
10172  4462
10173  4463
10174  4464
10175  4465
10176  4466
10177  4467
10178  4468
10179  4469
10180  446A
10181  446B
10182  446C
10183  446D
10184  446E
10185  446F
10186  4470
10187  4471
10188  4472
10189  4473
10190  4474
10191  4475
10192  4476
10193  4477
10194  4478
10195  4479
10196  447A
10197  447B
10198  447C
10199  447D
10200  447E
10201  447F
10202  4480
10203  4481
10204  4482
10205  4483
10206  4484
10207  4485
10208  4486
10209  4487
10210  4488
10211  4489
10212  448A
10213  448B
10214  448C
10215  448D
10216  448E
10217  448F
10218  4490
10219  4491
10220  4492
10221  4493
10222  4494
10223  4495
10224  4496
10225  4497
10226  4498
10227  4499
10228  449A
10229  449B
10230  449C
10231  449D
10232  449E
10233  449F
10234  44A0
10235  44A1
10236  44A2
10237  44A3
10238  44A4
10239  44A5
10240  44A6
10241  44A7
10242  44A8
10243  44A9
10244  44AA
10245  44AB
10246  44AC
10247  44AD
10248  44AE
10249  44AF
10250  44B0
10251  44B1
10252  44B2
10253  44B3
10254  44B4
10255  44B5
10256  44B6
10257  44B7
10258  44B8
10259  44B9
10260  44BA
10261  44BB
10262  44BC
10263  44BD
10264  44BE
10265  44BF
10266  44C0
10267  44C1
10268  44C2
10269  44C3
10270  44C4
10271  44C5
10272  44C6
10273  44C7
10274  44C8
10275  44C9
10276  44CA
10277  44CB
10278  44CC
10279  44CD
10280  44CE
10281  44CF
10282  44D0
10283  44D1
10284  44D2
10285  44D3
10286  44D4
10287  44D5
10288  44D6
10289  44D7
10290  44D8
10291  44D9
10292  44DA
10293  44DB
10294  44DC
10295  44DD
10296  44DE
10297  44DF
10298  44E0
10299  44E1
10300  44E2
10301  44E3
10302  44E4
10303  44E5
10304  44E6
10305  44E7
10306  44E8
10307  44E9
10308  44EA
10309  44EB
10310  44EC
10311  44ED
10312  44EE
10313  44EF
10314  44F0
10315  44F1
10316  44F2
10317  44F3
10318  44F4
10319  44F5
10320  44F6
10321  44F7
10322  44F8
10323  44F9
10324  44FA
10325  44FB
10326  44FC
10327  44FD
10328  44FE
10329  44FF
10330  4500
10331  4501
10332  4502
10333  4503
10334  4504
10335  4505
10336  4506
10337  4507
10338  4508
10339  4509
10340  450A
10341  450B
10342  450C
10343  450D
10344  450E
10345  450F
10346  4510
10347  4511
10348  4512
10349  4513
10350  4514
10351  4515
10352  4516
10353  4517
10354  4518
10355  4519
10356  451A
10357  451B
10358  451C
10359  451D
10360  451E
10361  451F
10362  4520
10363  4521
10364  4522
10365  4523
10366  4524
10367  4525
10368  4526
10369  4527
10370  4528
10371  4529
10372  452A
10373  452B
10374  452C
10375  452D
10376  452E
10377  452F
10378  4530
10379  4531
10380  4532
10381  4533
10382  4534
10383  4535
10384  4536
10385  4537
10386  4538
10387  4539
10388  453A
10389  453B
10390  453C
10391  453D
10392  453E
10393  453F
10394  4540
10395  4541
10396  4542
10397  4543
10398  4544
10399  4545
10400  4546
10401  4547
10402  4548
10403  4549
10404  454A
10405  454B
10406  454C
10407  454D
10408  454E
10409  454F
10410  4550
10411  4551
10412  4552
10413  4553
10414  4554
10415  4555
10416  4556
10417  4557
10418  4558
10419  4559
10420  455A
10421  455B
10422  455C
10423  455D
10424  455E
10425  455F
10426  4560
10427  4561
10428  4562
10429  4563
10430  4564
10431  4565
10432  4566
10433  4567
10434  4568
10435  4569
10436  456A
10437  456B
10438  456C
10439  456D
10440  456E
10441  456F
10442  4570
10443  4571
10444  4572
10445  4573
10446  4574
10447  4575
10448  4576
10449  4577
10450  4578
10451  4579
10452  457A
10453  457B
10454  457C
10455  457D
10456  457E
10457  457F
10458  4580
10459  4581
10460  4582
10461  4583
10462  4584
10463  4585
10464  4586
10465  4587
10466  4588
10467  4589
10468  458A
10469  458B
10470  458C
10471  458D
10472  458E
10473  458F
10474  4590
10475  4591
10476  4592
10477  4593
10478  4594
10479  4595
10480  4596
10481  4597
10482  4598
10483  4599
10484  459A
10485  459B
10486  459C
10487  459D
10488  459E
10489  459F
10490  45A0
10491  45A1
10492  45A2
10493  45A3
10494  45A4
10495  45A5
10496  45A6
10497  45A7
10498  45A8
10499  45A9
10500  45AA
10501  45AB
10502  45AC
10503  45AD
10504  45AE
10505  45AF
10506  45B0
10507  45B1
10508  45B2
10509  45B3
10510  45B4
10511  45B5
10512  45B6
10513  45B7
10514  45B8
10515  45B9
10516  45BA
10517  45BB
10518  45BC
10519  45BD
10520  45BE
10521  45BF
10522  45C0
10523  45C1
10524  45C2
10525  45C3
10526  45C4
10527  45C5
10528  45C6
10529  45C7
10530  45C8
10531  45C9
10532  45CA
10533  45CB
10534  45CC
10535  45CD
10536  45CE
10537  45CF
10538  45D0
10539  45D1
10540  45D2
10541  45D3
10542  45D4
10543  45D5
10544  45D6
10545  45D7
10546  45D8
10547  45D9
10548  45DA
10549  45DB
10550  45DC
10551  45DD
10552  45DE
10553  45DF
10554  45E0
10555  45E1
10556  45E2
10557  45E3
10558  45E4
10559  45E5
10560  45E6
10561  45E7
10562  45E8
10563  45E9
10564  45EA
10565  45EB
10566  45EC
10567  45ED
10568  45EE
10569  45EF
10570  45F0
10571  45F1
10572  45F2
10573  45F3
10574  45F4
10575  45F5
10576  45F6
10577  45F7
10578  45F8
10579  45F9
10580  45FA
10581  45FB
10582  45FC
10583  45FD
10584  45FE
10585  45FF
10586  4600
10587  4601
10588  4602
10589  4603
10590  4604
10591  4605
10592  4606
10593  4607
10594  4608
10595  4609
10596  460A
10597  460B
10598  460C
10599  460D
10600  460E
10601  460F
10602  4610
10603  4611
10604  4612
10605  4613
10606  4614
10607  4615
10608  4616
10609  4617
10610  4618
10611  4619
10612  461A
10613  461B
10614  461C
10615  461D
10616  461E
10617  461F
10618  4620
10619  4621
10620  4622
10621  4623
10622  4624
10623  4625
10624  4626
10625  4627
10626  4628
10627  4629
10628  462A
10629  462B
10630  462C
10631  462D
10632  462E
10633  462F
10634  4630
10635  4631
10636  4632
10637  4633
10638  4634
10639  4635
10640  4636
10641  4637
10642  4638
10643  4639
10644  463A
10645  463B
10646  463C
10647  463D
10648  463E
10649  463F
10650  4640
10651  4641
10652  4642
10653  4643
10654  4644
10655  4645
10656  4646
10657  4647
10658  4648
10659  4649
10660  464A
10661  464B
10662  464C
10663  464D
10664  464E
10665  464F
10666  4650
10667  4651
10668  4652
10669  4653
10670  4654
10671  4655
10672  4656
10673  4657
10674  4658
10675  4659
10676  465A
10677  465B
10678  465C
10679  465D
10680  465E
10681  465F
10682  4660
10683  4661
10684  4662
10685  4663
10686  4664
10687  4665
10688  4666
10689  4667
10690  4668
10691  4669
10692  466A
10693  466B
10694  466C
10695  466D
10696  466E
10697  466F
10698  4670
10699  4671
10700  4672
10701  4673
10702  4674
10703  4675
10704  4676
10705  4677
10706  4678
10707  4679
10708  467A
10709  467B
10710  467C
10711  467D
10712  467E
10713  467F
10714  4680
10715  4681
10716  4682
10717  4683
10718  4684
10719  4685
10720  4686
10721  4687
10722  4688
10723  4689
10724  468A
10725  468B
10726  468C
10727  468D
10728  468E
10729  468F
10730  4690
10731  4691
10732  4692
10733  4693
10734  4694
10735  4695
10736  4696
10737  4697
10738  4698
10739  4699
10740  469A
10741  469B
10742  469C
10743  469D
10744  469E
10745  469F
10746  46A0
10747  46A1
10748  46A2
10749  46A3
10750  46A4
10751  46A5
10752  46A6
10753  46A7
10754  46A8
10755  46A9
10756  46AA
10757  46AB
10758  46AC
10759  46AD
10760  46AE
10761  46AF
10762  46B0
10763  46B1
10764  46B2
10765  46B3
10766  46B4
10767  46B5
10768  46B6
10769  46B7
10770  46B8
10771  46B9
10772  46BA
10773  46BB
10774  46BC
10775  46BD
10776  46BE
10777  46BF
10778  46C0
10779  46C1
10780  46C2
10781  46C3
10782  46C4
10783  46C5
10784  46C6
10785  46C7
10786  46C8
10787  46C9
10788  46CA
10789  46CB
10790  46CC
10791  46CD
10792  46CE
10793  46CF
10794  46D0
10795  46D1
10796  46D2
10797  46D3
10798  46D4
10799  46D5
10800  46D6
10801  46D7
10802  46D8
10803  46D9
10804  46DA
10805  46DB
10806  46DC
10807  46DD
10808  46DE
10809  46DF
10810  46E0
10811  46E1
10812  46E2
10813  46E3
10814  46E4
10815  46E5
10816  46E6
10817  46E7
10818  46E8
10819  46E9
10820  46EA
10821  46EB
10822  46EC
10823  46ED
10824  46EE
10825  46EF
10826  46F0
10827  46F1
10828  46F2
10829  46F3
10830  46F4
10831  46F5
10832  46F6
10833  46F7
10834  46F8
10835  46F9
10836  46FA
10837  46FB
10838  46FC
10839  46FD
10840  46FE
10841  46FF
10842  4700
10843  4701
10844  4702
10845  4703
10846  4704
10847  4705
10848  4706
10849  4707
10850  4708
10851  4709
10852  470A
10853  470B
10854  470C
10855  470D
10856  470E
10857  470F
10858  4710
10859  4711
10860  4712
10861  4713
10862  4714
10863  4715
10864  4716
10865  4717
10866  4718
10867  4719
10868  471A
10869  471B
10870  471C
10871  471D
10872  471E
10873  471F
10874  4720
10875  4721
10876  4722
10877  4723
10878  4724
10879  4725
10880  4726
10881  4727
10882  4728
10883  4729
10884  472A
10885  472B
10886  472C
10887  472D
10888  472E
10889  472F
10890  4730
10891  4731
10892  4732
10893  4733
10894  4734
10895  4735
10896  4736
10897  4737
10898  4738
10899  4739
10900  473A
10901  473B
10902  473C
10903  473D
10904  473E
10905  473F
10906  4740
10907  4741
10908  4742
10909  4743
10910  4744
10911  4745
10912  4746
10913  4747
10914  4748
10915  4749
10916  474A
10917  474B
10918  474C
10919  474D
10920  474E
10921  474F
10922  4750
10923  4751
10924  4752
10925  4753
10926  4754
10927  4755
10928  4756
10929  4757
10930  4758
10931  4759
10932  475A
10933  475B
10934  475C
10935  475D
10936  475E
10937  475F
10938  4760
10939  4761
10940  4762
10941  4763
10942  4764
10943  4765
10944  4766
10945  4767
10946  4768
10947  4769
10948  476A
10949  476B
10950  476C
10951  476D
10952  476E
10953  476F
10954  4770
10955  4771
10956  4772
10957  4773
10958  4774
10959  4775
10960  4776
10961  4777
10962  4778
10963  4779
10964  477A
10965  477B
10966  477C
10967  477D
10968  477E
10969  477F
10970  4780
10971  4781
10972  4782
10973  4783
10974  4784
10975  4785
10976  4786
10977  4787
10978  4788
10979  4789
10980  478A
10981  478B
10982  478C
10983  478D
10984  478E
10985  478F
10986  4790
10987  4791
10988  4792
10989  4793
10990  4794
10991  4795
10992  4796
10993  4797
10994  4798
10995  4799
10996  479A
10997  479B
10998  479C
10999  479D
11000  479E
11001  479F
11002  47A0
11003  47A1
11004  47A2
11005  47A3
11006  47A4
11007  47A5
11008  47A6
11009  47A7
11010  47A8
11011  47A9
11012  47AA
11013  47AB
11014  47AC
11015  47AD
11016  47AE
11017  47AF
11018  47B0
11019  47B1
11020  47B2
11021  47B3
11022  47B4
11023  47B5
11024  47B6
11025  47B7
11026  47B8
11027  47B9
11028  47BA
11029  47BB
11030  47BC
11031  47BD
11032  47BE
11033  47BF
11034  47C0
11035  47C1
11036  47C2
11037  47C3
11038  47C4
11039  47C5
11040  47C6
11041  47C7
11042  47C8
11043  47C9
11044  47CA
11045  47CB
11046  47CC
11047  47CD
11048  47CE
11049  47CF
11050  47D0
11051  47D1
11052  47D2
11053  47D3
11054  47D4
11055  47D5
11056  47D6
11057  47D7
11058  47D8
11059  47D9
11060  47DA
11061  47DB
11062  47DC
11063  47DD
11064  47DE
11065  47DF
11066  47E0
11067  47E1
11068  47E2
11069  47E3
11070  47E4
11071  47E5
11072  47E6
11073  47E7
11074  47E8
11075  47E9
11076  47EA
11077  47EB
11078  47EC
11079  47ED
11080  47EE
11081  47EF
11082  47F0
11083  47F1
11084  47F2
11085  47F3
11086  47F4
11087  47F5
11088  47F6
11089  47F7
11090  47F8
11091  47F9
11092  47FA
11093  47FB
11094  47FC
11095  47FD
11096  47FE
11097  47FF
11098  4800
11099  4801
11100  4802
11101  4803
11102  4804
11103  4805
11104  4806
11105  4807
11106  4808
11107  4809
11108  480A
11109  480B
11110  480C
11111  480D
11112  480E
11113  480F
11114  4810
11115  4811
11116  4812
11117  4813
11118  4814
11119  4815
11120  4816
11121  4817
11122  4818
11123  4819
11124  481A
11125  481B
11126  481C
11127  481D
11128  481E
11129  481F
11130  4820
11131  4821
11132  4822
11133  4823
11134  4824
11135  4825
11136  4826
11137  4827
11138  4828
11139  4829
11140  482A
11141  482B
11142  482C
11143  482D
11144  482E
11145  482F
11146  4830
11147  4831
11148  4832
11149  4833
11150  4834
11151  4835
11152  4836
11153  4837
11154  4838
11155  4839
11156  483A
11157  483B
11158  483C
11159  483D
11160  483E
11161  483F
11162  4840
11163  4841
11164  4842
11165  4843
11166  4844
11167  4845
11168  4846
11169  4847
11170  4848
11171  4849
11172  484A
11173  484B
11174  484C
11175  484D
11176  484E
11177  484F
11178  4850
11179  4851
11180  4852
11181  4853
11182  4854
11183  4855
11184  4856
11185  4857
11186  4858
11187  4859
11188  485A
11189  485B
11190  485C
11191  485D
11192  485E
11193  485F
11194  4860
11195  4861
11196  4862
11197  4863
11198  4864
11199  4865
11200  4866
11201  4867
11202  4868
11203  4869
11204  486A
11205  486B
11206  486C
11207  486D
11208  486E
11209  486F
11210  4870
11211  4871
11212  4872
11213  4873
11214  4874
11215  4875
11216  4876
11217  4877
11218  4878
11219  4879
11220  487A
11221  487B
11222  487C
11223  487D
11224  487E
11225  487F
11226  4880
11227  4881
11228  4882
11229  4883
11230  4884
11231  4885
11232  4886
11233  4887
11234  4888
11235  4889
11236  488A
11237  488B
11238  488C
11239  488D
11240  488E
11241  488F
11242  4890
11243  4891
11244  4892
11245  4893
11246  4894
11247  4895
11248  4896
11249  4897
11250  4898
11251  4899
11252  489A
11253  489B
11254  489C
11255  489D
11256  489E
11257  489F
11258  48A0
11259  48A1
11260  48A2
11261  48A3
11262  48A4
11263  48A5
11264  48A6
11265  48A7
11266  48A8
11267  48A9
11268  48AA
11269  48AB
11270  48AC
11271  48AD
11272  48AE
11273  48AF
11274  48B0
11275  48B1
11276  48B2
11277  48B3
11278  48B4
11279  48B5
11280  48B6
11281  48B7
11282  48B8
11283  48B9
11284  48BA
11285  48BB
11286  48BC
11287  48BD
11288  48BE
11289  48BF
11290  48C0
11291  48C1
11292  48C2
11293  48C3
11294  48C4
11295  48C5
11296  48C6
11297  48C7
11298  48C8
11299  48C9
11300  48CA
11301  48CB
11302  48CC
11303  48CD
11304  48CE
11305  48CF
11306  48D0
11307  48D1
11308  48D2
11309  48D3
11310  48D4
11311  48D5
11312  48D6
11313  48D7
11314  48D8
11315  48D9
11316  48DA
11317  48DB
11318  48DC
11319  48DD
11320  48DE
11321  48DF
11322  48E0
11323  48E1
11324  48E2
11325  48E3
11326  48E4
11327  48E5
11328  48E6
11329  48E7
11330  48E8
11331  48E9
11332  48EA
11333  48EB
11334  48EC
11335  48ED
11336  48EE
11337  48EF
11338  48F0
11339  48F1
11340  48F2
11341  48F3
11342  48F4
11343  48F5
11344  48F6
11345  48F7
11346  48F8
11347  48F9
11348  48FA
11349  48FB
11350  48FC
11351  48FD
11352  48FE
11353  48FF
11354  4900
11355  4901
11356  4902
11357  4903
11358  4904
11359  4905
11360  4906
11361  4907
11362  4908
11363  4909
11364  490A
11365  490B
11366  490C
11367  490D
11368  490E
11369  490F
11370  4910
11371  4911
11372  4912
11373  4913
11374  4914
11375  4915
11376  4916
11377  4917
11378  4918
11379  4919
11380  491A
11381  491B
11382  491C
11383  491D
11384  491E
11385  491F
11386  4920
11387  4921
11388  4922
11389  4923
11390  4924
11391  4925
11392  4926
11393  4927
11394  4928
11395  4929
11396  492A
11397  492B
11398  492C
11399  492D
11400  492E
11401  492F
11402  4930
11403  4931
11404  4932
11405  4933
11406  4934
11407  4935
11408  4936
11409  4937
11410  4938
11411  4939
11412  493A
11413  493B
11414  493C
11415  493D
11416  493E
11417  493F
11418  4940
11419  4941
11420  4942
11421  4943
11422  4944
11423  4945
11424  4946
11425  4947
11426  4948
11427  4949
11428  494A
11429  494B
11430  494C
11431  494D
11432  494E
11433  494F
11434  4950
11435  4951
11436  4952
11437  4953
11438  4954
11439  4955
11440  4956
11441  4957
11442  4958
11443  4959
11444  495A
11445  495B
11446  495C
11447  495D
11448  495E
11449  495F
11450  4960
11451  4961
11452  4962
11453  4963
11454  4964
11455  4965
11456  4966
11457  4967
11458  4968
11459  4969
11460  496A
11461  496B
11462  496C
11463  496D
11464  496E
11465  496F
11466  4970
11467  4971
11468  4972
11469  4973
11470  4974
11471  4975
11472  4976
11473  4977
11474  4978
11475  4979
11476  497A
11477  497B
11478  497C
11479  497D
11480  497E
11481  497F
11482  4980
11483  4981
11484  4982
11485  4983
11486  4984
11487  4985
11488  4986
11489  4987
11490  4988
11491  4989
11492  498A
11493  498B
11494  498C
11495  498D
11496  498E
11497  498F
11498  4990
11499  4991
11500  4992
11501  4993
11502  4994
11503  4995
11504  4996
11505  4997
11506  4998
11507  4999
11508  499A
11509  499B
11510  499C
11511  499D
11512  499E
11513  499F
11514  49A0
11515  49A1
11516  49A2
11517  49A3
11518  49A4
11519  49A5
11520  49A6
11521  49A7
11522  49A8
11523  49A9
11524  49AA
11525  49AB
11526  49AC
11527  49AD
11528  49AE
11529  49AF
11530  49B0
11531  49B1
11532  49B2
11533  49B3
11534  49B4
11535  49B5
11536  49B6
11537  49B7
11538  49B8
11539  49B9
11540  49BA
11541  49BB
11542  49BC
11543  49BD
11544  49BE
11545  49BF
11546  49C0
11547  49C1
11548  49C2
11549  49C3
11550  49C4
11551  49C5
11552  49C6
11553  49C7
11554  49C8
11555  49C9
11556  49CA
11557  49CB
11558  49CC
11559  49CD
11560  49CE
11561  49CF
11562  49D0
11563  49D1
11564  49D2
11565  49D3
11566  49D4
11567  49D5
11568  49D6
11569  49D7
11570  49D8
11571  49D9
11572  49DA
11573  49DB
11574  49DC
11575  49DD
11576  49DE
11577  49DF
11578  49E0
11579  49E1
11580  49E2
11581  49E3
11582  49E4
11583  49E5
11584  49E6
11585  49E7
11586  49E8
11587  49E9
11588  49EA
11589  49EB
11590  49EC
11591  49ED
11592  49EE
11593  49EF
11594  49F0
11595  49F1
11596  49F2
11597  49F3
11598  49F4
11599  49F5
11600  49F6
11601  49F7
11602  49F8
11603  49F9
11604  49FA
11605  49FB
11606  49FC
11607  49FD
11608  49FE
11609  49FF
11610  4A00
11611  4A01
11612  4A02
11613  4A03
11614  4A04
11615  4A05
11616  4A06
11617  4A07
11618  4A08
11619  4A09
11620  4A0A
11621  4A0B
11622  4A0C
11623  4A0D
11624  4A0E
11625  4A0F
11626  4A10
11627  4A11
11628  4A12
11629  4A13
11630  4A14
11631  4A15
11632  4A16
11633  4A17
11634  4A18
11635  4A19
11636  4A1A
11637  4A1B
11638  4A1C
11639  4A1D
11640  4A1E
11641  4A1F
11642  4A20
11643  4A21
11644  4A22
11645  4A23
11646  4A24
11647  4A25
11648  4A26
11649  4A27
11650  4A28
11651  4A29
11652  4A2A
11653  4A2B
11654  4A2C
11655  4A2D
11656  4A2E
11657  4A2F
11658  4A30
11659  4A31
11660  4A32
11661  4A33
11662  4A34
11663  4A35
11664  4A36
11665  4A37
11666  4A38
11667  4A39
11668  4A3A
11669  4A3B
11670  4A3C
11671  4A3D
11672  4A3E
11673  4A3F
11674  4A40
11675  4A41
11676  4A42
11677  4A43
11678  4A44
11679  4A45
11680  4A46
11681  4A47
11682  4A48
11683  4A49
11684  4A4A
11685  4A4B
11686  4A4C
11687  4A4D
11688  4A4E
11689  4A4F
11690  4A50
11691  4A51
11692  4A52
11693  4A53
11694  4A54
11695  4A55
11696  4A56
11697  4A57
11698  4A58
11699  4A59
11700  4A5A
11701  4A5B
11702  4A5C
11703  4A5D
11704  4A5E
11705  4A5F
11706  4A60
11707  4A61
11708  4A62
11709  4A63
11710  4A64
11711  4A65
11712  4A66
11713  4A67
11714  4A68
11715  4A69
11716  4A6A
11717  4A6B
11718  4A6C
11719  4A6D
11720  4A6E
11721  4A6F
11722  4A70
11723  4A71
11724  4A72
11725  4A73
11726  4A74
11727  4A75
11728  4A76
11729  4A77
11730  4A78
11731  4A79
11732  4A7A
11733  4A7B
11734  4A7C
11735  4A7D
11736  4A7E
11737  4A7F
11738  4A80
11739  4A81
11740  4A82
11741  4A83
11742  4A84
11743  4A85
11744  4A86
11745  4A87
11746  4A88
11747  4A89
11748  4A8A
11749  4A8B
11750  4A8C
11751  4A8D
11752  4A8E
11753  4A8F
11754  4A90
11755  4A91
11756  4A92
11757  4A93
11758  4A94
11759  4A95
11760  4A96
11761  4A97
11762  4A98
11763  4A99
11764  4A9A
11765  4A9B
11766  4A9C
11767  4A9D
11768  4A9E
11769  4A9F
11770  4AA0
11771  4AA1
11772  4AA2
11773  4AA3
11774  4AA4
11775  4AA5
11776  4AA6
11777  4AA7
11778  4AA8
11779  4AA9
11780  4AAA
11781  4AAB
11782  4AAC
11783  4AAD
11784  4AAE
11785  4AAF
11786  4AB0
11787  4AB1
11788  4AB2
11789  4AB3
11790  4AB4
11791  4AB5
11792  4AB6
11793  4AB7
11794  4AB8
11795  4AB9
11796  4ABA
11797  4ABB
11798  4ABC
11799  4ABD
11800  4ABE
11801  4ABF
11802  4AC0
11803  4AC1
11804  4AC2
11805  4AC3
11806  4AC4
11807  4AC5
11808  4AC6
11809  4AC7
11810  4AC8
11811  4AC9
11812  4ACA
11813  4ACB
11814  4ACC
11815  4ACD
11816  4ACE
11817  4ACF
11818  4AD0
11819  4AD1
11820  4AD2
11821  4AD3
11822  4AD4
11823  4AD5
11824  4AD6
11825  4AD7
11826  4AD8
11827  4AD9
11828  4ADA
11829  4ADB
11830  4ADC
11831  4ADD
11832  4ADE
11833  4ADF
11834  4AE0
11835  4AE1
11836  4AE2
11837  4AE3
11838  4AE4
11839  4AE5
11840  4AE6
11841  4AE7
11842  4AE8
11843  4AE9
11844  4AEA
11845  4AEB
11846  4AEC
11847  4AED
11848  4AEE
11849  4AEF
11850  4AF0
11851  4AF1
11852  4AF2
11853  4AF3
11854  4AF4
11855  4AF5
11856  4AF6
11857  4AF7
11858  4AF8
11859  4AF9
11860  4AFA
11861  4AFB
11862  4AFC
11863  4AFD
11864  4AFE
11865  4AFF
11866  4B00
11867  4B01
11868  4B02
11869  4B03
11870  4B04
11871  4B05
11872  4B06
11873  4B07
11874  4B08
11875  4B09
11876  4B0A
11877  4B0B
11878  4B0C
11879  4B0D
11880  4B0E
11881  4B0F
11882  4B10
11883  4B11
11884  4B12
11885  4B13
11886  4B14
11887  4B15
11888  4B16
11889  4B17
11890  4B18
11891  4B19
11892  4B1A
11893  4B1B
11894  4B1C
11895  4B1D
11896  4B1E
11897  4B1F
11898  4B20
11899  4B21
11900  4B22
11901  4B23
11902  4B24
11903  4B25
11904  4B26
11905  4B27
11906  4B28
11907  4B29
11908  4B2A
11909  4B2B
11910  4B2C
11911  4B2D
11912  4B2E
11913  4B2F
11914  4B30
11915  4B31
11916  4B32
11917  4B33
11918  4B34
11919  4B35
11920  4B36
11921  4B37
11922  4B38
11923  4B39
11924  4B3A
11925  4B3B
11926  4B3C
11927  4B3D
11928  4B3E
11929  4B3F
11930  4B40
11931  4B41
11932  4B42
11933  4B43
11934  4B44
11935  4B45
11936  4B46
11937  4B47
11938  4B48
11939  4B49
11940  4B4A
11941  4B4B
11942  4B4C
11943  4B4D
11944  4B4E
11945  4B4F
11946  4B50
11947  4B51
11948  4B52
11949  4B53
11950  4B54
11951  4B55
11952  4B56
11953  4B57
11954  4B58
11955  4B59
11956  4B5A
11957  4B5B
11958  4B5C
11959  4B5D
11960  4B5E
11961  4B5F
11962  4B60
11963  4B61
11964  4B62
11965  4B63
11966  4B64
11967  4B65
11968  4B66
11969  4B67
11970  4B68
11971  4B69
11972  4B6A
11973  4B6B
11974  4B6C
11975  4B6D
11976  4B6E
11977  4B6F
11978  4B70
11979  4B71
11980  4B72
11981  4B73
11982  4B74
11983  4B75
11984  4B76
11985  4B77
11986  4B78
11987  4B79
11988  4B7A
11989  4B7B
11990  4B7C
11991  4B7D
11992  4B7E
11993  4B7F
11994  4B80
11995  4B81
11996  4B82
11997  4B83
11998  4B84
11999  4B85
12000  4B86
12001  4B87
12002  4B88
12003  4B89
12004  4B8A
12005  4B8B
12006  4B8C
12007  4B8D
12008  4B8E
12009  4B8F
12010  4B90
12011  4B91
12012  4B92
12013  4B93
12014  4B94
12015  4B95
12016  4B96
12017  4B97
12018  4B98
12019  4B99
12020  4B9A
12021  4B9B
12022  4B9C
12023  4B9D
12024  4B9E
12025  4B9F
12026  4BA0
12027  4BA1
12028  4BA2
12029  4BA3
12030  4BA4
12031  4BA5
12032  4BA6
12033  4BA7
12034  4BA8
12035  4BA9
12036  4BAA
12037  4BAB
12038  4BAC
12039  4BAD
12040  4BAE
12041  4BAF
12042  4BB0
12043  4BB1
12044  4BB2
12045  4BB3
12046  4BB4
12047  4BB5
12048  4BB6
12049  4BB7
12050  4BB8
12051  4BB9
12052  4BBA
12053  4BBB
12054  4BBC
12055  4BBD
12056  4BBE
12057  4BBF
12058  4BC0
12059  4BC1
12060  4BC2
12061  4BC3
12062  4BC4
12063  4BC5
12064  4BC6
12065  4BC7
12066  4BC8
12067  4BC9
12068  4BCA
12069  4BCB
12070  4BCC
12071  4BCD
12072  4BCE
12073  4BCF
12074  4BD0
12075  4BD1
12076  4BD2
12077  4BD3
12078  4BD4
12079  4BD5
12080  4BD6
12081  4BD7
12082  4BD8
12083  4BD9
12084  4BDA
12085  4BDB
12086  4BDC
12087  4BDD
12088  4BDE
12089  4BDF
12090  4BE0
12091  4BE1
12092  4BE2
12093  4BE3
12094  4BE4
12095  4BE5
12096  4BE6
12097  4BE7
12098  4BE8
12099  4BE9
12100  4BEA
12101  4BEB
12102  4BEC
12103  4BED
12104  4BEE
12105  4BEF
12106  4BF0
12107  4BF1
12108  4BF2
12109  4BF3
12110  4BF4
12111  4BF5
12112  4BF6
12113  4BF7
12114  4BF8
12115  4BF9
12116  4BFA
12117  4BFB
12118  4BFC
12119  4BFD
12120  4BFE
12121  4BFF
12122  4C00
12123  4C01
12124  4C02
12125  4C03
12126  4C04
12127  4C05
12128  4C06
12129  4C07
12130  4C08
12131  4C09
12132  4C0A
12133  4C0B
12134  4C0C
12135  4C0D
12136  4C0E
12137  4C0F
12138  4C10
12139  4C11
12140  4C12
12141  4C13
12142  4C14
12143  4C15
12144  4C16
12145  4C17
12146  4C18
12147  4C19
12148  4C1A
12149  4C1B
12150  4C1C
12151  4C1D
12152  4C1E
12153  4C1F
12154  4C20
12155  4C21
12156  4C22
12157  4C23
12158  4C24
12159  4C25
12160  4C26
12161  4C27
12162  4C28
12163  4C29
12164  4C2A
12165  4C2B
12166  4C2C
12167  4C2D
12168  4C2E
12169  4C2F
12170  4C30
12171  4C31
12172  4C32
12173  4C33
12174  4C34
12175  4C35
12176  4C36
12177  4C37
12178  4C38
12179  4C39
12180  4C3A
12181  4C3B
12182  4C3C
12183  4C3D
12184  4C3E
12185  4C3F
12186  4C40
12187  4C41
12188  4C42
12189  4C43
12190  4C44
12191  4C45
12192  4C46
12193  4C47
12194  4C48
12195  4C49
12196  4C4A
12197  4C4B
12198  4C4C
12199  4C4D
12200  4C4E
12201  4C4F
12202  4C50
12203  4C51
12204  4C52
12205  4C53
12206  4C54
12207  4C55
12208  4C56
12209  4C57
12210  4C58
12211  4C59
12212  4C5A
12213  4C5B
12214  4C5C
12215  4C5D
12216  4C5E
12217  4C5F
12218  4C60
12219  4C61
12220  4C62
12221  4C63
12222  4C64
12223  4C65
12224  4C66
12225  4C67
12226  4C68
12227  4C69
12228  4C6A
12229  4C6B
12230  4C6C
12231  4C6D
12232  4C6E
12233  4C6F
12234  4C70
12235  4C71
12236  4C72
12237  4C73
12238  4C74
12239  4C75
12240  4C76
12241  4C77
12242  4C78
12243  4C79
12244  4C7A
12245  4C7B
12246  4C7C
12247  4C7D
12248  4C7E
12249  4C7F
12250  4C80
12251  4C81
12252  4C82
12253  4C83
12254  4C84
12255  4C85
12256  4C86
12257  4C87
12258  4C88
12259  4C89
12260  4C8A
12261  4C8B
12262  4C8C
12263  4C8D
12264  4C8E
12265  4C8F
12266  4C90
12267  4C91
12268  4C92
12269  4C93
12270  4C94
12271  4C95
12272  4C96
12273  4C97
12274  4C98
12275  4C99
12276  4C9A
12277  4C9B
12278  4C9C
12279  4C9D
12280  4C9E
12281  4C9F
12282  4CA0
12283  4CA1
12284  4CA2
12285  4CA3
12286  4CA4
12287  4CA5
12288  4CA6
12289  4CA7
12290  4CA8
12291  4CA9
12292  4CAA
12293  4CAB
12294  4CAC
12295  4CAD
12296  4CAE
12297  4CAF
12298  4CB0
12299  4CB1
12300  4CB2
12301  4CB3
12302  4CB4
12303  4CB5
12304  4CB6
12305  4CB7
12306  4CB8
12307  4CB9
12308  4CBA
12309  4CBB
12310  4CBC
12311  4CBD
12312  4CBE
12313  4CBF
12314  4CC0
12315  4CC1
12316  4CC2
12317  4CC3
12318  4CC4
12319  4CC5
12320  4CC6
12321  4CC7
12322  4CC8
12323  4CC9
12324  4CCA
12325  4CCB
12326  4CCC
12327  4CCD
12328  4CCE
12329  4CCF
12330  4CD0
12331  4CD1
12332  4CD2
12333  4CD3
12334  4CD4
12335  4CD5
12336  4CD6
12337  4CD7
12338  4CD8
12339  4CD9
12340  4CDA
12341  4CDB
12342  4CDC
12343  4CDD
12344  4CDE
12345  4CDF
12346  4CE0
12347  4CE1
12348  4CE2
12349  4CE3
12350  4CE4
12351  4CE5
12352  4CE6
12353  4CE7
12354  4CE8
12355  4CE9
12356  4CEA
12357  4CEB
12358  4CEC
12359  4CED
12360  4CEE
12361  4CEF
12362  4CF0
12363  4CF1
12364  4CF2
12365  4CF3
12366  4CF4
12367  4CF5
12368  4CF6
12369  4CF7
12370  4CF8
12371  4CF9
12372  4CFA
12373  4CFB
12374  4CFC
12375  4CFD
12376  4CFE
12377  4CFF
12378  4D00
12379  4D01
12380  4D02
12381  4D03
12382  4D04
12383  4D05
12384  4D06
12385  4D07
12386  4D08
12387  4D09
12388  4D0A
12389  4D0B
12390  4D0C
12391  4D0D
12392  4D0E
12393  4D0F
12394  4D10
12395  4D11
12396  4D12
12397  4D13
12398  4D14
12399  4D15
12400  4D16
12401  4D17
12402  4D18
12403  4D19
12404  4D1A
12405  4D1B
12406  4D1C
12407  4D1D
12408  4D1E
12409  4D1F
12410  4D20
12411  4D21
12412  4D22
12413  4D23
12414  4D24
12415  4D25
12416  4D26
12417  4D27
12418  4D28
12419  4D29
12420  4D2A
12421  4D2B
12422  4D2C
12423  4D2D
12424  4D2E
12425  4D2F
12426  4D30
12427  4D31
12428  4D32
12429  4D33
12430  4D34
12431  4D35
12432  4D36
12433  4D37
12434  4D38
12435  4D39
12436  4D3A
12437  4D3B
12438  4D3C
12439  4D3D
12440  4D3E
12441  4D3F
12442  4D40
12443  4D41
12444  4D42
12445  4D43
12446  4D44
12447  4D45
12448  4D46
12449  4D47
12450  4D48
12451  4D49
12452  4D4A
12453  4D4B
12454  4D4C
12455  4D4D
12456  4D4E
12457  4D4F
12458  4D50
12459  4D51
12460  4D52
12461  4D53
12462  4D54
12463  4D55
12464  4D56
12465  4D57
12466  4D58
12467  4D59
12468  4D5A
12469  4D5B
12470  4D5C
12471  4D5D
12472  4D5E
12473  4D5F
12474  4D60
12475  4D61
12476  4D62
12477  4D63
12478  4D64
12479  4D65
12480  4D66
12481  4D67
12482  4D68
12483  4D69
12484  4D6A
12485  4D6B
12486  4D6C
12487  4D6D
12488  4D6E
12489  4D6F
12490  4D70
12491  4D71
12492  4D72
12493  4D73
12494  4D74
12495  4D75
12496  4D76
12497  4D77
12498  4D78
12499  4D79
12500  4D7A
12501  4D7B
12502  4D7C
12503  4D7D
12504  4D7E
12505  4D7F
12506  4D80
12507  4D81
12508  4D82
12509  4D83
12510  4D84
12511  4D85
12512  4D86
12513  4D87
12514  4D88
12515  4D89
12516  4D8A
12517  4D8B
12518  4D8C
12519  4D8D
12520  4D8E
12521  4D8F
12522  4D90
12523  4D91
12524  4D92
12525  4D93
12526  4D94
12527  4D95
12528  4D96
12529  4D97
12530  4D98
12531  4D99
12532  4D9A
12533  4D9B
12534  4D9C
12535  4D9D
12536  4D9E
12537  4D9F
12538  4DA0
12539  4DA1
12540  4DA2
12541  4DA3
12542  4DA4
12543  4DA5
12544  4DA6
12545  4DA7
12546  4DA8
12547  4DA9
12548  4DAA
12549  4DAB
12550  4DAC
12551  4DAD
12552  4DAE
12553  4DAF
12554  4DB0
12555  4DB1
12556  4DB2
12557  4DB3
12558  4DB4
12559  4DB5
12560  4DB6
12561  4DB7
12562  4DB8
12563  4DB9
12564  4DBA
12565  4DBB
12566  4DBC
12567  4DBD
12568  4DBE
12569  4DBF
12570  4DC0
12571  4DC1
12572  4DC2
12573  4DC3
12574  4DC4
12575  4DC5
12576  4DC6
12577  4DC7
12578  4DC8
12579  4DC9
12580  4DCA
12581  4DCB
12582  4DCC
12583  4DCD
12584  4DCE
12585  4DCF
12586  4DD0
12587  4DD1
12588  4DD2
12589  4DD3
12590  4DD4
12591  4DD5
12592  4DD6
12593  4DD7
12594  4DD8
12595  4DD9
12596  4DDA
12597  4DDB
12598  4DDC
12599  4DDD
12600  4DDE
12601  4DDF
12602  4DE0
12603  4DE1
12604  4DE2
12605  4DE3
12606  4DE4
12607  4DE5
12608  4DE6
12609  4DE7
12610  4DE8
12611  4DE9
12612  4DEA
12613  4DEB
12614  4DEC
12615  4DED
12616  4DEE
12617  4DEF
12618  4DF0
12619  4DF1
12620  4DF2
12621  4DF3
12622  4DF4
12623  4DF5
12624  4DF6
12625  4DF7
12626  4DF8
12627  4DF9
12628  4DFA
12629  4DFB
12630  4DFC
12631  4DFD
12632  4DFE
12633  4DFF
12634  4E00
12635  4E01
12636  4E02
12637  4E03
12638  4E04
12639  4E05
12640  4E06
12641  4E07
12642  4E08
12643  4E09
12644  4E0A
12645  4E0B
12646  4E0C
12647  4E0D
12648  4E0E
12649  4E0F
12650  4E10
12651  4E11
12652  4E12
12653  4E13
12654  4E14
12655  4E15
12656  4E16
12657  4E17
12658  4E18
12659  4E19
12660  4E1A
12661  4E1B
12662  4E1C
12663  4E1D
12664  4E1E
12665  4E1F
12666  4E20
12667  4E21
12668  4E22
12669  4E23
12670  4E24
12671  4E25
12672  4E26
12673  4E27
12674  4E28
12675  4E29
12676  4E2A
12677  4E2B
12678  4E2C
12679  4E2D
12680  4E2E
12681  4E2F
12682  4E30
12683  4E31
12684  4E32
12685  4E33
12686  4E34
12687  4E35
12688  4E36
12689  4E37
12690  4E38
12691  4E39
12692  4E3A
12693  4E3B
12694  4E3C
12695  4E3D
12696  4E3E
12697  4E3F
12698  4E40
12699  4E41
12700  4E42
12701  4E43
12702  4E44
12703  4E45
12704  4E46
12705  4E47
12706  4E48
12707  4E49
12708  4E4A
12709  4E4B
12710  4E4C
12711  4E4D
12712  4E4E
12713  4E4F
12714  4E50
12715  4E51
12716  4E52
12717  4E53
12718  4E54
12719  4E55
12720  4E56
12721  4E57
12722  4E58
12723  4E59
12724  4E5A
12725  4E5B
12726  4E5C
12727  4E5D
12728  4E5E
12729  4E5F
12730  4E60
12731  4E61
12732  4E62
12733  4E63
12734  4E64
12735  4E65
12736  4E66
12737  4E67
12738  4E68
12739  4E69
12740  4E6A
12741  4E6B
12742  4E6C
12743  4E6D
12744  4E6E
12745  4E6F
12746  4E70
12747  4E71
12748  4E72
12749  4E73
12750  4E74
12751  4E75
12752  4E76
12753  4E77
12754  4E78
12755  4E79
12756  4E7A
12757  4E7B
12758  4E7C
12759  4E7D
12760  4E7E
12761  4E7F
12762  4E80
12763  4E81
12764  4E82
12765  4E83
12766  4E84
12767  4E85
12768  4E86
12769  4E87
12770  4E88
12771  4E89
12772  4E8A
12773  4E8B
12774  4E8C
12775  4E8D
12776  4E8E
12777  4E8F
12778  4E90
12779  4E91
12780  4E92
12781  4E93
12782  4E94
12783  4E95
12784  4E96
12785  4E97
12786  4E98
12787  4E99
12788  4E9A
12789  4E9B
12790  4E9C
12791  4E9D
12792  4E9E
12793  4E9F
12794  4EA0
12795  4EA1
12796  4EA2
12797  4EA3
12798  4EA4
12799  4EA5
12800  4EA6
12801  4EA7
12802  4EA8
12803  4EA9
12804  4EAA
12805  4EAB
12806  4EAC
12807  4EAD
12808  4EAE
12809  4EAF
12810  4EB0
12811  4EB1
12812  4EB2
12813  4EB3
12814  4EB4
12815  4EB5
12816  4EB6
12817  4EB7
12818  4EB8
12819  4EB9
12820  4EBA
12821  4EBB
12822  4EBC
12823  4EBD
12824  4EBE
12825  4EBF
12826  4EC0
12827  4EC1
12828  4EC2
12829  4EC3
12830  4EC4
12831  4EC5
12832  4EC6
12833  4EC7
12834  4EC8
12835  4EC9
12836  4ECA
12837  4ECB
12838  4ECC
12839  4ECD
12840  4ECE
12841  4ECF
12842  4ED0
12843  4ED1
12844  4ED2
12845  4ED3
12846  4ED4
12847  4ED5
12848  4ED6
12849  4ED7
12850  4ED8
12851  4ED9
12852  4EDA
12853  4EDB
12854  4EDC
12855  4EDD
12856  4EDE
12857  4EDF
12858  4EE0
12859  4EE1
12860  4EE2
12861  4EE3
12862  4EE4
12863  4EE5
12864  4EE6
12865  4EE7
12866  4EE8
12867  4EE9
12868  4EEA
12869  4EEB
12870  4EEC
12871  4EED
12872  4EEE
12873  4EEF
12874  4EF0
12875  4EF1
12876  4EF2
12877  4EF3
12878  4EF4
12879  4EF5
12880  4EF6
12881  4EF7
12882  4EF8
12883  4EF9
12884  4EFA
12885  4EFB
12886  4EFC
12887  4EFD
12888  4EFE
12889  4EFF
12890  4F00
12891  4F01
12892  4F02
12893  4F03
12894  4F04
12895  4F05
12896  4F06
12897  4F07
12898  4F08
12899  4F09
12900  4F0A
12901  4F0B
12902  4F0C
12903  4F0D
12904  4F0E
12905  4F0F
12906  4F10
12907  4F11
12908  4F12
12909  4F13
12910  4F14
12911  4F15
12912  4F16
12913  4F17
12914  4F18
12915  4F19
12916  4F1A
12917  4F1B
12918  4F1C
12919  4F1D
12920  4F1E
12921  4F1F
12922  4F20
12923  4F21
12924  4F22
12925  4F23
12926  4F24
12927  4F25
12928  4F26
12929  4F27
12930  4F28
12931  4F29
12932  4F2A
12933  4F2B
12934  4F2C
12935  4F2D
12936  4F2E
12937  4F2F
12938  4F30
12939  4F31
12940  4F32
12941  4F33
12942  4F34
12943  4F35
12944  4F36
12945  4F37
12946  4F38
12947  4F39
12948  4F3A
12949  4F3B
12950  4F3C
12951  4F3D
12952  4F3E
12953  4F3F
12954  4F40
12955  4F41
12956  4F42
12957  4F43
12958  4F44
12959  4F45
12960  4F46
12961  4F47
12962  4F48
12963  4F49
12964  4F4A
12965  4F4B
12966  4F4C
12967  4F4D
12968  4F4E
12969  4F4F
12970  4F50
12971  4F51
12972  4F52
12973  4F53
12974  4F54
12975  4F55
12976  4F56
12977  4F57
12978  4F58
12979  4F59
12980  4F5A
12981  4F5B
12982  4F5C
12983  4F5D
12984  4F5E
12985  4F5F
12986  4F60
12987  4F61
12988  4F62
12989  4F63
12990  4F64
12991  4F65
12992  4F66
12993  4F67
12994  4F68
12995  4F69
12996  4F6A
12997  4F6B
12998  4F6C
12999  4F6D
13000  4F6E
13001  4F6F
13002  4F70
13003  4F71
13004  4F72
13005  4F73
13006  4F74
13007  4F75
13008  4F76
13009  4F77
13010  4F78
13011  4F79
13012  4F7A
13013  4F7B
13014  4F7C
13015  4F7D
13016  4F7E
13017  4F7F
13018  4F80
13019  4F81
13020  4F82
13021  4F83
13022  4F84
13023  4F85
13024  4F86
13025  4F87
13026  4F88
13027  4F89
13028  4F8A
13029  4F8B
13030  4F8C
13031  4F8D
13032  4F8E
13033  4F8F
13034  4F90
13035  4F91
13036  4F92
13037  4F93
13038  4F94
13039  4F95
13040  4F96
13041  4F97
13042  4F98
13043  4F99
13044  4F9A
13045  4F9B
13046  4F9C
13047  4F9D
13048  4F9E
13049  4F9F
13050  4FA0
13051  4FA1
13052  4FA2
13053  4FA3
13054  4FA4
13055  4FA5
13056  4FA6
13057  4FA7
13058  4FA8
13059  4FA9
13060  4FAA
13061  4FAB
13062  4FAC
13063  4FAD
13064  4FAE
13065  4FAF
13066  4FB0
13067  4FB1
13068  4FB2
13069  4FB3
13070  4FB4
13071  4FB5
13072  4FB6
13073  4FB7
13074  4FB8
13075  4FB9
13076  4FBA
13077  4FBB
13078  4FBC
13079  4FBD
13080  4FBE
13081  4FBF
13082  4FC0
13083  4FC1
13084  4FC2
13085  4FC3
13086  4FC4
13087  4FC5
13088  4FC6
13089  4FC7
13090  4FC8
13091  4FC9
13092  4FCA
13093  4FCB
13094  4FCC
13095  4FCD
13096  4FCE
13097  4FCF
13098  4FD0
13099  4FD1
13100  4FD2
13101  4FD3
13102  4FD4
13103  4FD5
13104  4FD6
13105  4FD7
13106  4FD8
13107  4FD9
13108  4FDA
13109  4FDB
13110  4FDC
13111  4FDD
13112  4FDE
13113  4FDF
13114  4FE0
13115  4FE1
13116  4FE2
13117  4FE3
13118  4FE4
13119  4FE5
13120  4FE6
13121  4FE7
13122  4FE8
13123  4FE9
13124  4FEA
13125  4FEB
13126  4FEC
13127  4FED
13128  4FEE
13129  4FEF
13130  4FF0
13131  4FF1
13132  4FF2
13133  4FF3
13134  4FF4
13135  4FF5
13136  4FF6
13137  4FF7
13138  4FF8
13139  4FF9
13140  4FFA
13141  4FFB
13142  4FFC
13143  4FFD
13144  4FFE
13145  4FFF
13146  5000
13147  5001
13148  5002
13149  5003
13150  5004
13151  5005
13152  5006
13153  5007
13154  5008
13155  5009
13156  500A
13157  500B
13158  500C
13159  500D
13160  500E
13161  500F
13162  5010
13163  5011
13164  5012
13165  5013
13166  5014
13167  5015
13168  5016
13169  5017
13170  5018
13171  5019
13172  501A
13173  501B
13174  501C
13175  501D
13176  501E
13177  501F
13178  5020
13179  5021
13180  5022
13181  5023
13182  5024
13183  5025
13184  5026
13185  5027
13186  5028
13187  5029
13188  502A
13189  502B
13190  502C
13191  502D
13192  502E
13193  502F
13194  5030
13195  5031
13196  5032
13197  5033
13198  5034
13199  5035
13200  5036
13201  5037
13202  5038
13203  5039
13204  503A
13205  503B
13206  503C
13207  503D
13208  503E
13209  503F
13210  5040
13211  5041
13212  5042
13213  5043
13214  5044
13215  5045
13216  5046
13217  5047
13218  5048
13219  5049
13220  504A
13221  504B
13222  504C
13223  504D
13224  504E
13225  504F
13226  5050
13227  5051
13228  5052
13229  5053
13230  5054
13231  5055
13232  5056
13233  5057
13234  5058
13235  5059
13236  505A
13237  505B
13238  505C
13239  505D
13240  505E
13241  505F
13242  5060
13243  5061
13244  5062
13245  5063
13246  5064
13247  5065
13248  5066
13249  5067
13250  5068
13251  5069
13252  506A
13253  506B
13254  506C
13255  506D
13256  506E
13257  506F
13258  5070
13259  5071
13260  5072
13261  5073
13262  5074
13263  5075
13264  5076
13265  5077
13266  5078
13267  5079
13268  507A
13269  507B
13270  507C
13271  507D
13272  507E
13273  507F
13274  5080
13275  5081
13276  5082
13277  5083
13278  5084
13279  5085
13280  5086
13281  5087
13282  5088
13283  5089
13284  508A
13285  508B
13286  508C
13287  508D
13288  508E
13289  508F
13290  5090
13291  5091
13292  5092
13293  5093
13294  5094
13295  5095
13296  5096
13297  5097
13298  5098
13299  5099
13300  509A
13301  509B
13302  509C
13303  509D
13304  509E
13305  509F
13306  50A0
13307  50A1
13308  50A2
13309  50A3
13310  50A4
13311  50A5
13312  50A6
13313  50A7
13314  50A8
13315  50A9
13316  50AA
13317  50AB
13318  50AC
13319  50AD
13320  50AE
13321  50AF
13322  50B0
13323  50B1
13324  50B2
13325  50B3
13326  50B4
13327  50B5
13328  50B6
13329  50B7
13330  50B8
13331  50B9
13332  50BA
13333  50BB
13334  50BC
13335  50BD
13336  50BE
13337  50BF
13338  50C0
13339  50C1
13340  50C2
13341  50C3
13342  50C4
13343  50C5
13344  50C6
13345  50C7
13346  50C8
13347  50C9
13348  50CA
13349  50CB
13350  50CC
13351  50CD
13352  50CE
13353  50CF
13354  50D0
13355  50D1
13356  50D2
13357  50D3
13358  50D4
13359  50D5
13360  50D6
13361  50D7
13362  50D8
13363  50D9
13364  50DA
13365  50DB
13366  50DC
13367  50DD
13368  50DE
13369  50DF
13370  50E0
13371  50E1
13372  50E2
13373  50E3
13374  50E4
13375  50E5
13376  50E6
13377  50E7
13378  50E8
13379  50E9
13380  50EA
13381  50EB
13382  50EC
13383  50ED
13384  50EE
13385  50EF
13386  50F0
13387  50F1
13388  50F2
13389  50F3
13390  50F4
13391  50F5
13392  50F6
13393  50F7
13394  50F8
13395  50F9
13396  50FA
13397  50FB
13398  50FC
13399  50FD
13400  50FE
13401  50FF
13402  5100
13403  5101
13404  5102
13405  5103
13406  5104
13407  5105
13408  5106
13409  5107
13410  5108
13411  5109
13412  510A
13413  510B
13414  510C
13415  510D
13416  510E
13417  510F
13418  5110
13419  5111
13420  5112
13421  5113
13422  5114
13423  5115
13424  5116
13425  5117
13426  5118
13427  5119
13428  511A
13429  511B
13430  511C
13431  511D
13432  511E
13433  511F
13434  5120
13435  5121
13436  5122
13437  5123
13438  5124
13439  5125
13440  5126
13441  5127
13442  5128
13443  5129
13444  512A
13445  512B
13446  512C
13447  512D
13448  512E
13449  512F
13450  5130
13451  5131
13452  5132
13453  5133
13454  5134
13455  5135
13456  5136
13457  5137
13458  5138
13459  5139
13460  513A
13461  513B
13462  513C
13463  513D
13464  513E
13465  513F
13466  5140
13467  5141
13468  5142
13469  5143
13470  5144
13471  5145
13472  5146
13473  5147
13474  5148
13475  5149
13476  514A
13477  514B
13478  514C
13479  514D
13480  514E
13481  514F
13482  5150
13483  5151
13484  5152
13485  5153
13486  5154
13487  5155
13488  5156
13489  5157
13490  5158
13491  5159
13492  515A
13493  515B
13494  515C
13495  515D
13496  515E
13497  515F
13498  5160
13499  5161
13500  5162
13501  5163
13502  5164
13503  5165
13504  5166
13505  5167
13506  5168
13507  5169
13508  516A
13509  516B
13510  516C
13511  516D
13512  516E
13513  516F
13514  5170
13515  5171
13516  5172
13517  5173
13518  5174
13519  5175
13520  5176
13521  5177
13522  5178
13523  5179
13524  517A
13525  517B
13526  517C
13527  517D
13528  517E
13529  517F
13530  5180
13531  5181
13532  5182
13533  5183
13534  5184
13535  5185
13536  5186
13537  5187
13538  5188
13539  5189
13540  518A
13541  518B
13542  518C
13543  518D
13544  518E
13545  518F
13546  5190
13547  5191
13548  5192
13549  5193
13550  5194
13551  5195
13552  5196
13553  5197
13554  5198
13555  5199
13556  519A
13557  519B
13558  519C
13559  519D
13560  519E
13561  519F
13562  51A0
13563  51A1
13564  51A2
13565  51A3
13566  51A4
13567  51A5
13568  51A6
13569  51A7
13570  51A8
13571  51A9
13572  51AA
13573  51AB
13574  51AC
13575  51AD
13576  51AE
13577  51AF
13578  51B0
13579  51B1
13580  51B2
13581  51B3
13582  51B4
13583  51B5
13584  51B6
13585  51B7
13586  51B8
13587  51B9
13588  51BA
13589  51BB
13590  51BC
13591  51BD
13592  51BE
13593  51BF
13594  51C0
13595  51C1
13596  51C2
13597  51C3
13598  51C4
13599  51C5
13600  51C6
13601  51C7
13602  51C8
13603  51C9
13604  51CA
13605  51CB
13606  51CC
13607  51CD
13608  51CE
13609  51CF
13610  51D0
13611  51D1
13612  51D2
13613  51D3
13614  51D4
13615  51D5
13616  51D6
13617  51D7
13618  51D8
13619  51D9
13620  51DA
13621  51DB
13622  51DC
13623  51DD
13624  51DE
13625  51DF
13626  51E0
13627  51E1
13628  51E2
13629  51E3
13630  51E4
13631  51E5
13632  51E6
13633  51E7
13634  51E8
13635  51E9
13636  51EA
13637  51EB
13638  51EC
13639  51ED
13640  51EE
13641  51EF
13642  51F0
13643  51F1
13644  51F2
13645  51F3
13646  51F4
13647  51F5
13648  51F6
13649  51F7
13650  51F8
13651  51F9
13652  51FA
13653  51FB
13654  51FC
13655  51FD
13656  51FE
13657  51FF
13658  5200
13659  5201
13660  5202
13661  5203
13662  5204
13663  5205
13664  5206
13665  5207
13666  5208
13667  5209
13668  520A
13669  520B
13670  520C
13671  520D
13672  520E
13673  520F
13674  5210
13675  5211
13676  5212
13677  5213
13678  5214
13679  5215
13680  5216
13681  5217
13682  5218
13683  5219
13684  521A
13685  521B
13686  521C
13687  521D
13688  521E
13689  521F
13690  5220
13691  5221
13692  5222
13693  5223
13694  5224
13695  5225
13696  5226
13697  5227
13698  5228
13699  5229
13700  522A
13701  522B
13702  522C
13703  522D
13704  522E
13705  522F
13706  5230
13707  5231
13708  5232
13709  5233
13710  5234
13711  5235
13712  5236
13713  5237
13714  5238
13715  5239
13716  523A
13717  523B
13718  523C
13719  523D
13720  523E
13721  523F
13722  5240
13723  5241
13724  5242
13725  5243
13726  5244
13727  5245
13728  5246
13729  5247
13730  5248
13731  5249
13732  524A
13733  524B
13734  524C
13735  524D
13736  524E
13737  524F
13738  5250
13739  5251
13740  5252
13741  5253
13742  5254
13743  5255
13744  5256
13745  5257
13746  5258
13747  5259
13748  525A
13749  525B
13750  525C
13751  525D
13752  525E
13753  525F
13754  5260
13755  5261
13756  5262
13757  5263
13758  5264
13759  5265
13760  5266
13761  5267
13762  5268
13763  5269
13764  526A
13765  526B
13766  526C
13767  526D
13768  526E
13769  526F
13770  5270
13771  5271
13772  5272
13773  5273
13774  5274
13775  5275
13776  5276
13777  5277
13778  5278
13779  5279
13780  527A
13781  527B
13782  527C
13783  527D
13784  527E
13785  527F
13786  5280
13787  5281
13788  5282
13789  5283
13790  5284
13791  5285
13792  5286
13793  5287
13794  5288
13795  5289
13796  528A
13797  528B
13798  528C
13799  528D
13800  528E
13801  528F
13802  5290
13803  5291
13804  5292
13805  5293
13806  5294
13807  5295
13808  5296
13809  5297
13810  5298
13811  5299
13812  529A
13813  529B
13814  529C
13815  529D
13816  529E
13817  529F
13818  52A0
13819  52A1
13820  52A2
13821  52A3
13822  52A4
13823  52A5
13824  52A6
13825  52A7
13826  52A8
13827  52A9
13828  52AA
13829  52AB
13830  52AC
13831  52AD
13832  52AE
13833  52AF
13834  52B0
13835  52B1
13836  52B2
13837  52B3
13838  52B4
13839  52B5
13840  52B6
13841  52B7
13842  52B8
13843  52B9
13844  52BA
13845  52BB
13846  52BC
13847  52BD
13848  52BE
13849  52BF
13850  52C0
13851  52C1
13852  52C2
13853  52C3
13854  52C4
13855  52C5
13856  52C6
13857  52C7
13858  52C8
13859  52C9
13860  52CA
13861  52CB
13862  52CC
13863  52CD
13864  52CE
13865  52CF
13866  52D0
13867  52D1
13868  52D2
13869  52D3
13870  52D4
13871  52D5
13872  52D6
13873  52D7
13874  52D8
13875  52D9
13876  52DA
13877  52DB
13878  52DC
13879  52DD
13880  52DE
13881  52DF
13882  52E0
13883  52E1
13884  52E2
13885  52E3
13886  52E4
13887  52E5
13888  52E6
13889  52E7
13890  52E8
13891  52E9
13892  52EA
13893  52EB
13894  52EC
13895  52ED
13896  52EE
13897  52EF
13898  52F0
13899  52F1
13900  52F2
13901  52F3
13902  52F4
13903  52F5
13904  52F6
13905  52F7
13906  52F8
13907  52F9
13908  52FA
13909  52FB
13910  52FC
13911  52FD
13912  52FE
13913  52FF
13914  5300
13915  5301
13916  5302
13917  5303
13918  5304
13919  5305
13920  5306
13921  5307
13922  5308
13923  5309
13924  530A
13925  530B
13926  530C
13927  530D
13928  530E
13929  530F
13930  5310
13931  5311
13932  5312
13933  5313
13934  5314
13935  5315
13936  5316
13937  5317
13938  5318
13939  5319
13940  531A
13941  531B
13942  531C
13943  531D
13944  531E
13945  531F
13946  5320
13947  5321
13948  5322
13949  5323
13950  5324
13951  5325
13952  5326
13953  5327
13954  5328
13955  5329
13956  532A
13957  532B
13958  532C
13959  532D
13960  532E
13961  532F
13962  5330
13963  5331
13964  5332
13965  5333
13966  5334
13967  5335
13968  5336
13969  5337
13970  5338
13971  5339
13972  533A
13973  533B
13974  533C
13975  533D
13976  533E
13977  533F
13978  5340
13979  5341
13980  5342
13981  5343
13982  5344
13983  5345
13984  5346
13985  5347
13986  5348
13987  5349
13988  534A
13989  534B
13990  534C
13991  534D
13992  534E
13993  534F
13994  5350
13995  5351
13996  5352
13997  5353
13998  5354
13999  5355
14000  5356
14001  5357
14002  5358
14003  5359
14004  535A
14005  535B
14006  535C
14007  535D
14008  535E
14009  535F
14010  5360
14011  5361
14012  5362
14013  5363
14014  5364
14015  5365
14016  5366
14017  5367
14018  5368
14019  5369
14020  536A
14021  536B
14022  536C
14023  536D
14024  536E
14025  536F
14026  5370
14027  5371
14028  5372
14029  5373
14030  5374
14031  5375
14032  5376
14033  5377
14034  5378
14035  5379
14036  537A
14037  537B
14038  537C
14039  537D
14040  537E
14041  537F
14042  5380
14043  5381
14044  5382
14045  5383
14046  5384
14047  5385
14048  5386
14049  5387
14050  5388
14051  5389
14052  538A
14053  538B
14054  538C
14055  538D
14056  538E
14057  538F
14058  5390
14059  5391
14060  5392
14061  5393
14062  5394
14063  5395
14064  5396
14065  5397
14066  5398
14067  5399
14068  539A
14069  539B
14070  539C
14071  539D
14072  539E
14073  539F
14074  53A0
14075  53A1
14076  53A2
14077  53A3
14078  53A4
14079  53A5
14080  53A6
14081  53A7
14082  53A8
14083  53A9
14084  53AA
14085  53AB
14086  53AC
14087  53AD
14088  53AE
14089  53AF
14090  53B0
14091  53B1
14092  53B2
14093  53B3
14094  53B4
14095  53B5
14096  53B6
14097  53B7
14098  53B8
14099  53B9
14100  53BA
14101  53BB
14102  53BC
14103  53BD
14104  53BE
14105  53BF
14106  53C0
14107  53C1
14108  53C2
14109  53C3
14110  53C4
14111  53C5
14112  53C6
14113  53C7
14114  53C8
14115  53C9
14116  53CA
14117  53CB
14118  53CC
14119  53CD
14120  53CE
14121  53CF
14122  53D0
14123  53D1
14124  53D2
14125  53D3
14126  53D4
14127  53D5
14128  53D6
14129  53D7
14130  53D8
14131  53D9
14132  53DA
14133  53DB
14134  53DC
14135  53DD
14136  53DE
14137  53DF
14138  53E0
14139  53E1
14140  53E2
14141  53E3
14142  53E4
14143  53E5
14144  53E6
14145  53E7
14146  53E8
14147  53E9
14148  53EA
14149  53EB
14150  53EC
14151  53ED
14152  53EE
14153  53EF
14154  53F0
14155  53F1
14156  53F2
14157  53F3
14158  53F4
14159  53F5
14160  53F6
14161  53F7
14162  53F8
14163  53F9
14164  53FA
14165  53FB
14166  53FC
14167  53FD
14168  53FE
14169  53FF
14170  5400
14171  5401
14172  5402
14173  5403
14174  5404
14175  5405
14176  5406
14177  5407
14178  5408
14179  5409
14180  540A
14181  540B
14182  540C
14183  540D
14184  540E
14185  540F
14186  5410
14187  5411
14188  5412
14189  5413
14190  5414
14191  5415
14192  5416
14193  5417
14194  5418
14195  5419
14196  541A
14197  541B
14198  541C
14199  541D
14200  541E
14201  541F
14202  5420
14203  5421
14204  5422
14205  5423
14206  5424
14207  5425
14208  5426
14209  5427
14210  5428
14211  5429
14212  542A
14213  542B
14214  542C
14215  542D
14216  542E
14217  542F
14218  5430
14219  5431
14220  5432
14221  5433
14222  5434
14223  5435
14224  5436
14225  5437
14226  5438
14227  5439
14228  543A
14229  543B
14230  543C
14231  543D
14232  543E
14233  543F
14234  5440
14235  5441
14236  5442
14237  5443
14238  5444
14239  5445
14240  5446
14241  5447
14242  5448
14243  5449
14244  544A
14245  544B
14246  544C
14247  544D
14248  544E
14249  544F
14250  5450
14251  5451
14252  5452
14253  5453
14254  5454
14255  5455
14256  5456
14257  5457
14258  5458
14259  5459
14260  545A
14261  545B
14262  545C
14263  545D
14264  545E
14265  545F
14266  5460
14267  5461
14268  5462
14269  5463
14270  5464
14271  5465
14272  5466
14273  5467
14274  5468
14275  5469
14276  546A
14277  546B
14278  546C
14279  546D
14280  546E
14281  546F
14282  5470
14283  5471
14284  5472
14285  5473
14286  5474
14287  5475
14288  5476
14289  5477
14290  5478
14291  5479
14292  547A
14293  547B
14294  547C
14295  547D
14296  547E
14297  547F
14298  5480
14299  5481
14300  5482
14301  5483
14302  5484
14303  5485
14304  5486
14305  5487
14306  5488
14307  5489
14308  548A
14309  548B
14310  548C
14311  548D
14312  548E
14313  548F
14314  5490
14315  5491
14316  5492
14317  5493
14318  5494
14319  5495
14320  5496
14321  5497
14322  5498
14323  5499
14324  549A
14325  549B
14326  549C
14327  549D
14328  549E
14329  549F
14330  54A0
14331  54A1
14332  54A2
14333  54A3
14334  54A4
14335  54A5
14336  54A6
14337  54A7
14338  54A8
14339  54A9
14340  54AA
14341  54AB
14342  54AC
14343  54AD
14344  54AE
14345  54AF
14346  54B0
14347  54B1
14348  54B2
14349  54B3
14350  54B4
14351  54B5
14352  54B6
14353  54B7
14354  54B8
14355  54B9
14356  54BA
14357  54BB
14358  54BC
14359  54BD
14360  54BE
14361  54BF
14362  54C0
14363  54C1
14364  54C2
14365  54C3
14366  54C4
14367  54C5
14368  54C6
14369  54C7
14370  54C8
14371  54C9
14372  54CA
14373  54CB
14374  54CC
14375  54CD
14376  54CE
14377  54CF
14378  54D0
14379  54D1
14380  54D2
14381  54D3
14382  54D4
14383  54D5
14384  54D6
14385  54D7
14386  54D8
14387  54D9
14388  54DA
14389  54DB
14390  54DC
14391  54DD
14392  54DE
14393  54DF
14394  54E0
14395  54E1
14396  54E2
14397  54E3
14398  54E4
14399  54E5
14400  54E6
14401  54E7
14402  54E8
14403  54E9
14404  54EA
14405  54EB
14406  54EC
14407  54ED
14408  54EE
14409  54EF
14410  54F0
14411  54F1
14412  54F2
14413  54F3
14414  54F4
14415  54F5
14416  54F6
14417  54F7
14418  54F8
14419  54F9
14420  54FA
14421  54FB
14422  54FC
14423  54FD
14424  54FE
14425  54FF
14426  5500
14427  5501
14428  5502
14429  5503
14430  5504
14431  5505
14432  5506
14433  5507
14434  5508
14435  5509
14436  550A
14437  550B
14438  550C
14439  550D
14440  550E
14441  550F
14442  5510
14443  5511
14444  5512
14445  5513
14446  5514
14447  5515
14448  5516
14449  5517
14450  5518
14451  5519
14452  551A
14453  551B
14454  551C
14455  551D
14456  551E
14457  551F
14458  5520
14459  5521
14460  5522
14461  5523
14462  5524
14463  5525
14464  5526
14465  5527
14466  5528
14467  5529
14468  552A
14469  552B
14470  552C
14471  552D
14472  552E
14473  552F
14474  5530
14475  5531
14476  5532
14477  5533
14478  5534
14479  5535
14480  5536
14481  5537
14482  5538
14483  5539
14484  553A
14485  553B
14486  553C
14487  553D
14488  553E
14489  553F
14490  5540
14491  5541
14492  5542
14493  5543
14494  5544
14495  5545
14496  5546
14497  5547
14498  5548
14499  5549
14500  554A
14501  554B
14502  554C
14503  554D
14504  554E
14505  554F
14506  5550
14507  5551
14508  5552
14509  5553
14510  5554
14511  5555
14512  5556
14513  5557
14514  5558
14515  5559
14516  555A
14517  555B
14518  555C
14519  555D
14520  555E
14521  555F
14522  5560
14523  5561
14524  5562
14525  5563
14526  5564
14527  5565
14528  5566
14529  5567
14530  5568
14531  5569
14532  556A
14533  556B
14534  556C
14535  556D
14536  556E
14537  556F
14538  5570
14539  5571
14540  5572
14541  5573
14542  5574
14543  5575
14544  5576
14545  5577
14546  5578
14547  5579
14548  557A
14549  557B
14550  557C
14551  557D
14552  557E
14553  557F
14554  5580
14555  5581
14556  5582
14557  5583
14558  5584
14559  5585
14560  5586
14561  5587
14562  5588
14563  5589
14564  558A
14565  558B
14566  558C
14567  558D
14568  558E
14569  558F
14570  5590
14571  5591
14572  5592
14573  5593
14574  5594
14575  5595
14576  5596
14577  5597
14578  5598
14579  5599
14580  559A
14581  559B
14582  559C
14583  559D
14584  559E
14585  559F
14586  55A0
14587  55A1
14588  55A2
14589  55A3
14590  55A4
14591  55A5
14592  55A6
14593  55A7
14594  55A8
14595  55A9
14596  55AA
14597  55AB
14598  55AC
14599  55AD
14600  55AE
14601  55AF
14602  55B0
14603  55B1
14604  55B2
14605  55B3
14606  55B4
14607  55B5
14608  55B6
14609  55B7
14610  55B8
14611  55B9
14612  55BA
14613  55BB
14614  55BC
14615  55BD
14616  55BE
14617  55BF
14618  55C0
14619  55C1
14620  55C2
14621  55C3
14622  55C4
14623  55C5
14624  55C6
14625  55C7
14626  55C8
14627  55C9
14628  55CA
14629  55CB
14630  55CC
14631  55CD
14632  55CE
14633  55CF
14634  55D0
14635  55D1
14636  55D2
14637  55D3
14638  55D4
14639  55D5
14640  55D6
14641  55D7
14642  55D8
14643  55D9
14644  55DA
14645  55DB
14646  55DC
14647  55DD
14648  55DE
14649  55DF
14650  55E0
14651  55E1
14652  55E2
14653  55E3
14654  55E4
14655  55E5
14656  55E6
14657  55E7
14658  55E8
14659  55E9
14660  55EA
14661  55EB
14662  55EC
14663  55ED
14664  55EE
14665  55EF
14666  55F0
14667  55F1
14668  55F2
14669  55F3
14670  55F4
14671  55F5
14672  55F6
14673  55F7
14674  55F8
14675  55F9
14676  55FA
14677  55FB
14678  55FC
14679  55FD
14680  55FE
14681  55FF
14682  5600
14683  5601
14684  5602
14685  5603
14686  5604
14687  5605
14688  5606
14689  5607
14690  5608
14691  5609
14692  560A
14693  560B
14694  560C
14695  560D
14696  560E
14697  560F
14698  5610
14699  5611
14700  5612
14701  5613
14702  5614
14703  5615
14704  5616
14705  5617
14706  5618
14707  5619
14708  561A
14709  561B
14710  561C
14711  561D
14712  561E
14713  561F
14714  5620
14715  5621
14716  5622
14717  5623
14718  5624
14719  5625
14720  5626
14721  5627
14722  5628
14723  5629
14724  562A
14725  562B
14726  562C
14727  562D
14728  562E
14729  562F
14730  5630
14731  5631
14732  5632
14733  5633
14734  5634
14735  5635
14736  5636
14737  5637
14738  5638
14739  5639
14740  563A
14741  563B
14742  563C
14743  563D
14744  563E
14745  563F
14746  5640
14747  5641
14748  5642
14749  5643
14750  5644
14751  5645
14752  5646
14753  5647
14754  5648
14755  5649
14756  564A
14757  564B
14758  564C
14759  564D
14760  564E
14761  564F
14762  5650
14763  5651
14764  5652
14765  5653
14766  5654
14767  5655
14768  5656
14769  5657
14770  5658
14771  5659
14772  565A
14773  565B
14774  565C
14775  565D
14776  565E
14777  565F
14778  5660
14779  5661
14780  5662
14781  5663
14782  5664
14783  5665
14784  5666
14785  5667
14786  5668
14787  5669
14788  566A
14789  566B
14790  566C
14791  566D
14792  566E
14793  566F
14794  5670
14795  5671
14796  5672
14797  5673
14798  5674
14799  5675
14800  5676
14801  5677
14802  5678
14803  5679
14804  567A
14805  567B
14806  567C
14807  567D
14808  567E
14809  567F
14810  5680
14811  5681
14812  5682
14813  5683
14814  5684
14815  5685
14816  5686
14817  5687
14818  5688
14819  5689
14820  568A
14821  568B
14822  568C
14823  568D
14824  568E
14825  568F
14826  5690
14827  5691
14828  5692
14829  5693
14830  5694
14831  5695
14832  5696
14833  5697
14834  5698
14835  5699
14836  569A
14837  569B
14838  569C
14839  569D
14840  569E
14841  569F
14842  56A0
14843  56A1
14844  56A2
14845  56A3
14846  56A4
14847  56A5
14848  56A6
14849  56A7
14850  56A8
14851  56A9
14852  56AA
14853  56AB
14854  56AC
14855  56AD
14856  56AE
14857  56AF
14858  56B0
14859  56B1
14860  56B2
14861  56B3
14862  56B4
14863  56B5
14864  56B6
14865  56B7
14866  56B8
14867  56B9
14868  56BA
14869  56BB
14870  56BC
14871  56BD
14872  56BE
14873  56BF
14874  56C0
14875  56C1
14876  56C2
14877  56C3
14878  56C4
14879  56C5
14880  56C6
14881  56C7
14882  56C8
14883  56C9
14884  56CA
14885  56CB
14886  56CC
14887  56CD
14888  56CE
14889  56CF
14890  56D0
14891  56D1
14892  56D2
14893  56D3
14894  56D4
14895  56D5
14896  56D6
14897  56D7
14898  56D8
14899  56D9
14900  56DA
14901  56DB
14902  56DC
14903  56DD
14904  56DE
14905  56DF
14906  56E0
14907  56E1
14908  56E2
14909  56E3
14910  56E4
14911  56E5
14912  56E6
14913  56E7
14914  56E8
14915  56E9
14916  56EA
14917  56EB
14918  56EC
14919  56ED
14920  56EE
14921  56EF
14922  56F0
14923  56F1
14924  56F2
14925  56F3
14926  56F4
14927  56F5
14928  56F6
14929  56F7
14930  56F8
14931  56F9
14932  56FA
14933  56FB
14934  56FC
14935  56FD
14936  56FE
14937  56FF
14938  5700
14939  5701
14940  5702
14941  5703
14942  5704
14943  5705
14944  5706
14945  5707
14946  5708
14947  5709
14948  570A
14949  570B
14950  570C
14951  570D
14952  570E
14953  570F
14954  5710
14955  5711
14956  5712
14957  5713
14958  5714
14959  5715
14960  5716
14961  5717
14962  5718
14963  5719
14964  571A
14965  571B
14966  571C
14967  571D
14968  571E
14969  571F
14970  5720
14971  5721
14972  5722
14973  5723
14974  5724
14975  5725
14976  5726
14977  5727
14978  5728
14979  5729
14980  572A
14981  572B
14982  572C
14983  572D
14984  572E
14985  572F
14986  5730
14987  5731
14988  5732
14989  5733
14990  5734
14991  5735
14992  5736
14993  5737
14994  5738
14995  5739
14996  573A
14997  573B
14998  573C
14999  573D
15000  573E
15001  573F
15002  5740
15003  5741
15004  5742
15005  5743
15006  5744
15007  5745
15008  5746
15009  5747
15010  5748
15011  5749
15012  574A
15013  574B
15014  574C
15015  574D
15016  574E
15017  574F
15018  5750
15019  5751
15020  5752
15021  5753
15022  5754
15023  5755
15024  5756
15025  5757
15026  5758
15027  5759
15028  575A
15029  575B
15030  575C
15031  575D
15032  575E
15033  575F
15034  5760
15035  5761
15036  5762
15037  5763
15038  5764
15039  5765
15040  5766
15041  5767
15042  5768
15043  5769
15044  576A
15045  576B
15046  576C
15047  576D
15048  576E
15049  576F
15050  5770
15051  5771
15052  5772
15053  5773
15054  5774
15055  5775
15056  5776
15057  5777
15058  5778
15059  5779
15060  577A
15061  577B
15062  577C
15063  577D
15064  577E
15065  577F
15066  5780
15067  5781
15068  5782
15069  5783
15070  5784
15071  5785
15072  5786
15073  5787
15074  5788
15075  5789
15076  578A
15077  578B
15078  578C
15079  578D
15080  578E
15081  578F
15082  5790
15083  5791
15084  5792
15085  5793
15086  5794
15087  5795
15088  5796
15089  5797
15090  5798
15091  5799
15092  579A
15093  579B
15094  579C
15095  579D
15096  579E
15097  579F
15098  57A0
15099  57A1
15100  57A2
15101  57A3
15102  57A4
15103  57A5
15104  57A6
15105  57A7
15106  57A8
15107  57A9
15108  57AA
15109  57AB
15110  57AC
15111  57AD
15112  57AE
15113  57AF
15114  57B0
15115  57B1
15116  57B2
15117  57B3
15118  57B4
15119  57B5
15120  57B6
15121  57B7
15122  57B8
15123  57B9
15124  57BA
15125  57BB
15126  57BC
15127  57BD
15128  57BE
15129  57BF
15130  57C0
15131  57C1
15132  57C2
15133  57C3
15134  57C4
15135  57C5
15136  57C6
15137  57C7
15138  57C8
15139  57C9
15140  57CA
15141  57CB
15142  57CC
15143  57CD
15144  57CE
15145  57CF
15146  57D0
15147  57D1
15148  57D2
15149  57D3
15150  57D4
15151  57D5
15152  57D6
15153  57D7
15154  57D8
15155  57D9
15156  57DA
15157  57DB
15158  57DC
15159  57DD
15160  57DE
15161  57DF
15162  57E0
15163  57E1
15164  57E2
15165  57E3
15166  57E4
15167  57E5
15168  57E6
15169  57E7
15170  57E8
15171  57E9
15172  57EA
15173  57EB
15174  57EC
15175  57ED
15176  57EE
15177  57EF
15178  57F0
15179  57F1
15180  57F2
15181  57F3
15182  57F4
15183  57F5
15184  57F6
15185  57F7
15186  57F8
15187  57F9
15188  57FA
15189  57FB
15190  57FC
15191  57FD
15192  57FE
15193  57FF
15194  5800
15195  5801
15196  5802
15197  5803
15198  5804
15199  5805
15200  5806
15201  5807
15202  5808
15203  5809
15204  580A
15205  580B
15206  580C
15207  580D
15208  580E
15209  580F
15210  5810
15211  5811
15212  5812
15213  5813
15214  5814
15215  5815
15216  5816
15217  5817
15218  5818
15219  5819
15220  581A
15221  581B
15222  581C
15223  581D
15224  581E
15225  581F
15226  5820
15227  5821
15228  5822
15229  5823
15230  5824
15231  5825
15232  5826
15233  5827
15234  5828
15235  5829
15236  582A
15237  582B
15238  582C
15239  582D
15240  582E
15241  582F
15242  5830
15243  5831
15244  5832
15245  5833
15246  5834
15247  5835
15248  5836
15249  5837
15250  5838
15251  5839
15252  583A
15253  583B
15254  583C
15255  583D
15256  583E
15257  583F
15258  5840
15259  5841
15260  5842
15261  5843
15262  5844
15263  5845
15264  5846
15265  5847
15266  5848
15267  5849
15268  584A
15269  584B
15270  584C
15271  584D
15272  584E
15273  584F
15274  5850
15275  5851
15276  5852
15277  5853
15278  5854
15279  5855
15280  5856
15281  5857
15282  5858
15283  5859
15284  585A
15285  585B
15286  585C
15287  585D
15288  585E
15289  585F
15290  5860
15291  5861
15292  5862
15293  5863
15294  5864
15295  5865
15296  5866
15297  5867
15298  5868
15299  5869
15300  586A
15301  586B
15302  586C
15303  586D
15304  586E
15305  586F
15306  5870
15307  5871
15308  5872
15309  5873
15310  5874
15311  5875
15312  5876
15313  5877
15314  5878
15315  5879
15316  587A
15317  587B
15318  587C
15319  587D
15320  587E
15321  587F
15322  5880
15323  5881
15324  5882
15325  5883
15326  5884
15327  5885
15328  5886
15329  5887
15330  5888
15331  5889
15332  588A
15333  588B
15334  588C
15335  588D
15336  588E
15337  588F
15338  5890
15339  5891
15340  5892
15341  5893
15342  5894
15343  5895
15344  5896
15345  5897
15346  5898
15347  5899
15348  589A
15349  589B
15350  589C
15351  589D
15352  589E
15353  589F
15354  58A0
15355  58A1
15356  58A2
15357  58A3
15358  58A4
15359  58A5
15360  58A6
15361  58A7
15362  58A8
15363  58A9
15364  58AA
15365  58AB
15366  58AC
15367  58AD
15368  58AE
15369  58AF
15370  58B0
15371  58B1
15372  58B2
15373  58B3
15374  58B4
15375  58B5
15376  58B6
15377  58B7
15378  58B8
15379  58B9
15380  58BA
15381  58BB
15382  58BC
15383  58BD
15384  58BE
15385  58BF
15386  58C0
15387  58C1
15388  58C2
15389  58C3
15390  58C4
15391  58C5
15392  58C6
15393  58C7
15394  58C8
15395  58C9
15396  58CA
15397  58CB
15398  58CC
15399  58CD
15400  58CE
15401  58CF
15402  58D0
15403  58D1
15404  58D2
15405  58D3
15406  58D4
15407  58D5
15408  58D6
15409  58D7
15410  58D8
15411  58D9
15412  58DA
15413  58DB
15414  58DC
15415  58DD
15416  58DE
15417  58DF
15418  58E0
15419  58E1
15420  58E2
15421  58E3
15422  58E4
15423  58E5
15424  58E6
15425  58E7
15426  58E8
15427  58E9
15428  58EA
15429  58EB
15430  58EC
15431  58ED
15432  58EE
15433  58EF
15434  58F0
15435  58F1
15436  58F2
15437  58F3
15438  58F4
15439  58F5
15440  58F6
15441  58F7
15442  58F8
15443  58F9
15444  58FA
15445  58FB
15446  58FC
15447  58FD
15448  58FE
15449  58FF
15450  5900
15451  5901
15452  5902
15453  5903
15454  5904
15455  5905
15456  5906
15457  5907
15458  5908
15459  5909
15460  590A
15461  590B
15462  590C
15463  590D
15464  590E
15465  590F
15466  5910
15467  5911
15468  5912
15469  5913
15470  5914
15471  5915
15472  5916
15473  5917
15474  5918
15475  5919
15476  591A
15477  591B
15478  591C
15479  591D
15480  591E
15481  591F
15482  5920
15483  5921
15484  5922
15485  5923
15486  5924
15487  5925
15488  5926
15489  5927
15490  5928
15491  5929
15492  592A
15493  592B
15494  592C
15495  592D
15496  592E
15497  592F
15498  5930
15499  5931
15500  5932
15501  5933
15502  5934
15503  5935
15504  5936
15505  5937
15506  5938
15507  5939
15508  593A
15509  593B
15510  593C
15511  593D
15512  593E
15513  593F
15514  5940
15515  5941
15516  5942
15517  5943
15518  5944
15519  5945
15520  5946
15521  5947
15522  5948
15523  5949
15524  594A
15525  594B
15526  594C
15527  594D
15528  594E
15529  594F
15530  5950
15531  5951
15532  5952
15533  5953
15534  5954
15535  5955
15536  5956
15537  5957
15538  5958
15539  5959
15540  595A
15541  595B
15542  595C
15543  595D
15544  595E
15545  595F
15546  5960
15547  5961
15548  5962
15549  5963
15550  5964
15551  5965
15552  5966
15553  5967
15554  5968
15555  5969
15556  596A
15557  596B
15558  596C
15559  596D
15560  596E
15561  596F
15562  5970
15563  5971
15564  5972
15565  5973
15566  5974
15567  5975
15568  5976
15569  5977
15570  5978
15571  5979
15572  597A
15573  597B
15574  597C
15575  597D
15576  597E
15577  597F
15578  5980
15579  5981
15580  5982
15581  5983
15582  5984
15583  5985
15584  5986
15585  5987
15586  5988
15587  5989
15588  598A
15589  598B
15590  598C
15591  598D
15592  598E
15593  598F
15594  5990
15595  5991
15596  5992
15597  5993
15598  5994
15599  5995
15600  5996
15601  5997
15602  5998
15603  5999
15604  599A
15605  599B
15606  599C
15607  599D
15608  599E
15609  599F
15610  59A0
15611  59A1
15612  59A2
15613  59A3
15614  59A4
15615  59A5
15616  59A6
15617  59A7
15618  59A8
15619  59A9
15620  59AA
15621  59AB
15622  59AC
15623  59AD
15624  59AE
15625  59AF
15626  59B0
15627  59B1
15628  59B2
15629  59B3
15630  59B4
15631  59B5
15632  59B6
15633  59B7
15634  59B8
15635  59B9
15636  59BA
15637  59BB
15638  59BC
15639  59BD
15640  59BE
15641  59BF
15642  59C0
15643  59C1
15644  59C2
15645  59C3
15646  59C4
15647  59C5
15648  59C6
15649  59C7
15650  59C8
15651  59C9
15652  59CA
15653  59CB
15654  59CC
15655  59CD
15656  59CE
15657  59CF
15658  59D0
15659  59D1
15660  59D2
15661  59D3
15662  59D4
15663  59D5
15664  59D6
15665  59D7
15666  59D8
15667  59D9
15668  59DA
15669  59DB
15670  59DC
15671  59DD
15672  59DE
15673  59DF
15674  59E0
15675  59E1
15676  59E2
15677  59E3
15678  59E4
15679  59E5
15680  59E6
15681  59E7
15682  59E8
15683  59E9
15684  59EA
15685  59EB
15686  59EC
15687  59ED
15688  59EE
15689  59EF
15690  59F0
15691  59F1
15692  59F2
15693  59F3
15694  59F4
15695  59F5
15696  59F6
15697  59F7
15698  59F8
15699  59F9
15700  59FA
15701  59FB
15702  59FC
15703  59FD
15704  59FE
15705  59FF
15706  5A00
15707  5A01
15708  5A02
15709  5A03
15710  5A04
15711  5A05
15712  5A06
15713  5A07
15714  5A08
15715  5A09
15716  5A0A
15717  5A0B
15718  5A0C
15719  5A0D
15720  5A0E
15721  5A0F
15722  5A10
15723  5A11
15724  5A12
15725  5A13
15726  5A14
15727  5A15
15728  5A16
15729  5A17
15730  5A18
15731  5A19
15732  5A1A
15733  5A1B
15734  5A1C
15735  5A1D
15736  5A1E
15737  5A1F
15738  5A20
15739  5A21
15740  5A22
15741  5A23
15742  5A24
15743  5A25
15744  5A26
15745  5A27
15746  5A28
15747  5A29
15748  5A2A
15749  5A2B
15750  5A2C
15751  5A2D
15752  5A2E
15753  5A2F
15754  5A30
15755  5A31
15756  5A32
15757  5A33
15758  5A34
15759  5A35
15760  5A36
15761  5A37
15762  5A38
15763  5A39
15764  5A3A
15765  5A3B
15766  5A3C
15767  5A3D
15768  5A3E
15769  5A3F
15770  5A40
15771  5A41
15772  5A42
15773  5A43
15774  5A44
15775  5A45
15776  5A46
15777  5A47
15778  5A48
15779  5A49
15780  5A4A
15781  5A4B
15782  5A4C
15783  5A4D
15784  5A4E
15785  5A4F
15786  5A50
15787  5A51
15788  5A52
15789  5A53
15790  5A54
15791  5A55
15792  5A56
15793  5A57
15794  5A58
15795  5A59
15796  5A5A
15797  5A5B
15798  5A5C
15799  5A5D
15800  5A5E
15801  5A5F
15802  5A60
15803  5A61
15804  5A62
15805  5A63
15806  5A64
15807  5A65
15808  5A66
15809  5A67
15810  5A68
15811  5A69
15812  5A6A
15813  5A6B
15814  5A6C
15815  5A6D
15816  5A6E
15817  5A6F
15818  5A70
15819  5A71
15820  5A72
15821  5A73
15822  5A74
15823  5A75
15824  5A76
15825  5A77
15826  5A78
15827  5A79
15828  5A7A
15829  5A7B
15830  5A7C
15831  5A7D
15832  5A7E
15833  5A7F
15834  5A80
15835  5A81
15836  5A82
15837  5A83
15838  5A84
15839  5A85
15840  5A86
15841  5A87
15842  5A88
15843  5A89
15844  5A8A
15845  5A8B
15846  5A8C
15847  5A8D
15848  5A8E
15849  5A8F
15850  5A90
15851  5A91
15852  5A92
15853  5A93
15854  5A94
15855  5A95
15856  5A96
15857  5A97
15858  5A98
15859  5A99
15860  5A9A
15861  5A9B
15862  5A9C
15863  5A9D
15864  5A9E
15865  5A9F
15866  5AA0
15867  5AA1
15868  5AA2
15869  5AA3
15870  5AA4
15871  5AA5
15872  5AA6
15873  5AA7
15874  5AA8
15875  5AA9
15876  5AAA
15877  5AAB
15878  5AAC
15879  5AAD
15880  5AAE
15881  5AAF
15882  5AB0
15883  5AB1
15884  5AB2
15885  5AB3
15886  5AB4
15887  5AB5
15888  5AB6
15889  5AB7
15890  5AB8
15891  5AB9
15892  5ABA
15893  5ABB
15894  5ABC
15895  5ABD
15896  5ABE
15897  5ABF
15898  5AC0
15899  5AC1
15900  5AC2
15901  5AC3
15902  5AC4
15903  5AC5
15904  5AC6
15905  5AC7
15906  5AC8
15907  5AC9
15908  5ACA
15909  5ACB
15910  5ACC
15911  5ACD
15912  5ACE
15913  5ACF
15914  5AD0
15915  5AD1
15916  5AD2
15917  5AD3
15918  5AD4
15919  5AD5
15920  5AD6
15921  5AD7
15922  5AD8
15923  5AD9
15924  5ADA
15925  5ADB
15926  5ADC
15927  5ADD
15928  5ADE
15929  5ADF
15930  5AE0
15931  5AE1
15932  5AE2
15933  5AE3
15934  5AE4
15935  5AE5
15936  5AE6
15937  5AE7
15938  5AE8
15939  5AE9
15940  5AEA
15941  5AEB
15942  5AEC
15943  5AED
15944  5AEE
15945  5AEF
15946  5AF0
15947  5AF1
15948  5AF2
15949  5AF3
15950  5AF4
15951  5AF5
15952  5AF6
15953  5AF7
15954  5AF8
15955  5AF9
15956  5AFA
15957  5AFB
15958  5AFC
15959  5AFD
15960  5AFE
15961  5AFF
15962  5B00
15963  5B01
15964  5B02
15965  5B03
15966  5B04
15967  5B05
15968  5B06
15969  5B07
15970  5B08
15971  5B09
15972  5B0A
15973  5B0B
15974  5B0C
15975  5B0D
15976  5B0E
15977  5B0F
15978  5B10
15979  5B11
15980  5B12
15981  5B13
15982  5B14
15983  5B15
15984  5B16
15985  5B17
15986  5B18
15987  5B19
15988  5B1A
15989  5B1B
15990  5B1C
15991  5B1D
15992  5B1E
15993  5B1F
15994  5B20
15995  5B21
15996  5B22
15997  5B23
15998  5B24
15999  5B25
16000  5B26
16001  5B27
16002  5B28
16003  5B29
16004  5B2A
16005  5B2B
16006  5B2C
16007  5B2D
16008  5B2E
16009  5B2F
16010  5B30
16011  5B31
16012  5B32
16013  5B33
16014  5B34
16015  5B35
16016  5B36
16017  5B37
16018  5B38
16019  5B39
16020  5B3A
16021  5B3B
16022  5B3C
16023  5B3D
16024  5B3E
16025  5B3F
16026  5B40
16027  5B41
16028  5B42
16029  5B43
16030  5B44
16031  5B45
16032  5B46
16033  5B47
16034  5B48
16035  5B49
16036  5B4A
16037  5B4B
16038  5B4C
16039  5B4D
16040  5B4E
16041  5B4F
16042  5B50
16043  5B51
16044  5B52
16045  5B53
16046  5B54
16047  5B55
16048  5B56
16049  5B57
16050  5B58
16051  5B59
16052  5B5A
16053  5B5B
16054  5B5C
16055  5B5D
16056  5B5E
16057  5B5F
16058  5B60
16059  5B61
16060  5B62
16061  5B63
16062  5B64
16063  5B65
16064  5B66
16065  5B67
16066  5B68
16067  5B69
16068  5B6A
16069  5B6B
16070  5B6C
16071  5B6D
16072  5B6E
16073  5B6F
16074  5B70
16075  5B71
16076  5B72
16077  5B73
16078  5B74
16079  5B75
16080  5B76
16081  5B77
16082  5B78
16083  5B79
16084  5B7A
16085  5B7B
16086  5B7C
16087  5B7D
16088  5B7E
16089  5B7F
16090  5B80
16091  5B81
16092  5B82
16093  5B83
16094  5B84
16095  5B85
16096  5B86
16097  5B87
16098  5B88
16099  5B89
16100  5B8A
16101  5B8B
16102  5B8C
16103  5B8D
16104  5B8E
16105  5B8F
16106  5B90
16107  5B91
16108  5B92
16109  5B93
16110  5B94
16111  5B95
16112  5B96
16113  5B97
16114  5B98
16115  5B99
16116  5B9A
16117  5B9B
16118  5B9C
16119  5B9D
16120  5B9E
16121  5B9F
16122  5BA0
16123  5BA1
16124  5BA2
16125  5BA3
16126  5BA4
16127  5BA5
16128  5BA6
16129  5BA7
16130  5BA8
16131  5BA9
16132  5BAA
16133  5BAB
16134  5BAC
16135  5BAD
16136  5BAE
16137  5BAF
16138  5BB0
16139  5BB1
16140  5BB2
16141  5BB3
16142  5BB4
16143  5BB5
16144  5BB6
16145  5BB7
16146  5BB8
16147  5BB9
16148  5BBA
16149  5BBB
16150  5BBC
16151  5BBD
16152  5BBE
16153  5BBF
16154  5BC0
16155  5BC1
16156  5BC2
16157  5BC3
16158  5BC4
16159  5BC5
16160  5BC6
16161  5BC7
16162  5BC8
16163  5BC9
16164  5BCA
16165  5BCB
16166  5BCC
16167  5BCD
16168  5BCE
16169  5BCF
16170  5BD0
16171  5BD1
16172  5BD2
16173  5BD3
16174  5BD4
16175  5BD5
16176  5BD6
16177  5BD7
16178  5BD8
16179  5BD9
16180  5BDA
16181  5BDB
16182  5BDC
16183  5BDD
16184  5BDE
16185  5BDF
16186  5BE0
16187  5BE1
16188  5BE2
16189  5BE3
16190  5BE4
16191  5BE5
16192  5BE6
16193  5BE7
16194  5BE8
16195  5BE9
16196  5BEA
16197  5BEB
16198  5BEC
16199  5BED
16200  5BEE
16201  5BEF
16202  5BF0
16203  5BF1
16204  5BF2
16205  5BF3
16206  5BF4
16207  5BF5
16208  5BF6
16209  5BF7
16210  5BF8
16211  5BF9
16212  5BFA
16213  5BFB
16214  5BFC
16215  5BFD
16216  5BFE
16217  5BFF
16218  5C00
16219  5C01
16220  5C02
16221  5C03
16222  5C04
16223  5C05
16224  5C06
16225  5C07
16226  5C08
16227  5C09
16228  5C0A
16229  5C0B
16230  5C0C
16231  5C0D
16232  5C0E
16233  5C0F
16234  5C10
16235  5C11
16236  5C12
16237  5C13
16238  5C14
16239  5C15
16240  5C16
16241  5C17
16242  5C18
16243  5C19
16244  5C1A
16245  5C1B
16246  5C1C
16247  5C1D
16248  5C1E
16249  5C1F
16250  5C20
16251  5C21
16252  5C22
16253  5C23
16254  5C24
16255  5C25
16256  5C26
16257  5C27
16258  5C28
16259  5C29
16260  5C2A
16261  5C2B
16262  5C2C
16263  5C2D
16264  5C2E
16265  5C2F
16266  5C30
16267  5C31
16268  5C32
16269  5C33
16270  5C34
16271  5C35
16272  5C36
16273  5C37
16274  5C38
16275  5C39
16276  5C3A
16277  5C3B
16278  5C3C
16279  5C3D
16280  5C3E
16281  5C3F
16282  5C40
16283  5C41
16284  5C42
16285  5C43
16286  5C44
16287  5C45
16288  5C46
16289  5C47
16290  5C48
16291  5C49
16292  5C4A
16293  5C4B
16294  5C4C
16295  5C4D
16296  5C4E
16297  5C4F
16298  5C50
16299  5C51
16300  5C52
16301  5C53
16302  5C54
16303  5C55
16304  5C56
16305  5C57
16306  5C58
16307  5C59
16308  5C5A
16309  5C5B
16310  5C5C
16311  5C5D
16312  5C5E
16313  5C5F
16314  5C60
16315  5C61
16316  5C62
16317  5C63
16318  5C64
16319  5C65
16320  5C66
16321  5C67
16322  5C68
16323  5C69
16324  5C6A
16325  5C6B
16326  5C6C
16327  5C6D
16328  5C6E
16329  5C6F
16330  5C70
16331  5C71
16332  5C72
16333  5C73
16334  5C74
16335  5C75
16336  5C76
16337  5C77
16338  5C78
16339  5C79
16340  5C7A
16341  5C7B
16342  5C7C
16343  5C7D
16344  5C7E
16345  5C7F
16346  5C80
16347  5C81
16348  5C82
16349  5C83
16350  5C84
16351  5C85
16352  5C86
16353  5C87
16354  5C88
16355  5C89
16356  5C8A
16357  5C8B
16358  5C8C
16359  5C8D
16360  5C8E
16361  5C8F
16362  5C90
16363  5C91
16364  5C92
16365  5C93
16366  5C94
16367  5C95
16368  5C96
16369  5C97
16370  5C98
16371  5C99
16372  5C9A
16373  5C9B
16374  5C9C
16375  5C9D
16376  5C9E
16377  5C9F
16378  5CA0
16379  5CA1
16380  5CA2
16381  5CA3
16382  5CA4
16383  5CA5
16384  5CA6
16385  5CA7
16386  5CA8
16387  5CA9
16388  5CAA
16389  5CAB
16390  5CAC
16391  5CAD
16392  5CAE
16393  5CAF
16394  5CB0
16395  5CB1
16396  5CB2
16397  5CB3
16398  5CB4
16399  5CB5
16400  5CB6
16401  5CB7
16402  5CB8
16403  5CB9
16404  5CBA
16405  5CBB
16406  5CBC
16407  5CBD
16408  5CBE
16409  5CBF
16410  5CC0
16411  5CC1
16412  5CC2
16413  5CC3
16414  5CC4
16415  5CC5
16416  5CC6
16417  5CC7
16418  5CC8
16419  5CC9
16420  5CCA
16421  5CCB
16422  5CCC
16423  5CCD
16424  5CCE
16425  5CCF
16426  5CD0
16427  5CD1
16428  5CD2
16429  5CD3
16430  5CD4
16431  5CD5
16432  5CD6
16433  5CD7
16434  5CD8
16435  5CD9
16436  5CDA
16437  5CDB
16438  5CDC
16439  5CDD
16440  5CDE
16441  5CDF
16442  5CE0
16443  5CE1
16444  5CE2
16445  5CE3
16446  5CE4
16447  5CE5
16448  5CE6
16449  5CE7
16450  5CE8
16451  5CE9
16452  5CEA
16453  5CEB
16454  5CEC
16455  5CED
16456  5CEE
16457  5CEF
16458  5CF0
16459  5CF1
16460  5CF2
16461  5CF3
16462  5CF4
16463  5CF5
16464  5CF6
16465  5CF7
16466  5CF8
16467  5CF9
16468  5CFA
16469  5CFB
16470  5CFC
16471  5CFD
16472  5CFE
16473  5CFF
16474  5D00
16475  5D01
16476  5D02
16477  5D03
16478  5D04
16479  5D05
16480  5D06
16481  5D07
16482  5D08
16483  5D09
16484  5D0A
16485  5D0B
16486  5D0C
16487  5D0D
16488  5D0E
16489  5D0F
16490  5D10
16491  5D11
16492  5D12
16493  5D13
16494  5D14
16495  5D15
16496  5D16
16497  5D17
16498  5D18
16499  5D19
16500  5D1A
16501  5D1B
16502  5D1C
16503  5D1D
16504  5D1E
16505  5D1F
16506  5D20
16507  5D21
16508  5D22
16509  5D23
16510  5D24
16511  5D25
16512  5D26
16513  5D27
16514  5D28
16515  5D29
16516  5D2A
16517  5D2B
16518  5D2C
16519  5D2D
16520  5D2E
16521  5D2F
16522  5D30
16523  5D31
16524  5D32
16525  5D33
16526  5D34
16527  5D35
16528  5D36
16529  5D37
16530  5D38
16531  5D39
16532  5D3A
16533  5D3B
16534  5D3C
16535  5D3D
16536  5D3E
16537  5D3F
16538  5D40
16539  5D41
16540  5D42
16541  5D43
16542  5D44
16543  5D45
16544  5D46
16545  5D47
16546  5D48
16547  5D49
16548  5D4A
16549  5D4B
16550  5D4C
16551  5D4D
16552  5D4E
16553  5D4F
16554  5D50
16555  5D51
16556  5D52
16557  5D53
16558  5D54
16559  5D55
16560  5D56
16561  5D57
16562  5D58
16563  5D59
16564  5D5A
16565  5D5B
16566  5D5C
16567  5D5D
16568  5D5E
16569  5D5F
16570  5D60
16571  5D61
16572  5D62
16573  5D63
16574  5D64
16575  5D65
16576  5D66
16577  5D67
16578  5D68
16579  5D69
16580  5D6A
16581  5D6B
16582  5D6C
16583  5D6D
16584  5D6E
16585  5D6F
16586  5D70
16587  5D71
16588  5D72
16589  5D73
16590  5D74
16591  5D75
16592  5D76
16593  5D77
16594  5D78
16595  5D79
16596  5D7A
16597  5D7B
16598  5D7C
16599  5D7D
16600  5D7E
16601  5D7F
16602  5D80
16603  5D81
16604  5D82
16605  5D83
16606  5D84
16607  5D85
16608  5D86
16609  5D87
16610  5D88
16611  5D89
16612  5D8A
16613  5D8B
16614  5D8C
16615  5D8D
16616  5D8E
16617  5D8F
16618  5D90
16619  5D91
16620  5D92
16621  5D93
16622  5D94
16623  5D95
16624  5D96
16625  5D97
16626  5D98
16627  5D99
16628  5D9A
16629  5D9B
16630  5D9C
16631  5D9D
16632  5D9E
16633  5D9F
16634  5DA0
16635  5DA1
16636  5DA2
16637  5DA3
16638  5DA4
16639  5DA5
16640  5DA6
16641  5DA7
16642  5DA8
16643  5DA9
16644  5DAA
16645  5DAB
16646  5DAC
16647  5DAD
16648  5DAE
16649  5DAF
16650  5DB0
16651  5DB1
16652  5DB2
16653  5DB3
16654  5DB4
16655  5DB5
16656  5DB6
16657  5DB7
16658  5DB8
16659  5DB9
16660  5DBA
16661  5DBB
16662  5DBC
16663  5DBD
16664  5DBE
16665  5DBF
16666  5DC0
16667  5DC1
16668  5DC2
16669  5DC3
16670  5DC4
16671  5DC5
16672  5DC6
16673  5DC7
16674  5DC8
16675  5DC9
16676  5DCA
16677  5DCB
16678  5DCC
16679  5DCD
16680  5DCE
16681  5DCF
16682  5DD0
16683  5DD1
16684  5DD2
16685  5DD3
16686  5DD4
16687  5DD5
16688  5DD6
16689  5DD7
16690  5DD8
16691  5DD9
16692  5DDA
16693  5DDB
16694  5DDC
16695  5DDD
16696  5DDE
16697  5DDF
16698  5DE0
16699  5DE1
16700  5DE2
16701  5DE3
16702  5DE4
16703  5DE5
16704  5DE6
16705  5DE7
16706  5DE8
16707  5DE9
16708  5DEA
16709  5DEB
16710  5DEC
16711  5DED
16712  5DEE
16713  5DEF
16714  5DF0
16715  5DF1
16716  5DF2
16717  5DF3
16718  5DF4
16719  5DF5
16720  5DF6
16721  5DF7
16722  5DF8
16723  5DF9
16724  5DFA
16725  5DFB
16726  5DFC
16727  5DFD
16728  5DFE
16729  5DFF
16730  5E00
16731  5E01
16732  5E02
16733  5E03
16734  5E04
16735  5E05
16736  5E06
16737  5E07
16738  5E08
16739  5E09
16740  5E0A
16741  5E0B
16742  5E0C
16743  5E0D
16744  5E0E
16745  5E0F
16746  5E10
16747  5E11
16748  5E12
16749  5E13
16750  5E14
16751  5E15
16752  5E16
16753  5E17
16754  5E18
16755  5E19
16756  5E1A
16757  5E1B
16758  5E1C
16759  5E1D
16760  5E1E
16761  5E1F
16762  5E20
16763  5E21
16764  5E22
16765  5E23
16766  5E24
16767  5E25
16768  5E26
16769  5E27
16770  5E28
16771  5E29
16772  5E2A
16773  5E2B
16774  5E2C
16775  5E2D
16776  5E2E
16777  5E2F
16778  5E30
16779  5E31
16780  5E32
16781  5E33
16782  5E34
16783  5E35
16784  5E36
16785  5E37
16786  5E38
16787  5E39
16788  5E3A
16789  5E3B
16790  5E3C
16791  5E3D
16792  5E3E
16793  5E3F
16794  5E40
16795  5E41
16796  5E42
16797  5E43
16798  5E44
16799  5E45
16800  5E46
16801  5E47
16802  5E48
16803  5E49
16804  5E4A
16805  5E4B
16806  5E4C
16807  5E4D
16808  5E4E
16809  5E4F
16810  5E50
16811  5E51
16812  5E52
16813  5E53
16814  5E54
16815  5E55
16816  5E56
16817  5E57
16818  5E58
16819  5E59
16820  5E5A
16821  5E5B
16822  5E5C
16823  5E5D
16824  5E5E
16825  5E5F
16826  5E60
16827  5E61
16828  5E62
16829  5E63
16830  5E64
16831  5E65
16832  5E66
16833  5E67
16834  5E68
16835  5E69
16836  5E6A
16837  5E6B
16838  5E6C
16839  5E6D
16840  5E6E
16841  5E6F
16842  5E70
16843  5E71
16844  5E72
16845  5E73
16846  5E74
16847  5E75
16848  5E76
16849  5E77
16850  5E78
16851  5E79
16852  5E7A
16853  5E7B
16854  5E7C
16855  5E7D
16856  5E7E
16857  5E7F
16858  5E80
16859  5E81
16860  5E82
16861  5E83
16862  5E84
16863  5E85
16864  5E86
16865  5E87
16866  5E88
16867  5E89
16868  5E8A
16869  5E8B
16870  5E8C
16871  5E8D
16872  5E8E
16873  5E8F
16874  5E90
16875  5E91
16876  5E92
16877  5E93
16878  5E94
16879  5E95
16880  5E96
16881  5E97
16882  5E98
16883  5E99
16884  5E9A
16885  5E9B
16886  5E9C
16887  5E9D
16888  5E9E
16889  5E9F
16890  5EA0
16891  5EA1
16892  5EA2
16893  5EA3
16894  5EA4
16895  5EA5
16896  5EA6
16897  5EA7
16898  5EA8
16899  5EA9
16900  5EAA
16901  5EAB
16902  5EAC
16903  5EAD
16904  5EAE
16905  5EAF
16906  5EB0
16907  5EB1
16908  5EB2
16909  5EB3
16910  5EB4
16911  5EB5
16912  5EB6
16913  5EB7
16914  5EB8
16915  5EB9
16916  5EBA
16917  5EBB
16918  5EBC
16919  5EBD
16920  5EBE
16921  5EBF
16922  5EC0
16923  5EC1
16924  5EC2
16925  5EC3
16926  5EC4
16927  5EC5
16928  5EC6
16929  5EC7
16930  5EC8
16931  5EC9
16932  5ECA
16933  5ECB
16934  5ECC
16935  5ECD
16936  5ECE
16937  5ECF
16938  5ED0
16939  5ED1
16940  5ED2
16941  5ED3
16942  5ED4
16943  5ED5
16944  5ED6
16945  5ED7
16946  5ED8
16947  5ED9
16948  5EDA
16949  5EDB
16950  5EDC
16951  5EDD
16952  5EDE
16953  5EDF
16954  5EE0
16955  5EE1
16956  5EE2
16957  5EE3
16958  5EE4
16959  5EE5
16960  5EE6
16961  5EE7
16962  5EE8
16963  5EE9
16964  5EEA
16965  5EEB
16966  5EEC
16967  5EED
16968  5EEE
16969  5EEF
16970  5EF0
16971  5EF1
16972  5EF2
16973  5EF3
16974  5EF4
16975  5EF5
16976  5EF6
16977  5EF7
16978  5EF8
16979  5EF9
16980  5EFA
16981  5EFB
16982  5EFC
16983  5EFD
16984  5EFE
16985  5EFF
16986  5F00
16987  5F01
16988  5F02
16989  5F03
16990  5F04
16991  5F05
16992  5F06
16993  5F07
16994  5F08
16995  5F09
16996  5F0A
16997  5F0B
16998  5F0C
16999  5F0D
17000  5F0E
17001  5F0F
17002  5F10
17003  5F11
17004  5F12
17005  5F13
17006  5F14
17007  5F15
17008  5F16
17009  5F17
17010  5F18
17011  5F19
17012  5F1A
17013  5F1B
17014  5F1C
17015  5F1D
17016  5F1E
17017  5F1F
17018  5F20
17019  5F21
17020  5F22
17021  5F23
17022  5F24
17023  5F25
17024  5F26
17025  5F27
17026  5F28
17027  5F29
17028  5F2A
17029  5F2B
17030  5F2C
17031  5F2D
17032  5F2E
17033  5F2F
17034  5F30
17035  5F31
17036  5F32
17037  5F33
17038  5F34
17039  5F35
17040  5F36
17041  5F37
17042  5F38
17043  5F39
17044  5F3A
17045  5F3B
17046  5F3C
17047  5F3D
17048  5F3E
17049  5F3F
17050  5F40
17051  5F41
17052  5F42
17053  5F43
17054  5F44
17055  5F45
17056  5F46
17057  5F47
17058  5F48
17059  5F49
17060  5F4A
17061  5F4B
17062  5F4C
17063  5F4D
17064  5F4E
17065  5F4F
17066  5F50
17067  5F51
17068  5F52
17069  5F53
17070  5F54
17071  5F55
17072  5F56
17073  5F57
17074  5F58
17075  5F59
17076  5F5A
17077  5F5B
17078  5F5C
17079  5F5D
17080  5F5E
17081  5F5F
17082  5F60
17083  5F61
17084  5F62
17085  5F63
17086  5F64
17087  5F65
17088  5F66
17089  5F67
17090  5F68
17091  5F69
17092  5F6A
17093  5F6B
17094  5F6C
17095  5F6D
17096  5F6E
17097  5F6F
17098  5F70
17099  5F71
17100  5F72
17101  5F73
17102  5F74
17103  5F75
17104  5F76
17105  5F77
17106  5F78
17107  5F79
17108  5F7A
17109  5F7B
17110  5F7C
17111  5F7D
17112  5F7E
17113  5F7F
17114  5F80
17115  5F81
17116  5F82
17117  5F83
17118  5F84
17119  5F85
17120  5F86
17121  5F87
17122  5F88
17123  5F89
17124  5F8A
17125  5F8B
17126  5F8C
17127  5F8D
17128  5F8E
17129  5F8F
17130  5F90
17131  5F91
17132  5F92
17133  5F93
17134  5F94
17135  5F95
17136  5F96
17137  5F97
17138  5F98
17139  5F99
17140  5F9A
17141  5F9B
17142  5F9C
17143  5F9D
17144  5F9E
17145  5F9F
17146  5FA0
17147  5FA1
17148  5FA2
17149  5FA3
17150  5FA4
17151  5FA5
17152  5FA6
17153  5FA7
17154  5FA8
17155  5FA9
17156  5FAA
17157  5FAB
17158  5FAC
17159  5FAD
17160  5FAE
17161  5FAF
17162  5FB0
17163  5FB1
17164  5FB2
17165  5FB3
17166  5FB4
17167  5FB5
17168  5FB6
17169  5FB7
17170  5FB8
17171  5FB9
17172  5FBA
17173  5FBB
17174  5FBC
17175  5FBD
17176  5FBE
17177  5FBF
17178  5FC0
17179  5FC1
17180  5FC2
17181  5FC3
17182  5FC4
17183  5FC5
17184  5FC6
17185  5FC7
17186  5FC8
17187  5FC9
17188  5FCA
17189  5FCB
17190  5FCC
17191  5FCD
17192  5FCE
17193  5FCF
17194  5FD0
17195  5FD1
17196  5FD2
17197  5FD3
17198  5FD4
17199  5FD5
17200  5FD6
17201  5FD7
17202  5FD8
17203  5FD9
17204  5FDA
17205  5FDB
17206  5FDC
17207  5FDD
17208  5FDE
17209  5FDF
17210  5FE0
17211  5FE1
17212  5FE2
17213  5FE3
17214  5FE4
17215  5FE5
17216  5FE6
17217  5FE7
17218  5FE8
17219  5FE9
17220  5FEA
17221  5FEB
17222  5FEC
17223  5FED
17224  5FEE
17225  5FEF
17226  5FF0
17227  5FF1
17228  5FF2
17229  5FF3
17230  5FF4
17231  5FF5
17232  5FF6
17233  5FF7
17234  5FF8
17235  5FF9
17236  5FFA
17237  5FFB
17238  5FFC
17239  5FFD
17240  5FFE
17241  5FFF
17242  6000
17243  6001
17244  6002
17245  6003
17246  6004
17247  6005
17248  6006
17249  6007
17250  6008
17251  6009
17252  600A
17253  600B
17254  600C
17255  600D
17256  600E
17257  600F
17258  6010
17259  6011
17260  6012
17261  6013
17262  6014
17263  6015
17264  6016
17265  6017
17266  6018
17267  6019
17268  601A
17269  601B
17270  601C
17271  601D
17272  601E
17273  601F
17274  6020
17275  6021
17276  6022
17277  6023
17278  6024
17279  6025
17280  6026
17281  6027
17282  6028
17283  6029
17284  602A
17285  602B
17286  602C
17287  602D
17288  602E
17289  602F
17290  6030
17291  6031
17292  6032
17293  6033
17294  6034
17295  6035
17296  6036
17297  6037
17298  6038
17299  6039
17300  603A
17301  603B
17302  603C
17303  603D
17304  603E
17305  603F
17306  6040
17307  6041
17308  6042
17309  6043
17310  6044
17311  6045
17312  6046
17313  6047
17314  6048
17315  6049
17316  604A
17317  604B
17318  604C
17319  604D
17320  604E
17321  604F
17322  6050
17323  6051
17324  6052
17325  6053
17326  6054
17327  6055
17328  6056
17329  6057
17330  6058
17331  6059
17332  605A
17333  605B
17334  605C
17335  605D
17336  605E
17337  605F
17338  6060
17339  6061
17340  6062
17341  6063
17342  6064
17343  6065
17344  6066
17345  6067
17346  6068
17347  6069
17348  606A
17349  606B
17350  606C
17351  606D
17352  606E
17353  606F
17354  6070
17355  6071
17356  6072
17357  6073
17358  6074
17359  6075
17360  6076
17361  6077
17362  6078
17363  6079
17364  607A
17365  607B
17366  607C
17367  607D
17368  607E
17369  607F
17370  6080
17371  6081
17372  6082
17373  6083
17374  6084
17375  6085
17376  6086
17377  6087
17378  6088
17379  6089
17380  608A
17381  608B
17382  608C
17383  608D
17384  608E
17385  608F
17386  6090
17387  6091
17388  6092
17389  6093
17390  6094
17391  6095
17392  6096
17393  6097
17394  6098
17395  6099
17396  609A
17397  609B
17398  609C
17399  609D
17400  609E
17401  609F
17402  60A0
17403  60A1
17404  60A2
17405  60A3
17406  60A4
17407  60A5
17408  60A6
17409  60A7
17410  60A8
17411  60A9
17412  60AA
17413  60AB
17414  60AC
17415  60AD
17416  60AE
17417  60AF
17418  60B0
17419  60B1
17420  60B2
17421  60B3
17422  60B4
17423  60B5
17424  60B6
17425  60B7
17426  60B8
17427  60B9
17428  60BA
17429  60BB
17430  60BC
17431  60BD
17432  60BE
17433  60BF
17434  60C0
17435  60C1
17436  60C2
17437  60C3
17438  60C4
17439  60C5
17440  60C6
17441  60C7
17442  60C8
17443  60C9
17444  60CA
17445  60CB
17446  60CC
17447  60CD
17448  60CE
17449  60CF
17450  60D0
17451  60D1
17452  60D2
17453  60D3
17454  60D4
17455  60D5
17456  60D6
17457  60D7
17458  60D8
17459  60D9
17460  60DA
17461  60DB
17462  60DC
17463  60DD
17464  60DE
17465  60DF
17466  60E0
17467  60E1
17468  60E2
17469  60E3
17470  60E4
17471  60E5
17472  60E6
17473  60E7
17474  60E8
17475  60E9
17476  60EA
17477  60EB
17478  60EC
17479  60ED
17480  60EE
17481  60EF
17482  60F0
17483  60F1
17484  60F2
17485  60F3
17486  60F4
17487  60F5
17488  60F6
17489  60F7
17490  60F8
17491  60F9
17492  60FA
17493  60FB
17494  60FC
17495  60FD
17496  60FE
17497  60FF
17498  6100
17499  6101
17500  6102
17501  6103
17502  6104
17503  6105
17504  6106
17505  6107
17506  6108
17507  6109
17508  610A
17509  610B
17510  610C
17511  610D
17512  610E
17513  610F
17514  6110
17515  6111
17516  6112
17517  6113
17518  6114
17519  6115
17520  6116
17521  6117
17522  6118
17523  6119
17524  611A
17525  611B
17526  611C
17527  611D
17528  611E
17529  611F
17530  6120
17531  6121
17532  6122
17533  6123
17534  6124
17535  6125
17536  6126
17537  6127
17538  6128
17539  6129
17540  612A
17541  612B
17542  612C
17543  612D
17544  612E
17545  612F
17546  6130
17547  6131
17548  6132
17549  6133
17550  6134
17551  6135
17552  6136
17553  6137
17554  6138
17555  6139
17556  613A
17557  613B
17558  613C
17559  613D
17560  613E
17561  613F
17562  6140
17563  6141
17564  6142
17565  6143
17566  6144
17567  6145
17568  6146
17569  6147
17570  6148
17571  6149
17572  614A
17573  614B
17574  614C
17575  614D
17576  614E
17577  614F
17578  6150
17579  6151
17580  6152
17581  6153
17582  6154
17583  6155
17584  6156
17585  6157
17586  6158
17587  6159
17588  615A
17589  615B
17590  615C
17591  615D
17592  615E
17593  615F
17594  6160
17595  6161
17596  6162
17597  6163
17598  6164
17599  6165
17600  6166
17601  6167
17602  6168
17603  6169
17604  616A
17605  616B
17606  616C
17607  616D
17608  616E
17609  616F
17610  6170
17611  6171
17612  6172
17613  6173
17614  6174
17615  6175
17616  6176
17617  6177
17618  6178
17619  6179
17620  617A
17621  617B
17622  617C
17623  617D
17624  617E
17625  617F
17626  6180
17627  6181
17628  6182
17629  6183
17630  6184
17631  6185
17632  6186
17633  6187
17634  6188
17635  6189
17636  618A
17637  618B
17638  618C
17639  618D
17640  618E
17641  618F
17642  6190
17643  6191
17644  6192
17645  6193
17646  6194
17647  6195
17648  6196
17649  6197
17650  6198
17651  6199
17652  619A
17653  619B
17654  619C
17655  619D
17656  619E
17657  619F
17658  61A0
17659  61A1
17660  61A2
17661  61A3
17662  61A4
17663  61A5
17664  61A6
17665  61A7
17666  61A8
17667  61A9
17668  61AA
17669  61AB
17670  61AC
17671  61AD
17672  61AE
17673  61AF
17674  61B0
17675  61B1
17676  61B2
17677  61B3
17678  61B4
17679  61B5
17680  61B6
17681  61B7
17682  61B8
17683  61B9
17684  61BA
17685  61BB
17686  61BC
17687  61BD
17688  61BE
17689  61BF
17690  61C0
17691  61C1
17692  61C2
17693  61C3
17694  61C4
17695  61C5
17696  61C6
17697  61C7
17698  61C8
17699  61C9
17700  61CA
17701  61CB
17702  61CC
17703  61CD
17704  61CE
17705  61CF
17706  61D0
17707  61D1
17708  61D2
17709  61D3
17710  61D4
17711  61D5
17712  61D6
17713  61D7
17714  61D8
17715  61D9
17716  61DA
17717  61DB
17718  61DC
17719  61DD
17720  61DE
17721  61DF
17722  61E0
17723  61E1
17724  61E2
17725  61E3
17726  61E4
17727  61E5
17728  61E6
17729  61E7
17730  61E8
17731  61E9
17732  61EA
17733  61EB
17734  61EC
17735  61ED
17736  61EE
17737  61EF
17738  61F0
17739  61F1
17740  61F2
17741  61F3
17742  61F4
17743  61F5
17744  61F6
17745  61F7
17746  61F8
17747  61F9
17748  61FA
17749  61FB
17750  61FC
17751  61FD
17752  61FE
17753  61FF
17754  6200
17755  6201
17756  6202
17757  6203
17758  6204
17759  6205
17760  6206
17761  6207
17762  6208
17763  6209
17764  620A
17765  620B
17766  620C
17767  620D
17768  620E
17769  620F
17770  6210
17771  6211
17772  6212
17773  6213
17774  6214
17775  6215
17776  6216
17777  6217
17778  6218
17779  6219
17780  621A
17781  621B
17782  621C
17783  621D
17784  621E
17785  621F
17786  6220
17787  6221
17788  6222
17789  6223
17790  6224
17791  6225
17792  6226
17793  6227
17794  6228
17795  6229
17796  622A
17797  622B
17798  622C
17799  622D
17800  622E
17801  622F
17802  6230
17803  6231
17804  6232
17805  6233
17806  6234
17807  6235
17808  6236
17809  6237
17810  6238
17811  6239
17812  623A
17813  623B
17814  623C
17815  623D
17816  623E
17817  623F
17818  6240
17819  6241
17820  6242
17821  6243
17822  6244
17823  6245
17824  6246
17825  6247
17826  6248
17827  6249
17828  624A
17829  624B
17830  624C
17831  624D
17832  624E
17833  624F
17834  6250
17835  6251
17836  6252
17837  6253
17838  6254
17839  6255
17840  6256
17841  6257
17842  6258
17843  6259
17844  625A
17845  625B
17846  625C
17847  625D
17848  625E
17849  625F
17850  6260
17851  6261
17852  6262
17853  6263
17854  6264
17855  6265
17856  6266
17857  6267
17858  6268
17859  6269
17860  626A
17861  626B
17862  626C
17863  626D
17864  626E
17865  626F
17866  6270
17867  6271
17868  6272
17869  6273
17870  6274
17871  6275
17872  6276
17873  6277
17874  6278
17875  6279
17876  627A
17877  627B
17878  627C
17879  627D
17880  627E
17881  627F
17882  6280
17883  6281
17884  6282
17885  6283
17886  6284
17887  6285
17888  6286
17889  6287
17890  6288
17891  6289
17892  628A
17893  628B
17894  628C
17895  628D
17896  628E
17897  628F
17898  6290
17899  6291
17900  6292
17901  6293
17902  6294
17903  6295
17904  6296
17905  6297
17906  6298
17907  6299
17908  629A
17909  629B
17910  629C
17911  629D
17912  629E
17913  629F
17914  62A0
17915  62A1
17916  62A2
17917  62A3
17918  62A4
17919  62A5
17920  62A6
17921  62A7
17922  62A8
17923  62A9
17924  62AA
17925  62AB
17926  62AC
17927  62AD
17928  62AE
17929  62AF
17930  62B0
17931  62B1
17932  62B2
17933  62B3
17934  62B4
17935  62B5
17936  62B6
17937  62B7
17938  62B8
17939  62B9
17940  62BA
17941  62BB
17942  62BC
17943  62BD
17944  62BE
17945  62BF
17946  62C0
17947  62C1
17948  62C2
17949  62C3
17950  62C4
17951  62C5
17952  62C6
17953  62C7
17954  62C8
17955  62C9
17956  62CA
17957  62CB
17958  62CC
17959  62CD
17960  62CE
17961  62CF
17962  62D0
17963  62D1
17964  62D2
17965  62D3
17966  62D4
17967  62D5
17968  62D6
17969  62D7
17970  62D8
17971  62D9
17972  62DA
17973  62DB
17974  62DC
17975  62DD
17976  62DE
17977  62DF
17978  62E0
17979  62E1
17980  62E2
17981  62E3
17982  62E4
17983  62E5
17984  62E6
17985  62E7
17986  62E8
17987  62E9
17988  62EA
17989  62EB
17990  62EC
17991  62ED
17992  62EE
17993  62EF
17994  62F0
17995  62F1
17996  62F2
17997  62F3
17998  62F4
17999  62F5
18000  62F6
18001  62F7
18002  62F8
18003  62F9
18004  62FA
18005  62FB
18006  62FC
18007  62FD
18008  62FE
18009  62FF
18010  6300
18011  6301
18012  6302
18013  6303
18014  6304
18015  6305
18016  6306
18017  6307
18018  6308
18019  6309
18020  630A
18021  630B
18022  630C
18023  630D
18024  630E
18025  630F
18026  6310
18027  6311
18028  6312
18029  6313
18030  6314
18031  6315
18032  6316
18033  6317
18034  6318
18035  6319
18036  631A
18037  631B
18038  631C
18039  631D
18040  631E
18041  631F
18042  6320
18043  6321
18044  6322
18045  6323
18046  6324
18047  6325
18048  6326
18049  6327
18050  6328
18051  6329
18052  632A
18053  632B
18054  632C
18055  632D
18056  632E
18057  632F
18058  6330
18059  6331
18060  6332
18061  6333
18062  6334
18063  6335
18064  6336
18065  6337
18066  6338
18067  6339
18068  633A
18069  633B
18070  633C
18071  633D
18072  633E
18073  633F
18074  6340
18075  6341
18076  6342
18077  6343
18078  6344
18079  6345
18080  6346
18081  6347
18082  6348
18083  6349
18084  634A
18085  634B
18086  634C
18087  634D
18088  634E
18089  634F
18090  6350
18091  6351
18092  6352
18093  6353
18094  6354
18095  6355
18096  6356
18097  6357
18098  6358
18099  6359
18100  635A
18101  635B
18102  635C
18103  635D
18104  635E
18105  635F
18106  6360
18107  6361
18108  6362
18109  6363
18110  6364
18111  6365
18112  6366
18113  6367
18114  6368
18115  6369
18116  636A
18117  636B
18118  636C
18119  636D
18120  636E
18121  636F
18122  6370
18123  6371
18124  6372
18125  6373
18126  6374
18127  6375
18128  6376
18129  6377
18130  6378
18131  6379
18132  637A
18133  637B
18134  637C
18135  637D
18136  637E
18137  637F
18138  6380
18139  6381
18140  6382
18141  6383
18142  6384
18143  6385
18144  6386
18145  6387
18146  6388
18147  6389
18148  638A
18149  638B
18150  638C
18151  638D
18152  638E
18153  638F
18154  6390
18155  6391
18156  6392
18157  6393
18158  6394
18159  6395
18160  6396
18161  6397
18162  6398
18163  6399
18164  639A
18165  639B
18166  639C
18167  639D
18168  639E
18169  639F
18170  63A0
18171  63A1
18172  63A2
18173  63A3
18174  63A4
18175  63A5
18176  63A6
18177  63A7
18178  63A8
18179  63A9
18180  63AA
18181  63AB
18182  63AC
18183  63AD
18184  63AE
18185  63AF
18186  63B0
18187  63B1
18188  63B2
18189  63B3
18190  63B4
18191  63B5
18192  63B6
18193  63B7
18194  63B8
18195  63B9
18196  63BA
18197  63BB
18198  63BC
18199  63BD
18200  63BE
18201  63BF
18202  63C0
18203  63C1
18204  63C2
18205  63C3
18206  63C4
18207  63C5
18208  63C6
18209  63C7
18210  63C8
18211  63C9
18212  63CA
18213  63CB
18214  63CC
18215  63CD
18216  63CE
18217  63CF
18218  63D0
18219  63D1
18220  63D2
18221  63D3
18222  63D4
18223  63D5
18224  63D6
18225  63D7
18226  63D8
18227  63D9
18228  63DA
18229  63DB
18230  63DC
18231  63DD
18232  63DE
18233  63DF
18234  63E0
18235  63E1
18236  63E2
18237  63E3
18238  63E4
18239  63E5
18240  63E6
18241  63E7
18242  63E8
18243  63E9
18244  63EA
18245  63EB
18246  63EC
18247  63ED
18248  63EE
18249  63EF
18250  63F0
18251  63F1
18252  63F2
18253  63F3
18254  63F4
18255  63F5
18256  63F6
18257  63F7
18258  63F8
18259  63F9
18260  63FA
18261  63FB
18262  63FC
18263  63FD
18264  63FE
18265  63FF
18266  6400
18267  6401
18268  6402
18269  6403
18270  6404
18271  6405
18272  6406
18273  6407
18274  6408
18275  6409
18276  640A
18277  640B
18278  640C
18279  640D
18280  640E
18281  640F
18282  6410
18283  6411
18284  6412
18285  6413
18286  6414
18287  6415
18288  6416
18289  6417
18290  6418
18291  6419
18292  641A
18293  641B
18294  641C
18295  641D
18296  641E
18297  641F
18298  6420
18299  6421
18300  6422
18301  6423
18302  6424
18303  6425
18304  6426
18305  6427
18306  6428
18307  6429
18308  642A
18309  642B
18310  642C
18311  642D
18312  642E
18313  642F
18314  6430
18315  6431
18316  6432
18317  6433
18318  6434
18319  6435
18320  6436
18321  6437
18322  6438
18323  6439
18324  643A
18325  643B
18326  643C
18327  643D
18328  643E
18329  643F
18330  6440
18331  6441
18332  6442
18333  6443
18334  6444
18335  6445
18336  6446
18337  6447
18338  6448
18339  6449
18340  644A
18341  644B
18342  644C
18343  644D
18344  644E
18345  644F
18346  6450
18347  6451
18348  6452
18349  6453
18350  6454
18351  6455
18352  6456
18353  6457
18354  6458
18355  6459
18356  645A
18357  645B
18358  645C
18359  645D
18360  645E
18361  645F
18362  6460
18363  6461
18364  6462
18365  6463
18366  6464
18367  6465
18368  6466
18369  6467
18370  6468
18371  6469
18372  646A
18373  646B
18374  646C
18375  646D
18376  646E
18377  646F
18378  6470
18379  6471
18380  6472
18381  6473
18382  6474
18383  6475
18384  6476
18385  6477
18386  6478
18387  6479
18388  647A
18389  647B
18390  647C
18391  647D
18392  647E
18393  647F
18394  6480
18395  6481
18396  6482
18397  6483
18398  6484
18399  6485
18400  6486
18401  6487
18402  6488
18403  6489
18404  648A
18405  648B
18406  648C
18407  648D
18408  648E
18409  648F
18410  6490
18411  6491
18412  6492
18413  6493
18414  6494
18415  6495
18416  6496
18417  6497
18418  6498
18419  6499
18420  649A
18421  649B
18422  649C
18423  649D
18424  649E
18425  649F
18426  64A0
18427  64A1
18428  64A2
18429  64A3
18430  64A4
18431  64A5
18432  64A6
18433  64A7
18434  64A8
18435  64A9
18436  64AA
18437  64AB
18438  64AC
18439  64AD
18440  64AE
18441  64AF
18442  64B0
18443  64B1
18444  64B2
18445  64B3
18446  64B4
18447  64B5
18448  64B6
18449  64B7
18450  64B8
18451  64B9
18452  64BA
18453  64BB
18454  64BC
18455  64BD
18456  64BE
18457  64BF
18458  64C0
18459  64C1
18460  64C2
18461  64C3
18462  64C4
18463  64C5
18464  64C6
18465  64C7
18466  64C8
18467  64C9
18468  64CA
18469  64CB
18470  64CC
18471  64CD
18472  64CE
18473  64CF
18474  64D0
18475  64D1
18476  64D2
18477  64D3
18478  64D4
18479  64D5
18480  64D6
18481  64D7
18482  64D8
18483  64D9
18484  64DA
18485  64DB
18486  64DC
18487  64DD
18488  64DE
18489  64DF
18490  64E0
18491  64E1
18492  64E2
18493  64E3
18494  64E4
18495  64E5
18496  64E6
18497  64E7
18498  64E8
18499  64E9
18500  64EA
18501  64EB
18502  64EC
18503  64ED
18504  64EE
18505  64EF
18506  64F0
18507  64F1
18508  64F2
18509  64F3
18510  64F4
18511  64F5
18512  64F6
18513  64F7
18514  64F8
18515  64F9
18516  64FA
18517  64FB
18518  64FC
18519  64FD
18520  64FE
18521  64FF
18522  6500
18523  6501
18524  6502
18525  6503
18526  6504
18527  6505
18528  6506
18529  6507
18530  6508
18531  6509
18532  650A
18533  650B
18534  650C
18535  650D
18536  650E
18537  650F
18538  6510
18539  6511
18540  6512
18541  6513
18542  6514
18543  6515
18544  6516
18545  6517
18546  6518
18547  6519
18548  651A
18549  651B
18550  651C
18551  651D
18552  651E
18553  651F
18554  6520
18555  6521
18556  6522
18557  6523
18558  6524
18559  6525
18560  6526
18561  6527
18562  6528
18563  6529
18564  652A
18565  652B
18566  652C
18567  652D
18568  652E
18569  652F
18570  6530
18571  6531
18572  6532
18573  6533
18574  6534
18575  6535
18576  6536
18577  6537
18578  6538
18579  6539
18580  653A
18581  653B
18582  653C
18583  653D
18584  653E
18585  653F
18586  6540
18587  6541
18588  6542
18589  6543
18590  6544
18591  6545
18592  6546
18593  6547
18594  6548
18595  6549
18596  654A
18597  654B
18598  654C
18599  654D
18600  654E
18601  654F
18602  6550
18603  6551
18604  6552
18605  6553
18606  6554
18607  6555
18608  6556
18609  6557
18610  6558
18611  6559
18612  655A
18613  655B
18614  655C
18615  655D
18616  655E
18617  655F
18618  6560
18619  6561
18620  6562
18621  6563
18622  6564
18623  6565
18624  6566
18625  6567
18626  6568
18627  6569
18628  656A
18629  656B
18630  656C
18631  656D
18632  656E
18633  656F
18634  6570
18635  6571
18636  6572
18637  6573
18638  6574
18639  6575
18640  6576
18641  6577
18642  6578
18643  6579
18644  657A
18645  657B
18646  657C
18647  657D
18648  657E
18649  657F
18650  6580
18651  6581
18652  6582
18653  6583
18654  6584
18655  6585
18656  6586
18657  6587
18658  6588
18659  6589
18660  658A
18661  658B
18662  658C
18663  658D
18664  658E
18665  658F
18666  6590
18667  6591
18668  6592
18669  6593
18670  6594
18671  6595
18672  6596
18673  6597
18674  6598
18675  6599
18676  659A
18677  659B
18678  659C
18679  659D
18680  659E
18681  659F
18682  65A0
18683  65A1
18684  65A2
18685  65A3
18686  65A4
18687  65A5
18688  65A6
18689  65A7
18690  65A8
18691  65A9
18692  65AA
18693  65AB
18694  65AC
18695  65AD
18696  65AE
18697  65AF
18698  65B0
18699  65B1
18700  65B2
18701  65B3
18702  65B4
18703  65B5
18704  65B6
18705  65B7
18706  65B8
18707  65B9
18708  65BA
18709  65BB
18710  65BC
18711  65BD
18712  65BE
18713  65BF
18714  65C0
18715  65C1
18716  65C2
18717  65C3
18718  65C4
18719  65C5
18720  65C6
18721  65C7
18722  65C8
18723  65C9
18724  65CA
18725  65CB
18726  65CC
18727  65CD
18728  65CE
18729  65CF
18730  65D0
18731  65D1
18732  65D2
18733  65D3
18734  65D4
18735  65D5
18736  65D6
18737  65D7
18738  65D8
18739  65D9
18740  65DA
18741  65DB
18742  65DC
18743  65DD
18744  65DE
18745  65DF
18746  65E0
18747  65E1
18748  65E2
18749  65E3
18750  65E4
18751  65E5
18752  65E6
18753  65E7
18754  65E8
18755  65E9
018756  000671        
018757  000672  var hFonts[51] ;
018758  000673  var stringsCV[51] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
18759  335E
18760  335F
18761  3360
18762  3361
18763  3362
18764  3363
18765  3364
18766  3365
18767  3366
18768  3367
18769  3368
18770  3369
18771  336A
18772  336B
18773  336C
18774  336D
18775  336E
18776  336F
18777  3370
18778  3371
18779  3372
18780  3373
18781  3374
18782  3375
18783  3376
18784  3377
18785  3378
18786  3379
18787  337A
18788  337B
18789  337C
18790  337D
18791  337E
18792  337F
18793  3380
18794  3381
18795  3382
18796  3383
18797  3384
18798  3385
18799  3386
18800  3387
18801  3388
18802  3389
18803  338A
18804  338B
18805  338C
18806  338D
18807  338E
18808  338F
18809  3390
18810  3391
18811  3392
18812  3393
18813  3394
18814  3395
18815  3396
18816  3397
18817  3398
18818  3399
18819  339A
18820  339B
18821  339C
18822  339D
18823  339E
18824  339F
18825  33A0
18826  33A1
18827  33A2
18828  33A3
18829  33A4
18830  33A5
18831  33A6
18832  33A7
18833  33A8
18834  33A9
18835  33AA
18836  33AB
18837  33AC
18838  33AD
18839  33AE
18840  33AF
18841  33B0
18842  33B1
18843  33B2
18844  33B3
18845  33B4
18846  33B5
18847  33B6
18848  33B7
18849  33B8
18850  33B9
18851  33BA
18852  33BB
18853  33BC
18854  33BD
18855  33BE
18856  33BF
18857  33C0
18858  33C1
18859  33C2
18860  33C3
018861  000674  // Start P2.inc
018862  000675  var oObjects[MaxTotObjects+1] ;                 // address of objects
018863  000676  var CurrentForm ;
018864  000677  var TouchXpos, TouchYpos ;
018865  000678  var InputType, TouchState, CurInputData, pInputIndex ;
018866  000679  var comRX[40], cmd[CMDLenMAX] ;
018867  000680        
018868  000681  var InputCS, OutputCS ;
018869  000682        
018870  000683        
018871  000684        
018872  000685  func seroutCS(var op)
018873  000686      serout(op) ;
018874  000687      OutputCS ^= op ;
018875  000688  endfunc
018876  000689        
018877  000690  func nak0()
018878  000691      serout(NAK) ;
018879  000692      InputCS := 0 ;
018880  000693  endfunc
018881  000694        
018882  000695  func seroutOcs()
018883  000696      serout(OutputCS) ;
018884  000697      OutputCS := 0 ;
018885  000698  endfunc
018886  000699        
018887  000700  func SendReport(var id, var objt, var objn, var val)
018888  000701      seroutCS(id) ;
018889  000702      seroutCS(objt) ;
018890  000703      seroutCS(objn) ;
018891  000704      seroutCS(val >> 8) ; // first 8 bits
018892  000705      seroutCS(val) ;
018893  000706      seroutOcs() ;
018894  000707  endfunc
018895  000708        
018896  000709        
018897  000710  func ReadObject(var ObjectType, var ObjectIdx)
018898  000711      var j, k, Objects ;
018899  000712      Objects := *(oObjects+ObjectType) ;
018900  000713        
018901  000714      j := 2 + ObjectIdx * 2 + Objects ;
018902  000715       if (ObjectType == tForm)
018903  000716          k := CurrentForm ;
018904  000717      else if (ObjectType == tStrings)
018905  000718          k := stringsCV[ObjectIdx];
018906  000719          else
018907  000720          k := img_GetWord(hndl, *j, IMAGE_INDEX);
018908  000721          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
018909  000722                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
018910  000723      endif
018911  000724      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
018912  000725  endfunc
018913  000726        
018914  000727        
018915  000728  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
018916  000729      var i, j, k, Objects ;
018917  000730      ObjectType &= 0x3f ;
018918  000731      if (ObjectType == tForm)
018919  000732          ActivateForm(ObjectIdx) ;
018920  000733      else
018921  000734          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
018922  000735          i := *(Objects) ;
018923  000736          switch (ObjectType)
018924  000737              case tUserButton :
018925  000738                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
018926  000739                  break ;
018927  000740              default : j := -1 ;
018928  000741          endswitch
018929  000742          if (j != -1)
018930  000743              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
018931  000744              NewVal := NewVal << 1 ;
018932  000745              if (OVF())      // button group index change
018933  000746                  if (*(j+InputData+Ofs_IPD_P1))
018934  000747                      k &= 1 ;    // mask off old group index for momentary
018935  000748                  else
018936  000749                      k &= 3 ;    // mask off old group index for toggle
018937  000750                  endif
018938  000751              else            // normal set
018939  000752                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
018940  000753                  k &= 0xfffc ;    // retain only group index for state set
018941  000754              endif
018942  000755              NewVal |= k ;
018943  000756          endif
018944  000757           if (ObjectType == tStrings)
018945  000758              PrintStrings(ObjectIdx, NewVal, 0);
018946  000759          else
018947  000760              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
018948  000761              img_Show(hndl, i) ; // will only display if form is current
018949  000762          endif
018950  000763      endif
018951  000764  endfunc
018952  000765        
018953  000766  func TurnOffButtons(var group)
018954  000767      var j, k, l;
018955  000768      for (j := 0; j < nInputs; j++)
018956  000769          k := j*IPDatasize ;
018957  000770          if (*(InputData+k+Ofs_IPD_P2) == group)
018958  000771              l := -1 ;
018959  000772               if (*(InputData+k) == tUserButton)
018960  000773                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
018961  000774                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
018962  000775                  img_Show(hndl, l);      // only shows on current form
018963  000776              endif
018964  000777          endif
018965  000778      next
018966  000779  endfunc
018967  000780        
018968  000781        
018969  000782        
018970  000783        
018971  000784  func ActivateForm(var newform)
018972  000785      var i, j, *p ;
018973  000786        
018974  000787      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
018975  000788          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
018976  000789              if (img_GetWord(hndl, i, IMAGE_TAG))
018977  000790                  img_Disable(hndl,i) ;
018978  000791              endif
018979  000792          next
018980  000793      endif
018981  000794      CurrentForm := newform ;
018982  000795      // display newform image or clear to image color
018983  000796      if (FormBGcolors[CurrentForm] != ColorBGimage)
018984  000797          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
018985  000798          gfx_Cls() ;
018986  000799          DoGFXObjects() ;                                    // display GFX 'widgets'
018987  000800      endif
018988  000801        
018989  000802      // enable inputs
018990  000803      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
018991  000804          j := img_GetWord(hndl, i, IMAGE_TAG) ;
018992  000805          if (j)
018993  000806              j-- ;
018994  000807              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
018995  000808              //if (j != tKeyboard)
018996  000809              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
018997  000810                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
018998  000811              endif
018999  000812              img_Show(hndl,i) ; // show initialy, if required
019000  000813              if (j == tForm)
019001  000814                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
019002  000815              endif
019003  000816          endif
019004  000817      next
019005  000818      for (i := 0; i < nStrings; i++)
019006  000819          if (stringsCV[i] != -1)
019007  000820              WriteObject(tStrings, i, stringsCV[i]) ;
019008  000821          endif
019009  000822      next
019010  000823        
019011  000824  endfunc
019012  000825        
019013  000826  func UpdateObjects(var newval)
019014  000827      var IPidx, otherOBJ ;
019015  000828      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
019016  000829        
019017  000830          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
019018  000831              img_Show(hndl, *(pInputIndex));      // only shows on current form
019019  000832          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
019020  000833              if (*(CurInputData+Ofs_IPD_P1))
019021  000834                  newval &= 1;
019022  000835              else
019023  000836                  newval &= 3;
019024  000837              endif
019025  000838              if (newval > 1) newval := 1;
019026  000839          endif
019027  000840          IPidx := *(CurInputData+TouchState) ;
019028  000841          while(IPidx != 0)
019029  000842              otherOBJ := IPidx + InputData;
019030  000843              if (*(otherOBJ) == OT_REPORT)
019031  000844          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
019032  000845              else if (*(otherOBJ) == OT_MAGIC)
019033  000846                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
019034  000847                  IPidx(newval) ;
019035  000848              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
019036  000849                  if (*(otherOBJ) == OT_ACTIVATE)
019037  000850                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
019038  000851                      InputType := tForm ;
019039  000852                  else if (*(otherOBJ) == OT_SETCONST)
019040  000853                      newval := *(otherOBJ+Ofs_IPD_P3) ;
019041  000854                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019042  000855                  else if (*(otherOBJ) == OT_SETANOTHER)
019043  000856                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019044  000857                  else if (*(otherOBJ) == OT_PREVFRAME)
019045  000858                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
019046  000859                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
019047  000860                      endif
019048  000861                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019049  000862                  else if (*(otherOBJ) == OT_NEXTFRAME)
019050  000863                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
019051  000864                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
019052  000865                      endif
019053  000866                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019054  000867                  else if (*(otherOBJ) == OT_PREVSTRING)
019055  000868                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
019056  000869                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
019057  000870                      endif
019058  000871                  else if (*(otherOBJ) == OT_NEXTSTRING)
019059  000872                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
019060  000873                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
019061  000874                      endif
019062  000875                  endif
019063  000876              endif
019064  000877              IPidx := *(otherOBJ+TouchState) ;
019065  000878          wend
019066  000879      endif
019067  000880  endfunc
019068  000881        
019069  000882  // End P2.inc
019070  000883  func DoGFXObjects()
019071  000884  endfunc
019072  000885        
019073  000886  // Start P3.inc
019074  000887  func main()
019075  000888      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
019076  000889        
019077  000890      putstr("Mounting...\n");
019078  000891      if (!(file_Mount()))
019079  000892          while(!(file_Mount()))
019080  000893              putstr("Drive not mounted...");
019081  000894              pause(200);
019082  000895              gfx_Cls();
019083  000896              pause(200);
019084  000897          wend
019085  000898      endif
019086  000899  //    gfx_MoveTo(0, 0);
019087  000900  //    print(mem_Heap()," ") ;
019088  000901  //    gfx_TransparentColour(0x0020);
019089  000902  //    gfx_Transparency(ON);
019090  000903        
019091  000904      gfx_ScreenMode(LANDSCAPE) ;
019092  000905        
019093  000906      // open image control
019094  000907      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
019095  000908        
019096  000909      // init 'constants'
019097  000910  // End P3.inc
019098  000911        
019099  000912      oObjects[tDipSwitch] := oDipSwitchs ;
019100  000913      oObjects[tKnob] := oKnobs ;
019101  000914      oObjects[tRockerSwitch] := oRockerSwitchs ;
019102  000915      oObjects[tRotarySwitch] := oRotarySwitchs ;
019103  000916      oObjects[tGSlider] := oGSliders ;
019104  000917      oObjects[tTrackbar] := oTrackbars ;
019105  000918      oObjects[tWinButton] := oWinButtons ;
019106  000919      oObjects[tAngularmeter] := oAngularmeters ;
019107  000920      oObjects[tCoolgauge] := oCoolgauges ;
019108  000921      oObjects[tCustomdigits] := oCustomdigitss ;
019109  000922      oObjects[tForm] := oForms ;
019110  000923      oObjects[tGauge] := oGauges ;
019111  000924      oObjects[tImage] := oImages ;
019112  000925      oObjects[tKeyboard] := oKeyboards ;
019113  000926      oObjects[tLed] := oLeds ;
019114  000927      oObjects[tLeddigits] := oLeddigitss ;
019115  000928      oObjects[tMeter] := oMeters ;
019116  000929      oObjects[tStrings] := oStringss ;
019117  000930      oObjects[tThermometer] := oThermometers ;
019118  000931      oObjects[tUserled] := oUserleds ;
019119  000932      oObjects[tVideo] := oVideos ;
019120  000933      oObjects[tStaticText] := oStaticTexts ;
019121  000934      oObjects[tSounds] := oSoundss ;
019122  000935      oObjects[tTimer] := oTimers ;
019123  000936      oObjects[tSpectrum] := oSpectrums ;
019124  000937      oObjects[tTank] := oTanks ;
019125  000938      oObjects[tUserImages] := oUserImagess ;
019126  000939      oObjects[tPinOutput] := oPinOutputs ;
019127  000940      oObjects[tPinInput] := oPinInputs ;
019128  000941      oObjects[t4Dbutton] := o4Dbuttons ;
019129  000942      oObjects[tAniButton] := oAniButtons ;
019130  000943      oObjects[tColorPicker] := oColorPickers ;
019131  000944      oObjects[tUserButton] := oUserButtons ;
019132  000945      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
019133  000946      hFonts[2] := file_LoadImageControl("BCN3D_~1.d03", "BCN3D_~1.g03", 1)  ;
019134  000947      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
019135  000948      hFonts[5] := file_LoadImageControl("BCN3D_~1.d05", "BCN3D_~1.g05", 1)  ;
019136  000949      hFonts[28] := file_LoadImageControl("BCN3D_~1.d06", "BCN3D_~1.g06", 1)  ;
019137  000950      hFonts[40] := file_LoadImageControl("BCN3D_~1.d04", "BCN3D_~1.g04", 1)  ;
019138  000951      hFonts[46] := file_LoadImageControl("BCN3D_~1.d07", "BCN3D_~1.g07", 1)  ;
019139  000952      hFonts[0] := hFonts[2] ;
019140  000953      hFonts[4] := hFonts[2] ;
019141  000954      hFonts[6] := hFonts[2] ;
019142  000955      hFonts[7] := hFonts[1] ;
019143  000956      hFonts[8] := hFonts[1] ;
019144  000957      hFonts[9] := hFonts[2] ;
019145  000958      hFonts[10] := hFonts[5] ;
019146  000959      hFonts[11] := hFonts[2] ;
019147  000960      hFonts[12] := hFonts[1] ;
019148  000961      hFonts[13] := hFonts[2] ;
019149  000962      hFonts[14] := hFonts[2] ;
019150  000963      hFonts[15] := hFonts[2] ;
019151  000964      hFonts[16] := hFonts[1] ;
019152  000965      hFonts[17] := hFonts[5] ;
019153  000966      hFonts[18] := hFonts[2] ;
019154  000967      hFonts[19] := hFonts[2] ;
019155  000968      hFonts[20] := hFonts[2] ;
019156  000969      hFonts[21] := hFonts[2] ;
019157  000970      hFonts[22] := hFonts[2] ;
019158  000971      hFonts[23] := hFonts[1] ;
019159  000972      hFonts[24] := hFonts[1] ;
019160  000973      hFonts[25] := hFonts[1] ;
019161  000974      hFonts[26] := hFonts[1] ;
019162  000975      hFonts[27] := hFonts[2] ;
019163  000976      hFonts[29] := hFonts[2] ;
019164  000977      hFonts[30] := hFonts[1] ;
019165  000978      hFonts[31] := hFonts[2] ;
019166  000979      hFonts[32] := hFonts[2] ;
019167  000980      hFonts[33] := hFonts[2] ;
019168  000981      hFonts[34] := hFonts[2] ;
019169  000982      hFonts[35] := hFonts[2] ;
019170  000983      hFonts[36] := hFonts[2] ;
019171  000984      hFonts[37] := hFonts[2] ;
019172  000985      hFonts[38] := hFonts[2] ;
019173  000986      hFonts[39] := hFonts[2] ;
019174  000987      hFonts[41] := hFonts[40] ;
019175  000988      hFonts[42] := hFonts[40] ;
019176  000989      hFonts[43] := hFonts[46] ;
019177  000990      hFonts[44] := hFonts[2] ;
019178  000991      hFonts[45] := hFonts[46] ;
019179  000992      hFonts[47] := hFonts[46] ;
019180  000993      hFonts[48] := hFonts[2] ;
019181  000994      hFonts[49] := hFonts[2] ;
019182  000995      hFonts[50] := hFonts[1] ;
019183  000996  // Start P4.inc
019184  000997      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
019185  000998      // init comms
019186  000999      com_Init(comRX,CMDLenMAX,0);
019187  001000      com_SetBaud(COM0,19886);
019188  001001      com_TXbuffer(comTX, 100, 0);
019189  001002      snd_BufSize(2) ;
019190  001003      // tag 'real' objects
019191  001004      for (i := 0; i <= MaxTotObjects; i++)
019192  001005          if (   (i != tSounds)
019193  001006              && (i != tTimer)
019194  001007              && (i != tPinOutput)
019195  001008              && (i != tPinInput) )
019196  001009              TouchXpos := oObjects[i] ;
019197  001010              TouchYpos := *(TouchXpos) ;
019198  001011              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
019199  001012                  oldn := *(TouchXpos+ImageTouched*2) ;
019200  001013                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
019201  001014                  if (oldn != -1)
019202  001015                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
019203  001016                      img_Disable(hndl, oldn) ;
019204  001017                  endif
019205  001018              next
019206  001019          endif
019207  001020      next
019208  001021        
019209  001022      // display initial form
019210  001023      CurrentForm := -1 ;
019211  001024      ActivateForm(0) ; // need to change this according to first actual form
019212  001025        
019213  001026  // End P4.inc
019214  001027  // Start P5.inc
019215  001028      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
019216  001029      oldn := -1 ;
019217  001030      repeat
019218  001031        
019219  001032          // check comms for command, how to NAK invalid command
019220  001033          if (com_Count() != 0)
019221  001034              i := serin() ;
019222  001035              InputCS ^= i ;               // update checksum
019223  001036              if (   (cmdi > 2)
019224  001037                  && (cmd[0] == WRITE_STRU) )
019225  001038                  j := (cmdi-1) >> 1 + 2 ;
019226  001039                  if (j == CMDLenMAX)    // max length exceeded
019227  001040                      nak0() ;
019228  001041                      cmdi := -1 ;
019229  001042                  else if (cmdi & 1)
019230  001043                      cmd[j] := i ;
019231  001044                      if (cmd[2] == 0)    // if string complete
019232  001045                          if (InputCS)
019233  001046                              nak0() ;
019234  001047                          else
019235  001048                              if (cmd[0] == WRITE_STRU)
019236  001049                              cmd[j] := 0 ;                     // terminate it
019237  001050                              PrintStrings(cmd[1], &cmd[3], 1) ;
019238  001051                              serout(ACK) ;
019239  001052                              else
019240  001053                              endif
019241  001054                          endif
019242  001055                          cmdi := -1 ;
019243  001056                      endif
019244  001057                  else
019245  001058                      cmd[j] := cmd[j] << 8 + i ;
019246  001059                      cmd[2]-- ;          // dec length
019247  001060                  endif
019248  001061                  cmdi++ ;
019249  001062              else // not unicode string
019250  001063                  cmd[cmdi++] := i ;
019251  001064                   if (cmd[0] == WRITE_STR)                  // Ansi String
019252  001065                      if (cmdi == CMDLenMAX)      // max length exceeded
019253  001066                          nak0() ;
019254  001067                          cmdi := 0 ;
019255  001068                      else if (cmdi > 2)
019256  001069                          if (cmd[2] == -1)
019257  001070                              if (InputCS)
019258  001071                                  nak0() ;
019259  001072                              else
019260  001073                                  if (cmd[0] == WRITE_STR)
019261  001074                                  cmd[cmdi-1] := 0 ;                     // terminate it
019262  001075                                  PrintStrings(cmd[1], &cmd[3], 1) ;
019263  001076                                  serout(ACK) ;
019264  001077                                  else
019265  001078                                  endif
019266  001079                              endif
019267  001080                              cmdi := 0 ;
019268  001081                          else
019269  001082                              cmd[2]-- ;          // dec length
019270  001083                          endif
019271  001084                      endif
019272  001085                  else if (   (cmd[0] == READ_OBJ)
019273  001086                           && (cmdi == 4)         )
019274  001087                      if (InputCS)
019275  001088                          nak0() ;
019276  001089                      else
019277  001090                          ReadObject(cmd[1], cmd[2]) ;
019278  001091                      endif
019279  001092                      cmdi := 0 ;
019280  001093                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
019281  001094                           && (cmdi == 6)          )
019282  001095                      if (InputCS)
019283  001096                          nak0() ;
019284  001097                      else
019285  001098                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
019286  001099                          serout(ACK) ;
019287  001100                      endif
019288  001101                      cmdi := 0 ;
019289  001102                  else if (   (cmd[0] == WRITE_CONTRAST)
019290  001103                           && (cmdi == 3)         )
019291  001104                      if (InputCS)
019292  001105                          nak0() ;
019293  001106                      else
019294  001107                          gfx_Contrast(cmd[1]) ;
019295  001108                          serout(ACK) ;
019296  001109                      endif
019297  001110                      cmdi := 0 ;
019298  001111                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
019299  001112                      nak0() ;
019300  001113                      cmdi := 0 ;
019301  001114                  endif
019302  001115              endif   // not unicode string
019303  001116          endif   // a character is available
019304  001117        
019305  001118        
019306  001119      // touch code processing
019307  001120        
019308  001121          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
019309  001122          ImageTouched := img_Touched(hndl,-1) ;
019310  001123          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
019311  001124              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
019312  001125                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
019313  001126              endif
019314  001127              if (TouchStatus != TOUCH_RELEASED)        // if not released
019315  001128                  if (oldn != -1)
019316  001129                      ImageTouched := oldn ;
019317  001130                  else
019318  001131                      if (oldn != ImageTouched)
019319  001132                  oldn := ImageTouched ;
019320  001133                          TouchStatus := TOUCH_PRESSED ;
019321  001134                      endif
019322  001135                  endif
019323  001136                  TouchXpos  := touch_Get(TOUCH_GETX);
019324  001137                  TouchYpos  := touch_Get(TOUCH_GETY);
019325  001138                  TouchState := Ofs_IPD_DOWN ;
019326  001139              else
019327  001140                  ImageTouched := oldn ;                     // simulate release of what we touched
019328  001141                  oldn := -1 ;                    // prevent double release
019329  001142                  TouchState := Ofs_IPD_RELEASE ;
019330  001143              endif
019331  001144              if (ImageTouched != -1)
019332  001145                          CurInputData := InputControls[ImageTouched] + InputData;
019333  001146                          InputType := *(CurInputData) ;
019334  001147                          i := InputType ;
019335  001148                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
019336  001149                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
019337  001150              endif
019338  001151          endif
019339  001152   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
019340  001153        
019341  001154          sys_EventsResume() ;
019342  001155      forever
019343  001156        
019344  001157  cDipswitch:
019345  001158        
019346  001159  cKnob:
019347  001160        
019348  001161  cRockerswitch:
019349  001162        
019350  001163  cRotaryswitch:
019351  001164        
019352  001165  cSlider:
019353  001166  cTrackbar:
019354  001167        
019355  001168  c4DButton:
019356  001169  cUserButton:
019357  001170      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
019358  001171      goto gbutton ;
019359  001172  cWinbutton:
019360  001173  gbutton:
019361  001174      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
019362  001175      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
019363  001176          if (TouchStatus == TOUCH_RELEASED)
019364  001177              i &= 0xfffe ;
019365  001178              TouchState == Ofs_IPD_DOWN ;
019366  001179          else
019367  001180              i |= 1 ;
019368  001181              TouchState == Ofs_IPD_RELEASE ;
019369  001182          endif
019370  001183      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
019371  001184          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
019372  001185              if ((i & 3) == 3)
019373  001186                  i &= 0xfffc ;
019374  001187              else
019375  001188                  i++ ;
019376  001189              endif
019377  001190          else
019378  001191              i |= 1 ;                                      // make down regardless of current state
019379  001192          endif
019380  001193      else                        // group action, up all other buttons on touch press, reports 0 for button down
019381  001194          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
019382  001195              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
019383  001196          endif
019384  001197          i := (i & 0xfffc) | 2 ;
019385  001198      endif
019386  001199        
019387  001200      UpdateObjects(i) ;
019388  001201  endsub ;
019389  001202        
019390  001203  cAniButton:
019391  001204        
019392  001205  cColorPicker:
019393  001206        
019394  001207  endfunc
019395  001208  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 847 file:BCN3D_SIGMA.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 785 file:BCN3D_SIGMA.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       16047  0x00003eaf (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 111)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS    2805  0x00000af5 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  370  0x00000172 (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 228)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                290  0x00000122 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         286  0x0000011e (mem) word (global)  (usage 24)
CurrentForm                          276  0x00000114 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       15415  0x00003c37 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       12895  0x0000325fFormBGcolors                       12895  0x0000325f (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         157  0x0000009dFormEndIndex                         157  0x0000009d (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[51] (global)  (usage 288)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 87)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             206  0x000000ce (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              170  0x000000aa (const ??? 0)  (usage 3)
iForm11                              179  0x000000b3 (const ??? 0)  (usage 3)
iForm12                              172  0x000000ac (const ??? 0)  (usage 3)
iForm13                              121  0x00000079 (const ??? 0)  (usage 3)
iForm14                               37  0x00000025 (const ??? 0)  (usage 3)
iForm15                              174  0x000000ae (const ??? 0)  (usage 3)
iForm16                              103  0x00000067 (const ??? 0)  (usage 3)
iForm17                              127  0x0000007f (const ??? 0)  (usage 3)
iForm18                              188  0x000000bc (const ??? 0)  (usage 3)
iForm19                               41  0x00000029 (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                               43  0x0000002b (const ??? 0)  (usage 3)
iForm21                               52  0x00000034 (const ??? 0)  (usage 3)
iForm22                              203  0x000000cb (const ??? 0)  (usage 3)
iForm23                              218  0x000000da (const ??? 0)  (usage 3)
iForm24                              249  0x000000f9 (const ??? 0)  (usage 3)
iForm25                              129  0x00000081 (const ??? 0)  (usage 3)
iForm26                              299  0x0000012b (const ??? 0)  (usage 3)
iForm27                               55  0x00000037 (const ??? 0)  (usage 3)
iForm28                               67  0x00000043 (const ??? 0)  (usage 3)
iForm29                              195  0x000000c3 (const ??? 0)  (usage 3)
iForm3                               117  0x00000075 (const ??? 0)  (usage 3)
iForm30                              302  0x0000012e (const ??? 0)  (usage 3)
iForm31                               75  0x0000004b (const ??? 0)  (usage 3)
iForm32                               78  0x0000004e (const ??? 0)  (usage 3)
iForm33                               81  0x00000051 (const ??? 0)  (usage 3)
iForm34                               93  0x0000005d (const ??? 0)  (usage 3)
iForm35                               98  0x00000062 (const ??? 0)  (usage 3)
iForm36                              193  0x000000c1 (const ??? 0)  (usage 3)
iForm37                              208  0x000000d0 (const ??? 0)  (usage 3)
iForm38                              210  0x000000d2 (const ??? 0)  (usage 3)
iForm39                              212  0x000000d4 (const ??? 0)  (usage 3)
iForm4                                17  0x00000011 (const ??? 0)  (usage 3)
iForm40                              284  0x0000011c (const ??? 0)  (usage 3)
iForm41                              246  0x000000f6 (const ??? 0)  (usage 3)
iForm42                              221  0x000000dd (const ??? 0)  (usage 3)
iForm43                              226  0x000000e2 (const ??? 0)  (usage 3)
iForm44                              107  0x0000006b (const ??? 0)  (usage 3)
iForm45                              305  0x00000131 (const ??? 0)  (usage 3)
iForm46                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm47                              125  0x0000007d (const ??? 0)  (usage 3)
iForm48                              136  0x00000088 (const ??? 0)  (usage 3)
iForm49                              143  0x0000008f (const ??? 0)  (usage 3)
iForm5                                22  0x00000016 (const ??? 0)  (usage 3)
iForm50                              231  0x000000e7 (const ??? 0)  (usage 3)
iForm51                              236  0x000000ec (const ??? 0)  (usage 3)
iForm52                              148  0x00000094 (const ??? 0)  (usage 3)
iForm53                              160  0x000000a0 (const ??? 0)  (usage 3)
iForm54                              239  0x000000ef (const ??? 0)  (usage 3)
iForm55                              242  0x000000f2 (const ??? 0)  (usage 3)
iForm56                              251  0x000000fb (const ??? 0)  (usage 3)
iForm57                              253  0x000000fd (const ??? 0)  (usage 3)
iForm58                              258  0x00000102 (const ??? 0)  (usage 3)
iForm59                              270  0x0000010e (const ??? 0)  (usage 3)
iForm6                                27  0x0000001b (const ??? 0)  (usage 3)
iForm60                              260  0x00000104 (const ??? 0)  (usage 3)
iForm61                              263  0x00000107 (const ??? 0)  (usage 3)
iForm62                              265  0x00000109 (const ??? 0)  (usage 3)
iForm63                              268  0x0000010c (const ??? 0)  (usage 3)
iForm64                              281  0x00000119 (const ??? 0)  (usage 3)
iForm65                              286  0x0000011e (const ??? 0)  (usage 3)
iForm66                              290  0x00000122 (const ??? 0)  (usage 3)
iForm67                              293  0x00000125 (const ??? 0)  (usage 3)
iForm68                              296  0x00000128 (const ??? 0)  (usage 3)
iForm69                              307  0x00000133 (const ??? 0)  (usage 3)
iForm7                               256  0x00000100 (const ??? 0)  (usage 3)
iForm70                              308  0x00000134 (const ??? 0)  (usage 3)
iForm71                              310  0x00000136 (const ??? 0)  (usage 3)
iForm72                              312  0x00000138 (const ??? 0)  (usage 3)
iForm73                              314  0x0000013a (const ??? 0)  (usage 3)
iForm74                              316  0x0000013c (const ??? 0)  (usage 3)
iForm8                               177  0x000000b1 (const ??? 0)  (usage 3)
iForm9                                33  0x00000021 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 39)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 12)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 15)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        307  0x00000133InputControls                        307  0x00000133 (mem) word[319] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
InputCS                              530  0x00000212 (mem) word (global)  (usage 21)
InputData                            945  0x000003b1InputData                            945  0x000003b1 (mem) word[4906] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 24)
InputType                            282  0x0000011a (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          10757  0x00002a05iStrings0                          10757  0x00002a05 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings1                          10783  0x00002a1fiStrings1                          10783  0x00002a1f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings10                         11017  0x00002b09iStrings10                         11017  0x00002b09 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings11                         11043  0x00002b23iStrings11                         11043  0x00002b23 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings12                         11069  0x00002b3diStrings12                         11069  0x00002b3d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings13                         11095  0x00002b57iStrings13                         11095  0x00002b57 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings14                         11121  0x00002b71iStrings14                         11121  0x00002b71 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings15                         11147  0x00002b8biStrings15                         11147  0x00002b8b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings16                         11173  0x00002ba5iStrings16                         11173  0x00002ba5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings17                         11199  0x00002bbfiStrings17                         11199  0x00002bbf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings18                         11225  0x00002bd9iStrings18                         11225  0x00002bd9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings19                         11251  0x00002bf3iStrings19                         11251  0x00002bf3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings2                          10809  0x00002a39iStrings2                          10809  0x00002a39 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings20                         11277  0x00002c0diStrings20                         11277  0x00002c0d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings21                         11303  0x00002c27iStrings21                         11303  0x00002c27 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings22                         11329  0x00002c41iStrings22                         11329  0x00002c41 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings23                         11355  0x00002c5biStrings23                         11355  0x00002c5b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings24                         11381  0x00002c75iStrings24                         11381  0x00002c75 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings25                         11407  0x00002c8fiStrings25                         11407  0x00002c8f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings26                         11433  0x00002ca9iStrings26                         11433  0x00002ca9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings27                         11459  0x00002cc3iStrings27                         11459  0x00002cc3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings28                         11485  0x00002cddiStrings28                         11485  0x00002cdd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings29                         11511  0x00002cf7iStrings29                         11511  0x00002cf7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings3                          10835  0x00002a53iStrings3                          10835  0x00002a53 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings30                         11537  0x00002d11iStrings30                         11537  0x00002d11 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings31                         11563  0x00002d2biStrings31                         11563  0x00002d2b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings32                         11589  0x00002d45iStrings32                         11589  0x00002d45 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings33                         11615  0x00002d5fiStrings33                         11615  0x00002d5f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings34                         11641  0x00002d79iStrings34                         11641  0x00002d79 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings35                         11667  0x00002d93iStrings35                         11667  0x00002d93 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings36                         11693  0x00002dadiStrings36                         11693  0x00002dad (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings37                         11719  0x00002dc7iStrings37                         11719  0x00002dc7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings38                         11745  0x00002de1iStrings38                         11745  0x00002de1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings39                         11771  0x00002dfbiStrings39                         11771  0x00002dfb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings4                          10861  0x00002a6diStrings4                          10861  0x00002a6d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings40                         11797  0x00002e15iStrings40                         11797  0x00002e15 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings41                         11823  0x00002e2fiStrings41                         11823  0x00002e2f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings42                         11849  0x00002e49iStrings42                         11849  0x00002e49 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings43                         11875  0x00002e63iStrings43                         11875  0x00002e63 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings44                         11901  0x00002e7diStrings44                         11901  0x00002e7d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings45                         11927  0x00002e97iStrings45                         11927  0x00002e97 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings46                         11953  0x00002eb1iStrings46                         11953  0x00002eb1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings47                         11979  0x00002ecbiStrings47                         11979  0x00002ecb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings48                         12005  0x00002ee5iStrings48                         12005  0x00002ee5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings49                         12031  0x00002effiStrings49                         12031  0x00002eff (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings5                          10887  0x00002a87iStrings5                          10887  0x00002a87 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings50                         12057  0x00002f19iStrings50                         12057  0x00002f19 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings6                          10913  0x00002aa1iStrings6                          10913  0x00002aa1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings7                          10939  0x00002abbiStrings7                          10939  0x00002abb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings8                          10965  0x00002ad5iStrings8                          10965  0x00002ad5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings9                          10991  0x00002aefiStrings9                          10991  0x00002aef (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          28  0x0000001c (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        269  0x0000010d (const ??? 0)  (usage 3)
iUserbutton100                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton101                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton102                        82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton103                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton104                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton105                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton106                        86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton107                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton108                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton109                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton11                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton110                        90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton111                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton112                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton113                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton114                        96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton115                        99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton116                       100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton117                       101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton118                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton119                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton12                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton120                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton121                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton122                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton123                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton124                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton125                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton126                        51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton127                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton128                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton129                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton13                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton130                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton131                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton132                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton133                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton134                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton135                       115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton136                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton137                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton138                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton139                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton14                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton140                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton141                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton142                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton143                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton144                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton145                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton146                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton147                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton148                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton149                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton151                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton152                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton153                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton154                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton155                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton156                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton157                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton158                       105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton159                        31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton16                         36  0x00000024 (const ??? 0)  (usage 3)
iUserbutton160                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton161                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton162                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton163                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton164                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton165                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton166                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton167                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton168                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton169                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton17                         38  0x00000026 (const ??? 0)  (usage 3)
iUserbutton170                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton171                       229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton172                       301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton173                       303  0x0000012f (const ??? 0)  (usage 3)
iUserbutton174                       304  0x00000130 (const ??? 0)  (usage 3)
iUserbutton175                       309  0x00000135 (const ??? 0)  (usage 3)
iUserbutton176                       311  0x00000137 (const ??? 0)  (usage 3)
iUserbutton177                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton178                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton179                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton18                         34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton180                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton181                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton182                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton183                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton184                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton185                       245  0x000000f5 (const ??? 0)  (usage 3)
iUserbutton186                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton187                       241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton188                       248  0x000000f8 (const ??? 0)  (usage 3)
iUserbutton189                       252  0x000000fc (const ??? 0)  (usage 3)
iUserbutton19                         35  0x00000023 (const ??? 0)  (usage 3)
iUserbutton190                       255  0x000000ff (const ??? 0)  (usage 3)
iUserbutton191                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton192                       257  0x00000101 (const ??? 0)  (usage 3)
iUserbutton193                       271  0x0000010f (const ??? 0)  (usage 3)
iUserbutton194                       261  0x00000105 (const ??? 0)  (usage 3)
iUserbutton195                       262  0x00000106 (const ??? 0)  (usage 3)
iUserbutton196                       272  0x00000110 (const ??? 0)  (usage 3)
iUserbutton197                       287  0x0000011f (const ??? 0)  (usage 3)
iUserbutton198                       288  0x00000120 (const ??? 0)  (usage 3)
iUserbutton199                       273  0x00000111 (const ??? 0)  (usage 3)
iUserbutton2                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton20                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton200                       274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton201                       275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton202                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton203                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton204                       278  0x00000116 (const ??? 0)  (usage 3)
iUserbutton205                       279  0x00000117 (const ??? 0)  (usage 3)
iUserbutton206                       282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton207                       283  0x0000011b (const ??? 0)  (usage 3)
iUserbutton208                       317  0x0000013d (const ??? 0)  (usage 3)
iUserbutton209                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton21                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton210                       291  0x00000123 (const ??? 0)  (usage 3)
iUserbutton211                       294  0x00000126 (const ??? 0)  (usage 3)
iUserbutton212                       297  0x00000129 (const ??? 0)  (usage 3)
iUserbutton213                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton214                       318  0x0000013e (const ??? 0)  (usage 3)
iUserbutton215                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton22                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton23                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton24                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton25                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton26                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton27                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton28                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton29                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton3                         180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton30                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton31                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton32                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton33                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton34                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton35                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton36                        173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton37                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton38                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton39                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton4                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton40                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton41                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton42                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton43                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton44                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton45                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton46                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton47                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton48                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton49                        254  0x000000fe (const ??? 0)  (usage 3)
iUserbutton5                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton50                         30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton51                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton52                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton53                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton54                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton55                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton56                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton57                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton58                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton59                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton6                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton60                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton63                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton64                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton65                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton66                        219  0x000000db (const ??? 0)  (usage 3)
iUserbutton67                        247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton68                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton69                        250  0x000000fa (const ??? 0)  (usage 3)
iUserbutton7                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton70                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton71                        171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton72                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton73                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton74                        192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton75                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton76                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton77                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton78                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton79                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton8                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton80                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton81                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton82                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton83                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton84                        202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton85                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton86                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton87                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                         32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton9                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton90                        204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton91                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton92                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton93                        300  0x0000012c (const ??? 0)  (usage 3)
iUserbutton94                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton95                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton96                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton97                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton98                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton99                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages0                         201  0x000000c9 (const ??? 0)  (usage 3)
iUserimages1                          15  0x0000000f (const ??? 0)  (usage 3)
iUserimages2                         280  0x00000118 (const ??? 0)  (usage 3)
iUserimages4                          77  0x0000004d (const ??? 0)  (usage 3)
iUserimages5                          80  0x00000050 (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              178  0x000000b2 (const ??? 0)  (usage 3)
iVideo10                             106  0x0000006a (const ??? 0)  (usage 3)
iVideo11                              54  0x00000036 (const ??? 0)  (usage 3)
iVideo12                             220  0x000000dc (const ??? 0)  (usage 3)
iVideo13                             267  0x0000010b (const ??? 0)  (usage 3)
iVideo14                              16  0x00000010 (const ??? 0)  (usage 3)
iVideo15                             187  0x000000bb (const ??? 0)  (usage 3)
iVideo16                              97  0x00000061 (const ??? 0)  (usage 3)
iVideo17                             102  0x00000066 (const ??? 0)  (usage 3)
iVideo18                             295  0x00000127 (const ??? 0)  (usage 3)
iVideo19                             259  0x00000103 (const ??? 0)  (usage 3)
iVideo2                              194  0x000000c2 (const ??? 0)  (usage 3)
iVideo20                             116  0x00000074 (const ??? 0)  (usage 3)
iVideo21                             306  0x00000132 (const ??? 0)  (usage 3)
iVideo22                             313  0x00000139 (const ??? 0)  (usage 3)
iVideo23                             315  0x0000013b (const ??? 0)  (usage 3)
iVideo3                               72  0x00000048 (const ??? 0)  (usage 3)
iVideo4                               73  0x00000049 (const ??? 0)  (usage 3)
iVideo5                               74  0x0000004a (const ??? 0)  (usage 3)
iVideo6                              128  0x00000080 (const ??? 0)  (usage 3)
iVideo7                              264  0x00000108 (const ??? 0)  (usage 3)
iVideo8                              285  0x0000011d (const ??? 0)  (usage 3)
iVideo9                              230  0x000000e6 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                13045  0x000032f5kKeyboardKeystrokes                13045  0x000032f5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               13441  0x00003481 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               17013  0x00004275 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (usage 15)
nInputs                              446  0x000001be (const dword)  (usage 3)
nObjects                             319  0x0000013f (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              51  0x00000033 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         12449  0x000030a1o4Dbuttons                         12449  0x000030a1 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAngularmeters                     12097  0x00002f41oAngularmeters                     12097  0x00002f41 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAniButtons                        12451  0x000030a3oAniButtons                        12451  0x000030a3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      12453  0x000030a5oColorPickers                      12453  0x000030a5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCoolgauges                        12099  0x00002f43oCoolgauges                        12099  0x00002f43 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCustomdigitss                     12101  0x00002f45oCustomdigitss                     12101  0x00002f45 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oDipSwitchs                        12083  0x00002f33oDipSwitchs                        12083  0x00002f33 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                             12103  0x00002f47oForms                             12103  0x00002f47 (mem) word[76] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 9)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            12255  0x00002fdfoGauges                            12255  0x00002fdf (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oGSliders                          12091  0x00002f3boGSliders                          12091  0x00002f3b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oImages                            12257  0x00002fe1oImages                            12257  0x00002fe1 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKeyboards                         12259  0x00002fe3oKeyboards                         12259  0x00002fe3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKnobs                             12085  0x00002f35oKnobs                             12085  0x00002f35 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                        12263  0x00002fe7oLeddigitss                        12263  0x00002fe7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oLeds                              12261  0x00002fe5oLeds                              12261  0x00002fe5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                            12265  0x00002fe9oMeters                            12265  0x00002fe9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             208  0x000000d0 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         12447  0x0000309foPinInputs                         12447  0x0000309f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oPinOutputs                        12893  0x0000325doPinOutputs                        12893  0x0000325d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     12087  0x00002f37oRockerSwitchs                     12087  0x00002f37 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oRotarySwitchs                     12089  0x00002f39oRotarySwitchs                     12089  0x00002f39 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oScopes                            12429  0x0000308doScopes                            12429  0x0000308d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
oSoundss                           12891  0x0000325boSoundss                           12891  0x0000325b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSpectrums                         12427  0x0000308boSpectrums                         12427  0x0000308b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStaticTexts                       12425  0x00003089oStaticTexts                       12425  0x00003089 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStringss                          12267  0x00002feboStringss                          12267  0x00002feb (mem) word[52] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 69)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 627)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             12431  0x0000308foTanks                             12431  0x0000308f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oThermometers                      12371  0x00003053oThermometers                      12371  0x00003053 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTimers                            12889  0x00003259oTimers                            12889  0x00003259 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTrackbars                         12093  0x00002f3doTrackbars                         12093  0x00002f3d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserButtons                       12455  0x000030a7oUserButtons                       12455  0x000030a7 (mem) word[217] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 12)
oUserImagess                       12433  0x00003091oUserImagess                       12433  0x00003091 (mem) word[7] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserleds                          12373  0x00003055oUserleds                          12373  0x00003055 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             532  0x00000214 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            12375  0x00003057oVideos                            12375  0x00003057 (mem) word[25] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        12095  0x00002f3foWinButtons                        12095  0x00002f3f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          288  0x00000120 (mem) word (global)  (usage 15)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       17048  0x00004298 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         16798  0x0000419e (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  13047  0x000032f7rKeyboardRoutines                  13047  0x000032f7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\PANTALLA\BCN3D_SIGMA_122RC\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 15)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         16946  0x00004232 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           17029  0x00004285 (User func) args[1] r=0  (usage 15)
seroutOcs                          16996  0x00004264 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           4  0x00000004 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          7  0x00000007 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          9  0x00000009 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          9  0x00000009 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          9  0x00000009 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          9  0x00000009 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         19  0x00000013 (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     3072  0x00000c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         37  0x00000025 (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         37  0x00000025 (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         22  0x00000016 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                          4  0x00000004 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         37  0x00000025 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          4  0x00000004 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                          4  0x00000004 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                          4  0x00000004 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings34Count                         1  0x00000001 (const dword)  (not used)
Strings34Size                          4  0x00000004 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                          4  0x00000004 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings36Count                         1  0x00000001 (const dword)  (not used)
Strings36Size                          4  0x00000004 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings37Count                         1  0x00000001 (const dword)  (not used)
Strings37Size                          4  0x00000004 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings38Count                         1  0x00000001 (const dword)  (not used)
Strings38Size                          4  0x00000004 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         16  0x00000010 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings41Count                         0  0x00000000 (const dword)  (not used)
Strings41Size                          1  0x00000001 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings42Count                         0  0x00000000 (const dword)  (not used)
Strings42Size                          1  0x00000001 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                           4  0x00000004 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      8704  0x00002200 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                           7  0x00000007 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           4  0x00000004 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     17920  0x00004600 (const dword)  (usage 3)
Strings7Count                          1  0x00000001 (const dword)  (not used)
Strings7Size                          37  0x00000025 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                           4  0x00000004 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                            104  0x00000068 (mem) word[51] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           284  0x0000011c (mem) word (global)  (usage 24)
TouchXpos                            278  0x00000116 (mem) word (global)  (usage 12)
TouchYpos                            280  0x00000118 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     16368  0x00003ff0 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 663)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      15416  0x00003c38 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 9)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        16505  0x00004079 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
