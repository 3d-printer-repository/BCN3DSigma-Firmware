file C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-35DCT-CLB.fnc

000001  000001  #platform "Gen4-uLCD-35DCT-CLB"
000002  000001  #platform "Gen4-uLCD-35DCT-CLB"
000003  000008  */
000004  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000005  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003  // generated 26/01/2017 13:06:37
005194  000004        
005195  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005196  000006  #inherit "4DGL_16bitColours.fnc"
005197  000006  #inherit "4DGL_16bitColours.fnc"
005198  000004  */
005199  000005        
005200  000006        
005201  000007        
005202  000008  #CONST
005203  000149  #END
005204  000150        
005205  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005206  000008  #inherit "VisualConst.inc"
005207  000008  #inherit "VisualConst.inc"
005208  000001  // Line Patterns
005209  000002  #constant  LPCOARSE    0xF0F0
005210  000002  #constant  LPCOARSE    0xF0F0
005211  000003  #constant  LPMEDIUM    0x3333
005212  000003  #constant  LPMEDIUM    0x3333
005213  000004  #constant  LPFINE      0xAAAA
005214  000004  #constant  LPFINE      0xAAAA
005215  000005  #constant  LPDASHDOT   0x03CF
005216  000005  #constant  LPDASHDOT   0x03CF
005217  000006  #constant  LPDASHDOTDOT 0x0333
005218  000006  #constant  LPDASHDOTDOT 0x0333
005219  000007  #constant  LPSOLID     0x0000
005220  000007  #constant  LPSOLID     0x0000
005221  000009        
005222  000010        
file C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMAConst.inc

005223  000011  #inherit "BCN3D_SIGMAConst.inc"
005224  000011  #inherit "BCN3D_SIGMAConst.inc"
005225  000001  // File generated 26/01/2017 13:06:08
005226  000002  // Warning! This is a generated file, any manual changes will be
005227  000003  // lost during the next generation.
005228  000004        
005229  000005  #constant  Strings3Count    0
005230  000005  #constant  Strings3Count    0
005231  000006  #constant  Strings3Size     1
005232  000006  #constant  Strings3Size     1
005233  000007  #constant  Strings1Count    0
005234  000007  #constant  Strings1Count    0
005235  000008  #constant  Strings1Size     1
005236  000008  #constant  Strings1Size     1
005237  000009  #constant  Strings7Count    1
005238  000009  #constant  Strings7Count    1
005239  000010  #constant  Strings7Size     37
005240  000010  #constant  Strings7Size     37
005241  000011  #constant  Strings8Count    0
005242  000011  #constant  Strings8Count    0
005243  000012  #constant  Strings8Size     1
005244  000012  #constant  Strings8Size     1
005245  000013  #constant  Strings12Count    0
005246  000013  #constant  Strings12Count    0
005247  000014  #constant  Strings12Size     1
005248  000014  #constant  Strings12Size     1
005249  000015  #constant  Strings23Count    0
005250  000015  #constant  Strings23Count    0
005251  000016  #constant  Strings23Size     1
005252  000016  #constant  Strings23Size     1
005253  000017  #constant  Strings24Count    1
005254  000017  #constant  Strings24Count    1
005255  000018  #constant  Strings24Size     19
005256  000018  #constant  Strings24Size     19
005257  000019  #constant  Strings25Count    1
005258  000019  #constant  Strings25Count    1
005259  000020  #constant  Strings25Size     37
005260  000020  #constant  Strings25Size     37
005261  000021  #constant  Strings26Count    1
005262  000021  #constant  Strings26Count    1
005263  000022  #constant  Strings26Size     37
005264  000022  #constant  Strings26Size     37
005265  000023  #constant  Strings16Count    0
005266  000023  #constant  Strings16Count    0
005267  000024  #constant  Strings16Size     1
005268  000024  #constant  Strings16Size     1
005269  000025  #constant  Strings30Count    1
005270  000025  #constant  Strings30Count    1
005271  000026  #constant  Strings30Size     37
005272  000026  #constant  Strings30Size     37
005273  000027  #constant  Strings2Count    1
005274  000027  #constant  Strings2Count    1
005275  000028  #constant  Strings2Size     4
005276  000028  #constant  Strings2Size     4
005277  000029  #constant  Strings0Count    1
005278  000029  #constant  Strings0Count    1
005279  000030  #constant  Strings0Size     4
005280  000030  #constant  Strings0Size     4
005281  000031  #constant  Strings9Count    1
005282  000031  #constant  Strings9Count    1
005283  000032  #constant  Strings9Size     4
005284  000032  #constant  Strings9Size     4
005285  000033  #constant  Strings34Count    1
005286  000033  #constant  Strings34Count    1
005287  000034  #constant  Strings34Size     4
005288  000034  #constant  Strings34Size     4
005289  000035  #constant  Strings36Count    1
005290  000035  #constant  Strings36Count    1
005291  000036  #constant  Strings36Size     4
005292  000036  #constant  Strings36Size     4
005293  000037  #constant  Strings37Count    1
005294  000037  #constant  Strings37Count    1
005295  000038  #constant  Strings37Size     4
005296  000038  #constant  Strings37Size     4
005297  000039  #constant  Strings4Count    1
005298  000039  #constant  Strings4Count    1
005299  000040  #constant  Strings4Size     4
005300  000040  #constant  Strings4Size     4
005301  000041  #constant  Strings40Count    1
005302  000041  #constant  Strings40Count    1
005303  000042  #constant  Strings40Size     16
005304  000042  #constant  Strings40Size     16
005305  000043  #constant  Strings41Count    0
005306  000043  #constant  Strings41Count    0
005307  000044  #constant  Strings41Size     1
005308  000044  #constant  Strings41Size     1
005309  000045  #constant  Strings42Count    0
005310  000045  #constant  Strings42Count    0
005311  000046  #constant  Strings42Size     1
005312  000046  #constant  Strings42Size     1
005313  000047  #constant  Strings5Count    1
005314  000047  #constant  Strings5Count    1
005315  000048  #constant  Strings5Size     7
005316  000048  #constant  Strings5Size     7
005317  000049  #constant  Strings10Count    1
005318  000049  #constant  Strings10Count    1
005319  000050  #constant  Strings10Size     7
005320  000050  #constant  Strings10Size     7
005321  000051  #constant  Strings17Count    1
005322  000051  #constant  Strings17Count    1
005323  000052  #constant  Strings17Size     7
005324  000052  #constant  Strings17Size     7
005325  000053  #constant  Strings13Count    1
005326  000053  #constant  Strings13Count    1
005327  000054  #constant  Strings13Size     7
005328  000054  #constant  Strings13Size     7
005329  000055  #constant  Strings14Count    1
005330  000055  #constant  Strings14Count    1
005331  000056  #constant  Strings14Size     7
005332  000056  #constant  Strings14Size     7
005333  000057  #constant  Strings15Count    1
005334  000057  #constant  Strings15Count    1
005335  000058  #constant  Strings15Size     7
005336  000058  #constant  Strings15Size     7
005337  000059  #constant  Strings18Count    1
005338  000059  #constant  Strings18Count    1
005339  000060  #constant  Strings18Size     7
005340  000060  #constant  Strings18Size     7
005341  000061  #constant  Strings19Count    1
005342  000061  #constant  Strings19Count    1
005343  000062  #constant  Strings19Size     9
005344  000062  #constant  Strings19Size     9
005345  000063  #constant  Strings20Count    1
005346  000063  #constant  Strings20Count    1
005347  000064  #constant  Strings20Size     9
005348  000064  #constant  Strings20Size     9
005349  000065  #constant  Strings21Count    1
005350  000065  #constant  Strings21Count    1
005351  000066  #constant  Strings21Size     9
005352  000066  #constant  Strings21Size     9
005353  000067  #constant  Strings22Count    1
005354  000067  #constant  Strings22Count    1
005355  000068  #constant  Strings22Size     9
005356  000068  #constant  Strings22Size     9
005357  000069  #constant  Strings27Count    0
005358  000069  #constant  Strings27Count    0
005359  000070  #constant  Strings27Size     1
005360  000070  #constant  Strings27Size     1
005361  000071  #constant  Strings28Count    1
005362  000071  #constant  Strings28Count    1
005363  000072  #constant  Strings28Size     22
005364  000072  #constant  Strings28Size     22
005365  000073  #constant  Strings46Count    0
005366  000073  #constant  Strings46Count    0
005367  000074  #constant  Strings46Size     1
005368  000074  #constant  Strings46Size     1
005369  000075  #constant  Strings6Count    1
005370  000075  #constant  Strings6Count    1
005371  000076  #constant  Strings6Size     4
005372  000076  #constant  Strings6Size     4
005373  000077  #constant  Strings29Count    1
005374  000077  #constant  Strings29Count    1
005375  000078  #constant  Strings29Size     4
005376  000078  #constant  Strings29Size     4
005377  000079  #constant  Strings31Count    1
005378  000079  #constant  Strings31Count    1
005379  000080  #constant  Strings31Size     4
005380  000080  #constant  Strings31Size     4
005381  000081  #constant  Strings32Count    1
005382  000081  #constant  Strings32Count    1
005383  000082  #constant  Strings32Size     4
005384  000082  #constant  Strings32Size     4
005385  000083  #constant  Strings33Count    1
005386  000083  #constant  Strings33Count    1
005387  000084  #constant  Strings33Size     4
005388  000084  #constant  Strings33Size     4
005389  000085  #constant  Strings35Count    1
005390  000085  #constant  Strings35Count    1
005391  000086  #constant  Strings35Size     4
005392  000086  #constant  Strings35Size     4
005393  000087  #constant  Strings38Count    1
005394  000087  #constant  Strings38Count    1
005395  000088  #constant  Strings38Size     4
005396  000088  #constant  Strings38Size     4
005397  000089  #constant  Strings47Count    0
005398  000089  #constant  Strings47Count    0
005399  000090  #constant  Strings47Size     1
005400  000090  #constant  Strings47Size     1
005401  000091  #constant  Strings43Count    0
005402  000091  #constant  Strings43Count    0
005403  000092  #constant  Strings43Size     1
005404  000092  #constant  Strings43Size     1
005405  000093  #constant  Strings11Count    1
005406  000093  #constant  Strings11Count    1
005407  000094  #constant  Strings11Size     7
005408  000094  #constant  Strings11Size     7
005409  000095  #constant  Strings45Count    0
005410  000095  #constant  Strings45Count    0
005411  000096  #constant  Strings45Size     1
005412  000096  #constant  Strings45Size     1
005413  000097  #constant  Strings39Count    0
005414  000097  #constant  Strings39Count    0
005415  000098  #constant  Strings39Size     1
005416  000098  #constant  Strings39Size     1
005417  000099  #constant  Strings44Count    0
005418  000099  #constant  Strings44Count    0
005419  000100  #constant  Strings44Size     1
005420  000100  #constant  Strings44Size     1
005421  000101  #constant  Strings49Count    1
005422  000101  #constant  Strings49Count    1
005423  000102  #constant  Strings49Size     12
005424  000102  #constant  Strings49Size     12
005425  000103  #constant  Strings52Count    0
005426  000103  #constant  Strings52Count    0
005427  000104  #constant  Strings52Size     1
005428  000104  #constant  Strings52Size     1
005429  000105  #constant  Strings50Count    0
005430  000105  #constant  Strings50Count    0
005431  000106  #constant  Strings50Size     1
005432  000106  #constant  Strings50Size     1
005433  000107  #constant  Strings51Count    0
005434  000107  #constant  Strings51Count    0
005435  000108  #constant  Strings51Size     1
005436  000108  #constant  Strings51Size     1
005437  000109  // object indexes into ImageControl
005438  000110  #CONST
005439  000431  #END
005440  000432        
005441  000433  #constant  Strings48Size     0
005442  000433  #constant  Strings48Size     0
005443  000434  #constant  Strings48StartH   0
005444  000434  #constant  Strings48StartH   0
005445  000435  #constant  Strings48StartL   0
005446  000435  #constant  Strings48StartL   0
005447  000436  #constant  Strings3StartH   0x0
005448  000436  #constant  Strings3StartH   0x0
005449  000437  #constant  Strings3StartL   0x0
005450  000437  #constant  Strings3StartL   0x0
005451  000438  #constant  Strings1StartH   0x0
005452  000438  #constant  Strings1StartH   0x0
005453  000439  #constant  Strings1StartL   0x200
005454  000439  #constant  Strings1StartL   0x200
005455  000440  #constant  Strings7StartH   0x0
005456  000440  #constant  Strings7StartH   0x0
005457  000441  #constant  Strings7StartL   0x400
005458  000441  #constant  Strings7StartL   0x400
005459  000442  #constant  Strings8StartH   0x0
005460  000442  #constant  Strings8StartH   0x0
005461  000443  #constant  Strings8StartL   0x600
005462  000443  #constant  Strings8StartL   0x600
005463  000444  #constant  Strings12StartH   0x0
005464  000444  #constant  Strings12StartH   0x0
005465  000445  #constant  Strings12StartL   0x800
005466  000445  #constant  Strings12StartL   0x800
005467  000446  #constant  Strings23StartH   0x0
005468  000446  #constant  Strings23StartH   0x0
005469  000447  #constant  Strings23StartL   0xA00
005470  000447  #constant  Strings23StartL   0xA00
005471  000448  #constant  Strings24StartH   0x0
005472  000448  #constant  Strings24StartH   0x0
005473  000449  #constant  Strings24StartL   0xC00
005474  000449  #constant  Strings24StartL   0xC00
005475  000450  #constant  Strings25StartH   0x0
005476  000450  #constant  Strings25StartH   0x0
005477  000451  #constant  Strings25StartL   0xE00
005478  000451  #constant  Strings25StartL   0xE00
005479  000452  #constant  Strings26StartH   0x0
005480  000452  #constant  Strings26StartH   0x0
005481  000453  #constant  Strings26StartL   0x1000
005482  000453  #constant  Strings26StartL   0x1000
005483  000454  #constant  Strings16StartH   0x0
005484  000454  #constant  Strings16StartH   0x0
005485  000455  #constant  Strings16StartL   0x1200
005486  000455  #constant  Strings16StartL   0x1200
005487  000456  #constant  Strings30StartH   0x0
005488  000456  #constant  Strings30StartH   0x0
005489  000457  #constant  Strings30StartL   0x1400
005490  000457  #constant  Strings30StartL   0x1400
005491  000458  #constant  Strings2StartH   0x0
005492  000458  #constant  Strings2StartH   0x0
005493  000459  #constant  Strings2StartL   0x1600
005494  000459  #constant  Strings2StartL   0x1600
005495  000460  #constant  Strings0StartH   0x0
005496  000460  #constant  Strings0StartH   0x0
005497  000461  #constant  Strings0StartL   0x1800
005498  000461  #constant  Strings0StartL   0x1800
005499  000462  #constant  Strings9StartH   0x0
005500  000462  #constant  Strings9StartH   0x0
005501  000463  #constant  Strings9StartL   0x1A00
005502  000463  #constant  Strings9StartL   0x1A00
005503  000464  #constant  Strings34StartH   0x0
005504  000464  #constant  Strings34StartH   0x0
005505  000465  #constant  Strings34StartL   0x1C00
005506  000465  #constant  Strings34StartL   0x1C00
005507  000466  #constant  Strings36StartH   0x0
005508  000466  #constant  Strings36StartH   0x0
005509  000467  #constant  Strings36StartL   0x1E00
005510  000467  #constant  Strings36StartL   0x1E00
005511  000468  #constant  Strings37StartH   0x0
005512  000468  #constant  Strings37StartH   0x0
005513  000469  #constant  Strings37StartL   0x2000
005514  000469  #constant  Strings37StartL   0x2000
005515  000470  #constant  Strings4StartH   0x0
005516  000470  #constant  Strings4StartH   0x0
005517  000471  #constant  Strings4StartL   0x2200
005518  000471  #constant  Strings4StartL   0x2200
005519  000472  #constant  Strings40StartH   0x0
005520  000472  #constant  Strings40StartH   0x0
005521  000473  #constant  Strings40StartL   0x2400
005522  000473  #constant  Strings40StartL   0x2400
005523  000474  #constant  Strings41StartH   0x0
005524  000474  #constant  Strings41StartH   0x0
005525  000475  #constant  Strings41StartL   0x2600
005526  000475  #constant  Strings41StartL   0x2600
005527  000476  #constant  Strings42StartH   0x0
005528  000476  #constant  Strings42StartH   0x0
005529  000477  #constant  Strings42StartL   0x2800
005530  000477  #constant  Strings42StartL   0x2800
005531  000478  #constant  Strings5StartH   0x0
005532  000478  #constant  Strings5StartH   0x0
005533  000479  #constant  Strings5StartL   0x2A00
005534  000479  #constant  Strings5StartL   0x2A00
005535  000480  #constant  Strings10StartH   0x0
005536  000480  #constant  Strings10StartH   0x0
005537  000481  #constant  Strings10StartL   0x2C00
005538  000481  #constant  Strings10StartL   0x2C00
005539  000482  #constant  Strings17StartH   0x0
005540  000482  #constant  Strings17StartH   0x0
005541  000483  #constant  Strings17StartL   0x2E00
005542  000483  #constant  Strings17StartL   0x2E00
005543  000484  #constant  Strings13StartH   0x0
005544  000484  #constant  Strings13StartH   0x0
005545  000485  #constant  Strings13StartL   0x3000
005546  000485  #constant  Strings13StartL   0x3000
005547  000486  #constant  Strings14StartH   0x0
005548  000486  #constant  Strings14StartH   0x0
005549  000487  #constant  Strings14StartL   0x3200
005550  000487  #constant  Strings14StartL   0x3200
005551  000488  #constant  Strings15StartH   0x0
005552  000488  #constant  Strings15StartH   0x0
005553  000489  #constant  Strings15StartL   0x3400
005554  000489  #constant  Strings15StartL   0x3400
005555  000490  #constant  Strings18StartH   0x0
005556  000490  #constant  Strings18StartH   0x0
005557  000491  #constant  Strings18StartL   0x3600
005558  000491  #constant  Strings18StartL   0x3600
005559  000492  #constant  Strings19StartH   0x0
005560  000492  #constant  Strings19StartH   0x0
005561  000493  #constant  Strings19StartL   0x3800
005562  000493  #constant  Strings19StartL   0x3800
005563  000494  #constant  Strings20StartH   0x0
005564  000494  #constant  Strings20StartH   0x0
005565  000495  #constant  Strings20StartL   0x3A00
005566  000495  #constant  Strings20StartL   0x3A00
005567  000496  #constant  Strings21StartH   0x0
005568  000496  #constant  Strings21StartH   0x0
005569  000497  #constant  Strings21StartL   0x3C00
005570  000497  #constant  Strings21StartL   0x3C00
005571  000498  #constant  Strings22StartH   0x0
005572  000498  #constant  Strings22StartH   0x0
005573  000499  #constant  Strings22StartL   0x3E00
005574  000499  #constant  Strings22StartL   0x3E00
005575  000500  #constant  Strings27StartH   0x0
005576  000500  #constant  Strings27StartH   0x0
005577  000501  #constant  Strings27StartL   0x4000
005578  000501  #constant  Strings27StartL   0x4000
005579  000502  #constant  Strings28StartH   0x0
005580  000502  #constant  Strings28StartH   0x0
005581  000503  #constant  Strings28StartL   0x4200
005582  000503  #constant  Strings28StartL   0x4200
005583  000504  #constant  Strings46StartH   0x0
005584  000504  #constant  Strings46StartH   0x0
005585  000505  #constant  Strings46StartL   0x4400
005586  000505  #constant  Strings46StartL   0x4400
005587  000506  #constant  Strings6StartH   0x0
005588  000506  #constant  Strings6StartH   0x0
005589  000507  #constant  Strings6StartL   0x4600
005590  000507  #constant  Strings6StartL   0x4600
005591  000508  #constant  Strings29StartH   0x0
005592  000508  #constant  Strings29StartH   0x0
005593  000509  #constant  Strings29StartL   0x4800
005594  000509  #constant  Strings29StartL   0x4800
005595  000510  #constant  Strings31StartH   0x0
005596  000510  #constant  Strings31StartH   0x0
005597  000511  #constant  Strings31StartL   0x4A00
005598  000511  #constant  Strings31StartL   0x4A00
005599  000512  #constant  Strings32StartH   0x0
005600  000512  #constant  Strings32StartH   0x0
005601  000513  #constant  Strings32StartL   0x4C00
005602  000513  #constant  Strings32StartL   0x4C00
005603  000514  #constant  Strings33StartH   0x0
005604  000514  #constant  Strings33StartH   0x0
005605  000515  #constant  Strings33StartL   0x4E00
005606  000515  #constant  Strings33StartL   0x4E00
005607  000516  #constant  Strings35StartH   0x0
005608  000516  #constant  Strings35StartH   0x0
005609  000517  #constant  Strings35StartL   0x5000
005610  000517  #constant  Strings35StartL   0x5000
005611  000518  #constant  Strings38StartH   0x0
005612  000518  #constant  Strings38StartH   0x0
005613  000519  #constant  Strings38StartL   0x5200
005614  000519  #constant  Strings38StartL   0x5200
005615  000520  #constant  Strings47StartH   0x0
005616  000520  #constant  Strings47StartH   0x0
005617  000521  #constant  Strings47StartL   0x5400
005618  000521  #constant  Strings47StartL   0x5400
005619  000522  #constant  Strings43StartH   0x0
005620  000522  #constant  Strings43StartH   0x0
005621  000523  #constant  Strings43StartL   0x5600
005622  000523  #constant  Strings43StartL   0x5600
005623  000524  #constant  Strings11StartH   0x0
005624  000524  #constant  Strings11StartH   0x0
005625  000525  #constant  Strings11StartL   0x5800
005626  000525  #constant  Strings11StartL   0x5800
005627  000526  #constant  Strings45StartH   0x0
005628  000526  #constant  Strings45StartH   0x0
005629  000527  #constant  Strings45StartL   0x5A00
005630  000527  #constant  Strings45StartL   0x5A00
005631  000528  #constant  Strings39StartH   0x0
005632  000528  #constant  Strings39StartH   0x0
005633  000529  #constant  Strings39StartL   0x5C00
005634  000529  #constant  Strings39StartL   0x5C00
005635  000530  #constant  Strings44StartH   0x0
005636  000530  #constant  Strings44StartH   0x0
005637  000531  #constant  Strings44StartL   0x5E00
005638  000531  #constant  Strings44StartL   0x5E00
005639  000532  #constant  Strings49StartH   0x0
005640  000532  #constant  Strings49StartH   0x0
005641  000533  #constant  Strings49StartL   0x6000
005642  000533  #constant  Strings49StartL   0x6000
005643  000534  #constant  Strings52StartH   0x0
005644  000534  #constant  Strings52StartH   0x0
005645  000535  #constant  Strings52StartL   0x6200
005646  000535  #constant  Strings52StartL   0x6200
005647  000536  #constant  Strings50StartH   0x0
005648  000536  #constant  Strings50StartH   0x0
005649  000537  #constant  Strings50StartL   0x6400
005650  000537  #constant  Strings50StartL   0x6400
005651  000538  #constant  Strings51StartH   0x0
005652  000538  #constant  Strings51StartH   0x0
005653  000539  #constant  Strings51StartL   0x6600
005654  000539  #constant  Strings51StartL   0x6600
005655  000540  #IFNOT EXISTS NOGLOBALS
005656  000541  var hndl ;
005657  000542  #ENDIF
005658  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005659  000013  #inherit "CLPrintStrings.inc"
005660  000013  #inherit "CLPrintStrings.inc"
005661  000001  func PrintStrings(var ID, var *msgid, var String)
005662  000002      var StringID, i, ch, offs32[2], res32[2];
005663  000003      StringID := oStringss[1+ID] ;
005664  000004      if (String)
005665  000005          stringsCV[ID] := -1 ;
005666  000006      else
005667  000007          stringsCV[ID] := msgid ;
005668  000008      endif
005669  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005670  000010      txt_FontID(hFonts[ID]) ;
005671  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005672  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005673  000013        
005674  000014      if (*(StringID + Ofs_String_Transparent))
005675  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005676  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005677  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005678  000018      else
005679  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005680  000020          gfx_Clipping(ON) ;
005681  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005682  000022          gfx_Clipping(OFF) ;
005683  000023        
005684  000024      endif
005685  000025        
005686  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005687  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005688  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005689  000029        
005690  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005691  000031        
005692  000032      if (String)
005693  000033          i := 0 ;
005694  000034          ch := msgid[i++] ;
005695  000035          while (ch != 0)
005696  000036              putch(ch) ;
005697  000037              ch := msgid[i++] ;
005698  000038          wend
005699  000039      else
005700  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005701  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005702  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005703  000043          uadd_3232(res32,res32,offs32) ;
005704  000044          file_Seek(hstrings, res32[1], res32[0]);
005705  000045          repeat
005706  000046              if (*(StringID + Ofs_String_Ansi))
005707  000047                  ch := file_GetC(hstrings) ;
005708  000048              else
005709  000049                  ch := file_GetW(hstrings) ;
005710  000050              endif
005711  000051              putch(ch) ;
005712  000052          until (ch == 0) ;
005713  000053      endif
005714  000054        
005715  000055  endfunc
005716  000056        
005717  000014        
005718  000015  #constant IPDatasize 22
005719  000015  #constant IPDatasize 22
005720  000016        
005721  000017  #CONST
005722  000021  #END
005723  000022        
005724  000023  #CONST
005725  000130  #END
005726  000131        
005727  000671  #END
5728  3304
5729  3305
5730  3306
5731  3307
5732  3308
5733  3309
5734  330A
5735  330B
5736  330C
5737  330D
5738  330E
5739  330F
5740  3310
5741  3311
5742  3312
5743  3313
5744  3314
5745  3315
5746  3316
5747  3317
5748  3318
5749  3319
5750  331A
5751  331B
5752  331C
5753  331D
5754  331E
5755  331F
5756  3320
5757  3321
5758  3322
5759  3323
5760  3324
5761  3325
5762  3326
5763  3327
5764  3328
5765  3329
5766  332A
5767  332B
5768  332C
5769  332D
5770  332E
5771  332F
5772  3330
5773  3331
5774  3332
5775  3333
5776  3334
5777  3335
5778  3336
5779  3337
5780  3338
5781  3339
5782  333A
5783  333B
5784  333C
5785  333D
5786  333E
5787  333F
5788  3340
5789  3341
5790  3342
5791  3343
5792  3344
5793  3345
5794  3346
5795  3347
5796  3348
5797  3349
5798  334A
5799  334B
5800  334C
5801  334D
5802  334E
5803  334F
5804  3350
5805  3351
5806  3352
5807  3353
5808  3354
5809  3355
5810  3356
5811  3357
5812  3358
5813  3359
5814  335A
5815  335B
5816  335C
5817  335D
5818  335E
5819  335F
5820  3360
5821  3361
5822  3362
5823  3363
5824  3364
5825  3365
5826  3366
5827  3367
5828  3368
5829  3369
5830  336A
5831  336B
5832  336C
5833  336D
5834  336E
5835  336F
5836  3370
5837  3371
5838  3372
5839  3373
5840  3374
5841  3375
5842  3376
5843  3377
5844  3378
5845  3379
5846  337A
5847  337B
5848  337C
5849  337D
5850  337E
5851  337F
5852  3380
5853  3381
5854  3382
5855  3383
5856  3384
5857  3385
5858  3386
5859  3387
5860  3388
5861  3389
5862  338A
5863  338B
5864  338C
5865  338D
5866  338E
5867  338F
5868  3390
5869  3391
5870  3392
5871  3393
5872  3394
5873  3395
5874  3396
5875  3397
5876  3398
5877  3399
5878  339A
5879  339B
5880  339C
5881  339D
5882  339E
5883  339F
5884  33A0
5885  33A1
5886  33A2
5887  33A3
5888  33A4
5889  33A5
5890  33A6
5891  33A7
5892  33A8
5893  33A9
5894  33AA
5895  33AB
5896  33AC
5897  33AD
5898  33AE
5899  33AF
5900  33B0
5901  33B1
5902  33B2
5903  33B3
5904  33B4
5905  33B5
5906  33B6
5907  33B7
5908  33B8
5909  33B9
5910  33BA
5911  33BB
5912  33BC
5913  33BD
5914  33BE
5915  33BF
5916  33C0
5917  33C1
5918  33C2
5919  33C3
5920  33C4
5921  33C5
5922  33C6
5923  33C7
5924  33C8
5925  33C9
5926  33CA
5927  33CB
5928  33CC
5929  33CD
5930  33CE
5931  33CF
5932  33D0
5933  33D1
5934  33D2
5935  33D3
5936  33D4
5937  33D5
5938  33D6
5939  33D7
5940  33D8
5941  33D9
5942  33DA
5943  33DB
5944  33DC
5945  33DD
5946  33DE
5947  33DF
5948  33E0
5949  33E1
5950  33E2
5951  33E3
5952  33E4
5953  33E5
5954  33E6
5955  33E7
5956  33E8
5957  33E9
5958  33EA
5959  33EB
5960  33EC
5961  33ED
5962  33EE
5963  33EF
5964  33F0
5965  33F1
5966  33F2
5967  33F3
5968  33F4
5969  33F5
5970  33F6
5971  33F7
5972  33F8
5973  33F9
5974  33FA
5975  33FB
5976  33FC
5977  33FD
5978  33FE
5979  33FF
5980  3400
5981  3401
5982  3402
5983  3403
5984  3404
5985  3405
5986  3406
5987  3407
5988  3408
5989  3409
5990  340A
5991  340B
5992  340C
5993  340D
5994  340E
5995  340F
5996  3410
5997  3411
5998  3412
5999  3413
6000  3414
6001  3415
6002  3416
6003  3417
6004  3418
6005  3419
6006  341A
6007  341B
6008  341C
6009  341D
6010  341E
6011  341F
6012  3420
6013  3421
6014  3422
6015  3423
6016  3424
6017  3425
6018  3426
6019  3427
6020  3428
6021  3429
6022  342A
6023  342B
6024  342C
6025  342D
6026  342E
6027  342F
6028  3430
6029  3431
6030  3432
6031  3433
6032  3434
6033  3435
6034  3436
6035  3437
6036  3438
6037  3439
6038  343A
6039  343B
6040  343C
6041  343D
6042  343E
6043  343F
6044  3440
6045  3441
6046  3442
6047  3443
6048  3444
6049  3445
6050  3446
6051  3447
6052  3448
6053  3449
6054  344A
6055  344B
6056  344C
6057  344D
6058  344E
6059  344F
6060  3450
6061  3451
6062  3452
6063  3453
6064  3454
6065  3455
6066  3456
6067  3457
6068  3458
6069  3459
6070  345A
6071  345B
6072  345C
6073  345D
6074  345E
6075  345F
6076  3460
6077  3461
6078  3462
6079  3463
6080  3464
6081  3465
6082  3466
6083  3467
6084  3468
6085  3469
6086  346A
6087  346B
6088  346C
6089  346D
6090  346E
6091  346F
6092  3470
6093  3471
6094  3472
6095  3473
6096  3474
6097  3475
6098  3476
6099  3477
6100  3478
6101  3479
6102  347A
6103  347B
6104  347C
6105  347D
6106  347E
6107  347F
6108  3480
6109  3481
6110  3482
6111  3483
6112  3484
6113  3485
6114  3486
6115  3487
6116  3488
6117  3489
6118  348A
6119  348B
6120  348C
6121  348D
6122  348E
6123  348F
6124  3490
6125  3491
6126  3492
6127  3493
6128  3494
6129  3495
6130  3496
6131  3497
6132  3498
6133  3499
6134  349A
6135  349B
6136  349C
6137  349D
6138  349E
6139  349F
6140  34A0
6141  34A1
6142  34A2
6143  34A3
6144  34A4
6145  34A5
6146  34A6
6147  34A7
6148  34A8
6149  34A9
6150  34AA
6151  34AB
6152  34AC
6153  34AD
6154  34AE
6155  34AF
6156  34B0
6157  34B1
6158  34B2
6159  34B3
6160  34B4
6161  34B5
6162  34B6
6163  34B7
6164  34B8
6165  34B9
6166  34BA
6167  34BB
6168  34BC
6169  34BD
6170  34BE
6171  34BF
6172  34C0
6173  34C1
6174  34C2
6175  34C3
6176  34C4
6177  34C5
6178  34C6
6179  34C7
6180  34C8
6181  34C9
6182  34CA
6183  34CB
6184  34CC
6185  34CD
6186  34CE
6187  34CF
6188  34D0
6189  34D1
6190  34D2
6191  34D3
6192  34D4
6193  34D5
6194  34D6
6195  34D7
6196  34D8
6197  34D9
6198  34DA
6199  34DB
6200  34DC
6201  34DD
6202  34DE
6203  34DF
6204  34E0
6205  34E1
6206  34E2
6207  34E3
6208  34E4
6209  34E5
6210  34E6
6211  34E7
6212  34E8
6213  34E9
6214  34EA
6215  34EB
6216  34EC
6217  34ED
6218  34EE
6219  34EF
6220  34F0
6221  34F1
6222  34F2
6223  34F3
6224  34F4
6225  34F5
6226  34F6
6227  34F7
6228  34F8
6229  34F9
6230  34FA
6231  34FB
6232  34FC
6233  34FD
6234  34FE
6235  34FF
6236  3500
6237  3501
6238  3502
6239  3503
6240  3504
6241  3505
6242  3506
6243  3507
6244  3508
6245  3509
6246  350A
6247  350B
6248  350C
6249  350D
6250  350E
6251  350F
6252  3510
6253  3511
6254  3512
6255  3513
6256  3514
6257  3515
6258  3516
6259  3517
6260  3518
6261  3519
6262  351A
6263  351B
6264  351C
6265  351D
6266  351E
6267  351F
6268  3520
6269  3521
6270  3522
6271  3523
6272  3524
6273  3525
6274  3526
6275  3527
6276  3528
6277  3529
6278  352A
6279  352B
6280  352C
6281  352D
6282  352E
6283  352F
6284  3530
6285  3531
6286  3532
6287  3533
6288  3534
6289  3535
6290  3536
6291  3537
6292  3538
6293  3539
6294  353A
6295  353B
6296  353C
6297  353D
6298  353E
6299  353F
6300  3540
6301  3541
6302  3542
6303  3543
6304  3544
6305  3545
6306  3546
6307  3547
6308  3548
6309  3549
6310  354A
6311  354B
6312  354C
6313  354D
6314  354E
6315  354F
6316  3550
6317  3551
6318  3552
6319  3553
6320  3554
6321  3555
6322  3556
6323  3557
6324  3558
6325  3559
6326  355A
6327  355B
6328  355C
6329  355D
6330  355E
6331  355F
6332  3560
6333  3561
6334  3562
6335  3563
6336  3564
6337  3565
6338  3566
6339  3567
6340  3568
6341  3569
6342  356A
6343  356B
6344  356C
6345  356D
6346  356E
6347  356F
6348  3570
6349  3571
6350  3572
6351  3573
6352  3574
6353  3575
6354  3576
6355  3577
6356  3578
6357  3579
6358  357A
6359  357B
6360  357C
6361  357D
6362  357E
6363  357F
6364  3580
6365  3581
6366  3582
6367  3583
6368  3584
6369  3585
6370  3586
6371  3587
6372  3588
6373  3589
6374  358A
6375  358B
6376  358C
6377  358D
6378  358E
6379  358F
6380  3590
6381  3591
6382  3592
6383  3593
6384  3594
6385  3595
6386  3596
6387  3597
6388  3598
6389  3599
6390  359A
6391  359B
6392  359C
6393  359D
6394  359E
6395  359F
6396  35A0
6397  35A1
6398  35A2
6399  35A3
6400  35A4
6401  35A5
6402  35A6
6403  35A7
6404  35A8
6405  35A9
6406  35AA
6407  35AB
6408  35AC
6409  35AD
6410  35AE
6411  35AF
6412  35B0
6413  35B1
6414  35B2
6415  35B3
6416  35B4
6417  35B5
6418  35B6
6419  35B7
6420  35B8
6421  35B9
6422  35BA
6423  35BB
6424  35BC
6425  35BD
6426  35BE
6427  35BF
6428  35C0
6429  35C1
6430  35C2
6431  35C3
6432  35C4
6433  35C5
6434  35C6
6435  35C7
6436  35C8
6437  35C9
6438  35CA
6439  35CB
6440  35CC
6441  35CD
6442  35CE
6443  35CF
6444  35D0
6445  35D1
6446  35D2
6447  35D3
6448  35D4
6449  35D5
6450  35D6
6451  35D7
6452  35D8
6453  35D9
6454  35DA
6455  35DB
6456  35DC
6457  35DD
6458  35DE
6459  35DF
6460  35E0
6461  35E1
6462  35E2
6463  35E3
6464  35E4
6465  35E5
6466  35E6
6467  35E7
6468  35E8
6469  35E9
6470  35EA
6471  35EB
6472  35EC
6473  35ED
6474  35EE
6475  35EF
6476  35F0
6477  35F1
6478  35F2
6479  35F3
6480  35F4
6481  35F5
6482  35F6
6483  35F7
6484  35F8
6485  35F9
6486  35FA
6487  35FB
6488  35FC
6489  35FD
6490  35FE
6491  35FF
6492  3600
6493  3601
6494  3602
6495  3603
6496  3604
6497  3605
6498  3606
6499  3607
6500  3608
6501  3609
6502  360A
6503  360B
6504  360C
6505  360D
6506  360E
6507  360F
6508  3610
6509  3611
6510  3612
6511  3613
6512  3614
6513  3615
6514  3616
6515  3617
6516  3618
6517  3619
6518  361A
6519  361B
6520  361C
6521  361D
6522  361E
6523  361F
6524  3620
6525  3621
6526  3622
6527  3623
6528  3624
6529  3625
6530  3626
6531  3627
6532  3628
6533  3629
6534  362A
6535  362B
6536  362C
6537  362D
6538  362E
6539  362F
6540  3630
6541  3631
6542  3632
6543  3633
6544  3634
6545  3635
6546  3636
6547  3637
6548  3638
6549  3639
6550  363A
6551  363B
6552  363C
6553  363D
6554  363E
6555  363F
6556  3640
6557  3641
6558  3642
6559  3643
6560  3644
6561  3645
6562  3646
6563  3647
6564  3648
6565  3649
6566  364A
6567  364B
6568  364C
6569  364D
6570  364E
6571  364F
6572  3650
6573  3651
6574  3652
6575  3653
6576  3654
6577  3655
6578  3656
6579  3657
6580  3658
6581  3659
6582  365A
6583  365B
6584  365C
6585  365D
6586  365E
6587  365F
6588  3660
6589  3661
6590  3662
6591  3663
6592  3664
6593  3665
6594  3666
6595  3667
6596  3668
6597  3669
6598  366A
6599  366B
6600  366C
6601  366D
6602  366E
6603  366F
6604  3670
6605  3671
6606  3672
6607  3673
6608  3674
6609  3675
6610  3676
6611  3677
6612  3678
6613  3679
6614  367A
6615  367B
6616  367C
6617  367D
6618  367E
6619  367F
6620  3680
6621  3681
6622  3682
6623  3683
6624  3684
6625  3685
6626  3686
6627  3687
6628  3688
6629  3689
6630  368A
6631  368B
6632  368C
6633  368D
6634  368E
6635  368F
6636  3690
6637  3691
6638  3692
6639  3693
6640  3694
6641  3695
6642  3696
6643  3697
6644  3698
6645  3699
6646  369A
6647  369B
6648  369C
6649  369D
6650  369E
6651  369F
6652  36A0
6653  36A1
6654  36A2
6655  36A3
6656  36A4
6657  36A5
6658  36A6
6659  36A7
6660  36A8
6661  36A9
6662  36AA
6663  36AB
6664  36AC
6665  36AD
6666  36AE
6667  36AF
6668  36B0
6669  36B1
6670  36B2
6671  36B3
6672  36B4
6673  36B5
6674  36B6
6675  36B7
6676  36B8
6677  36B9
6678  36BA
6679  36BB
6680  36BC
6681  36BD
6682  36BE
6683  36BF
6684  36C0
6685  36C1
6686  36C2
6687  36C3
6688  36C4
6689  36C5
6690  36C6
6691  36C7
6692  36C8
6693  36C9
6694  36CA
6695  36CB
6696  36CC
6697  36CD
6698  36CE
6699  36CF
6700  36D0
6701  36D1
6702  36D2
6703  36D3
6704  36D4
6705  36D5
6706  36D6
6707  36D7
6708  36D8
6709  36D9
6710  36DA
6711  36DB
6712  36DC
6713  36DD
6714  36DE
6715  36DF
6716  36E0
6717  36E1
6718  36E2
6719  36E3
6720  36E4
6721  36E5
6722  36E6
6723  36E7
6724  36E8
6725  36E9
6726  36EA
6727  36EB
6728  36EC
6729  36ED
6730  36EE
6731  36EF
6732  36F0
6733  36F1
6734  36F2
6735  36F3
6736  36F4
6737  36F5
6738  36F6
6739  36F7
6740  36F8
6741  36F9
6742  36FA
6743  36FB
6744  36FC
6745  36FD
6746  36FE
6747  36FF
6748  3700
6749  3701
6750  3702
6751  3703
6752  3704
6753  3705
6754  3706
6755  3707
6756  3708
6757  3709
6758  370A
6759  370B
6760  370C
6761  370D
6762  370E
6763  370F
6764  3710
6765  3711
6766  3712
6767  3713
6768  3714
6769  3715
6770  3716
6771  3717
6772  3718
6773  3719
6774  371A
6775  371B
6776  371C
6777  371D
6778  371E
6779  371F
6780  3720
6781  3721
6782  3722
6783  3723
6784  3724
6785  3725
6786  3726
6787  3727
6788  3728
6789  3729
6790  372A
6791  372B
6792  372C
6793  372D
6794  372E
6795  372F
6796  3730
6797  3731
6798  3732
6799  3733
6800  3734
6801  3735
6802  3736
6803  3737
6804  3738
6805  3739
6806  373A
6807  373B
6808  373C
6809  373D
6810  373E
6811  373F
6812  3740
6813  3741
6814  3742
6815  3743
6816  3744
6817  3745
6818  3746
6819  3747
6820  3748
6821  3749
6822  374A
6823  374B
6824  374C
6825  374D
6826  374E
6827  374F
6828  3750
6829  3751
6830  3752
6831  3753
6832  3754
6833  3755
6834  3756
6835  3757
6836  3758
6837  3759
6838  375A
6839  375B
6840  375C
6841  375D
6842  375E
6843  375F
6844  3760
6845  3761
6846  3762
6847  3763
6848  3764
6849  3765
6850  3766
6851  3767
6852  3768
6853  3769
6854  376A
6855  376B
6856  376C
6857  376D
6858  376E
6859  376F
6860  3770
6861  3771
6862  3772
6863  3773
6864  3774
6865  3775
6866  3776
6867  3777
6868  3778
6869  3779
6870  377A
6871  377B
6872  377C
6873  377D
6874  377E
6875  377F
6876  3780
6877  3781
6878  3782
6879  3783
6880  3784
6881  3785
6882  3786
6883  3787
6884  3788
6885  3789
6886  378A
6887  378B
6888  378C
6889  378D
6890  378E
6891  378F
6892  3790
6893  3791
6894  3792
6895  3793
6896  3794
6897  3795
6898  3796
6899  3797
6900  3798
6901  3799
6902  379A
6903  379B
6904  379C
6905  379D
6906  379E
6907  379F
6908  37A0
6909  37A1
6910  37A2
6911  37A3
6912  37A4
6913  37A5
6914  37A6
6915  37A7
6916  37A8
6917  37A9
6918  37AA
6919  37AB
6920  37AC
6921  37AD
6922  37AE
6923  37AF
6924  37B0
6925  37B1
6926  37B2
6927  37B3
6928  37B4
6929  37B5
6930  37B6
6931  37B7
6932  37B8
6933  37B9
6934  37BA
6935  37BB
6936  37BC
6937  37BD
6938  37BE
6939  37BF
6940  37C0
6941  37C1
6942  37C2
6943  37C3
6944  37C4
6945  37C5
6946  37C6
6947  37C7
6948  37C8
6949  37C9
6950  37CA
6951  37CB
6952  37CC
6953  37CD
6954  37CE
6955  37CF
6956  37D0
6957  37D1
6958  37D2
6959  37D3
6960  37D4
6961  37D5
6962  37D6
6963  37D7
6964  37D8
6965  37D9
6966  37DA
6967  37DB
6968  37DC
6969  37DD
6970  37DE
6971  37DF
6972  37E0
6973  37E1
6974  37E2
6975  37E3
6976  37E4
6977  37E5
6978  37E6
6979  37E7
6980  37E8
6981  37E9
6982  37EA
6983  37EB
6984  37EC
6985  37ED
6986  37EE
6987  37EF
6988  37F0
6989  37F1
6990  37F2
6991  37F3
6992  37F4
6993  37F5
6994  37F6
6995  37F7
6996  37F8
6997  37F9
6998  37FA
6999  37FB
7000  37FC
7001  37FD
7002  37FE
7003  37FF
7004  3800
7005  3801
7006  3802
7007  3803
7008  3804
7009  3805
7010  3806
7011  3807
7012  3808
7013  3809
7014  380A
7015  380B
7016  380C
7017  380D
7018  380E
7019  380F
7020  3810
7021  3811
7022  3812
7023  3813
7024  3814
7025  3815
7026  3816
7027  3817
7028  3818
7029  3819
7030  381A
7031  381B
7032  381C
7033  381D
7034  381E
7035  381F
7036  3820
7037  3821
7038  3822
7039  3823
7040  3824
7041  3825
7042  3826
7043  3827
7044  3828
7045  3829
7046  382A
7047  382B
7048  382C
7049  382D
7050  382E
7051  382F
7052  3830
7053  3831
7054  3832
7055  3833
7056  3834
7057  3835
7058  3836
7059  3837
7060  3838
7061  3839
7062  383A
7063  383B
7064  383C
7065  383D
7066  383E
7067  383F
7068  3840
7069  3841
7070  3842
7071  3843
7072  3844
7073  3845
7074  3846
7075  3847
7076  3848
7077  3849
7078  384A
7079  384B
7080  384C
7081  384D
7082  384E
7083  384F
7084  3850
7085  3851
7086  3852
7087  3853
7088  3854
7089  3855
7090  3856
7091  3857
7092  3858
7093  3859
7094  385A
7095  385B
7096  385C
7097  385D
7098  385E
7099  385F
7100  3860
7101  3861
7102  3862
7103  3863
7104  3864
7105  3865
7106  3866
7107  3867
7108  3868
7109  3869
7110  386A
7111  386B
7112  386C
7113  386D
7114  386E
7115  386F
7116  3870
7117  3871
7118  3872
7119  3873
7120  3874
7121  3875
7122  3876
7123  3877
7124  3878
7125  3879
7126  387A
7127  387B
7128  387C
7129  387D
7130  387E
7131  387F
7132  3880
7133  3881
7134  3882
7135  3883
7136  3884
7137  3885
7138  3886
7139  3887
7140  3888
7141  3889
7142  388A
7143  388B
7144  388C
7145  388D
7146  388E
7147  388F
7148  3890
7149  3891
7150  3892
7151  3893
7152  3894
7153  3895
7154  3896
7155  3897
7156  3898
7157  3899
7158  389A
7159  389B
7160  389C
7161  389D
7162  389E
7163  389F
7164  38A0
7165  38A1
7166  38A2
7167  38A3
7168  38A4
7169  38A5
7170  38A6
7171  38A7
7172  38A8
7173  38A9
7174  38AA
7175  38AB
7176  38AC
7177  38AD
7178  38AE
7179  38AF
7180  38B0
7181  38B1
7182  38B2
7183  38B3
7184  38B4
7185  38B5
7186  38B6
7187  38B7
7188  38B8
7189  38B9
7190  38BA
7191  38BB
7192  38BC
7193  38BD
7194  38BE
7195  38BF
7196  38C0
7197  38C1
7198  38C2
7199  38C3
7200  38C4
7201  38C5
7202  38C6
7203  38C7
7204  38C8
7205  38C9
7206  38CA
7207  38CB
7208  38CC
7209  38CD
7210  38CE
7211  38CF
7212  38D0
7213  38D1
7214  38D2
7215  38D3
7216  38D4
7217  38D5
7218  38D6
7219  38D7
7220  38D8
7221  38D9
7222  38DA
7223  38DB
7224  38DC
7225  38DD
7226  38DE
7227  38DF
7228  38E0
7229  38E1
7230  38E2
7231  38E3
7232  38E4
7233  38E5
7234  38E6
7235  38E7
7236  38E8
7237  38E9
7238  38EA
7239  38EB
7240  38EC
7241  38ED
7242  38EE
7243  38EF
7244  38F0
7245  38F1
7246  38F2
7247  38F3
7248  38F4
7249  38F5
7250  38F6
7251  38F7
7252  38F8
7253  38F9
7254  38FA
7255  38FB
7256  38FC
7257  38FD
7258  38FE
7259  38FF
7260  3900
7261  3901
7262  3902
7263  3903
7264  3904
7265  3905
7266  3906
7267  3907
7268  3908
7269  3909
7270  390A
7271  390B
7272  390C
7273  390D
7274  390E
7275  390F
7276  3910
7277  3911
7278  3912
7279  3913
7280  3914
7281  3915
7282  3916
7283  3917
7284  3918
7285  3919
7286  391A
7287  391B
7288  391C
7289  391D
7290  391E
7291  391F
7292  3920
7293  3921
7294  3922
7295  3923
7296  3924
7297  3925
7298  3926
7299  3927
7300  3928
7301  3929
7302  392A
7303  392B
7304  392C
7305  392D
7306  392E
7307  392F
7308  3930
7309  3931
7310  3932
7311  3933
7312  3934
7313  3935
7314  3936
7315  3937
7316  3938
7317  3939
7318  393A
7319  393B
7320  393C
7321  393D
7322  393E
7323  393F
7324  3940
7325  3941
7326  3942
7327  3943
7328  3944
7329  3945
7330  3946
7331  3947
7332  3948
7333  3949
7334  394A
7335  394B
7336  394C
7337  394D
7338  394E
7339  394F
7340  3950
7341  3951
7342  3952
7343  3953
7344  3954
7345  3955
7346  3956
7347  3957
7348  3958
7349  3959
7350  395A
7351  395B
7352  395C
7353  395D
7354  395E
7355  395F
7356  3960
7357  3961
7358  3962
7359  3963
7360  3964
7361  3965
7362  3966
7363  3967
7364  3968
7365  3969
7366  396A
7367  396B
7368  396C
7369  396D
7370  396E
7371  396F
7372  3970
7373  3971
7374  3972
7375  3973
7376  3974
7377  3975
7378  3976
7379  3977
7380  3978
7381  3979
7382  397A
7383  397B
7384  397C
7385  397D
7386  397E
7387  397F
7388  3980
7389  3981
7390  3982
7391  3983
7392  3984
7393  3985
7394  3986
7395  3987
7396  3988
7397  3989
7398  398A
7399  398B
7400  398C
7401  398D
7402  398E
7403  398F
7404  3990
7405  3991
7406  3992
7407  3993
7408  3994
7409  3995
7410  3996
7411  3997
7412  3998
7413  3999
7414  399A
7415  399B
7416  399C
7417  399D
7418  399E
7419  399F
7420  39A0
7421  39A1
7422  39A2
7423  39A3
7424  39A4
7425  39A5
7426  39A6
7427  39A7
7428  39A8
7429  39A9
7430  39AA
7431  39AB
7432  39AC
7433  39AD
7434  39AE
7435  39AF
7436  39B0
7437  39B1
7438  39B2
7439  39B3
7440  39B4
7441  39B5
7442  39B6
7443  39B7
7444  39B8
7445  39B9
7446  39BA
7447  39BB
7448  39BC
7449  39BD
7450  39BE
7451  39BF
7452  39C0
7453  39C1
7454  39C2
7455  39C3
7456  39C4
7457  39C5
7458  39C6
7459  39C7
7460  39C8
7461  39C9
7462  39CA
7463  39CB
7464  39CC
7465  39CD
7466  39CE
7467  39CF
7468  39D0
7469  39D1
7470  39D2
7471  39D3
7472  39D4
7473  39D5
7474  39D6
7475  39D7
7476  39D8
7477  39D9
7478  39DA
7479  39DB
7480  39DC
7481  39DD
7482  39DE
7483  39DF
7484  39E0
7485  39E1
7486  39E2
7487  39E3
7488  39E4
7489  39E5
7490  39E6
7491  39E7
7492  39E8
7493  39E9
7494  39EA
7495  39EB
7496  39EC
7497  39ED
7498  39EE
7499  39EF
7500  39F0
7501  39F1
7502  39F2
7503  39F3
7504  39F4
7505  39F5
7506  39F6
7507  39F7
7508  39F8
7509  39F9
7510  39FA
7511  39FB
7512  39FC
7513  39FD
7514  39FE
7515  39FF
7516  3A00
7517  3A01
7518  3A02
7519  3A03
7520  3A04
7521  3A05
7522  3A06
7523  3A07
7524  3A08
7525  3A09
7526  3A0A
7527  3A0B
7528  3A0C
7529  3A0D
7530  3A0E
7531  3A0F
7532  3A10
7533  3A11
7534  3A12
7535  3A13
7536  3A14
7537  3A15
7538  3A16
7539  3A17
7540  3A18
7541  3A19
7542  3A1A
7543  3A1B
7544  3A1C
7545  3A1D
7546  3A1E
7547  3A1F
7548  3A20
7549  3A21
7550  3A22
7551  3A23
7552  3A24
7553  3A25
7554  3A26
7555  3A27
7556  3A28
7557  3A29
7558  3A2A
7559  3A2B
7560  3A2C
7561  3A2D
7562  3A2E
7563  3A2F
7564  3A30
7565  3A31
7566  3A32
7567  3A33
7568  3A34
7569  3A35
7570  3A36
7571  3A37
7572  3A38
7573  3A39
7574  3A3A
7575  3A3B
7576  3A3C
7577  3A3D
7578  3A3E
7579  3A3F
7580  3A40
7581  3A41
7582  3A42
7583  3A43
7584  3A44
7585  3A45
7586  3A46
7587  3A47
7588  3A48
7589  3A49
7590  3A4A
7591  3A4B
7592  3A4C
7593  3A4D
7594  3A4E
7595  3A4F
7596  3A50
7597  3A51
7598  3A52
7599  3A53
7600  3A54
7601  3A55
7602  3A56
7603  3A57
7604  3A58
7605  3A59
7606  3A5A
7607  3A5B
7608  3A5C
7609  3A5D
7610  3A5E
7611  3A5F
7612  3A60
7613  3A61
7614  3A62
7615  3A63
7616  3A64
7617  3A65
7618  3A66
7619  3A67
7620  3A68
7621  3A69
7622  3A6A
7623  3A6B
7624  3A6C
7625  3A6D
7626  3A6E
7627  3A6F
7628  3A70
7629  3A71
7630  3A72
7631  3A73
7632  3A74
7633  3A75
7634  3A76
7635  3A77
7636  3A78
7637  3A79
7638  3A7A
7639  3A7B
7640  3A7C
7641  3A7D
7642  3A7E
7643  3A7F
7644  3A80
7645  3A81
7646  3A82
7647  3A83
7648  3A84
7649  3A85
7650  3A86
7651  3A87
7652  3A88
7653  3A89
7654  3A8A
7655  3A8B
7656  3A8C
7657  3A8D
7658  3A8E
7659  3A8F
7660  3A90
7661  3A91
7662  3A92
7663  3A93
7664  3A94
7665  3A95
7666  3A96
7667  3A97
7668  3A98
7669  3A99
7670  3A9A
7671  3A9B
7672  3A9C
7673  3A9D
7674  3A9E
7675  3A9F
7676  3AA0
7677  3AA1
7678  3AA2
7679  3AA3
7680  3AA4
7681  3AA5
7682  3AA6
7683  3AA7
7684  3AA8
7685  3AA9
7686  3AAA
7687  3AAB
7688  3AAC
7689  3AAD
7690  3AAE
7691  3AAF
7692  3AB0
7693  3AB1
7694  3AB2
7695  3AB3
7696  3AB4
7697  3AB5
7698  3AB6
7699  3AB7
7700  3AB8
7701  3AB9
7702  3ABA
7703  3ABB
7704  3ABC
7705  3ABD
7706  3ABE
7707  3ABF
7708  3AC0
7709  3AC1
7710  3AC2
7711  3AC3
7712  3AC4
7713  3AC5
7714  3AC6
7715  3AC7
7716  3AC8
7717  3AC9
7718  3ACA
7719  3ACB
7720  3ACC
7721  3ACD
7722  3ACE
7723  3ACF
7724  3AD0
7725  3AD1
7726  3AD2
7727  3AD3
7728  3AD4
7729  3AD5
7730  3AD6
7731  3AD7
7732  3AD8
7733  3AD9
7734  3ADA
7735  3ADB
7736  3ADC
7737  3ADD
7738  3ADE
7739  3ADF
7740  3AE0
7741  3AE1
7742  3AE2
7743  3AE3
7744  3AE4
7745  3AE5
7746  3AE6
7747  3AE7
7748  3AE8
7749  3AE9
7750  3AEA
7751  3AEB
7752  3AEC
7753  3AED
7754  3AEE
7755  3AEF
7756  3AF0
7757  3AF1
7758  3AF2
7759  3AF3
7760  3AF4
7761  3AF5
7762  3AF6
7763  3AF7
7764  3AF8
7765  3AF9
7766  3AFA
7767  3AFB
7768  3AFC
7769  3AFD
7770  3AFE
7771  3AFF
7772  3B00
7773  3B01
7774  3B02
7775  3B03
7776  3B04
7777  3B05
7778  3B06
7779  3B07
7780  3B08
7781  3B09
7782  3B0A
7783  3B0B
7784  3B0C
7785  3B0D
7786  3B0E
7787  3B0F
7788  3B10
7789  3B11
7790  3B12
7791  3B13
7792  3B14
7793  3B15
7794  3B16
7795  3B17
7796  3B18
7797  3B19
7798  3B1A
7799  3B1B
7800  3B1C
7801  3B1D
7802  3B1E
7803  3B1F
7804  3B20
7805  3B21
7806  3B22
7807  3B23
7808  3B24
7809  3B25
7810  3B26
7811  3B27
7812  3B28
7813  3B29
7814  3B2A
7815  3B2B
7816  3B2C
7817  3B2D
7818  3B2E
7819  3B2F
7820  3B30
7821  3B31
7822  3B32
7823  3B33
7824  3B34
7825  3B35
7826  3B36
7827  3B37
7828  3B38
7829  3B39
7830  3B3A
7831  3B3B
7832  3B3C
7833  3B3D
7834  3B3E
7835  3B3F
7836  3B40
7837  3B41
7838  3B42
7839  3B43
7840  3B44
7841  3B45
7842  3B46
7843  3B47
7844  3B48
7845  3B49
7846  3B4A
7847  3B4B
7848  3B4C
7849  3B4D
7850  3B4E
7851  3B4F
7852  3B50
7853  3B51
7854  3B52
7855  3B53
7856  3B54
7857  3B55
7858  3B56
7859  3B57
7860  3B58
7861  3B59
7862  3B5A
7863  3B5B
7864  3B5C
7865  3B5D
7866  3B5E
7867  3B5F
7868  3B60
7869  3B61
7870  3B62
7871  3B63
7872  3B64
7873  3B65
7874  3B66
7875  3B67
7876  3B68
7877  3B69
7878  3B6A
7879  3B6B
7880  3B6C
7881  3B6D
7882  3B6E
7883  3B6F
7884  3B70
7885  3B71
7886  3B72
7887  3B73
7888  3B74
7889  3B75
7890  3B76
7891  3B77
7892  3B78
7893  3B79
7894  3B7A
7895  3B7B
7896  3B7C
7897  3B7D
7898  3B7E
7899  3B7F
7900  3B80
7901  3B81
7902  3B82
7903  3B83
7904  3B84
7905  3B85
7906  3B86
7907  3B87
7908  3B88
7909  3B89
7910  3B8A
7911  3B8B
7912  3B8C
7913  3B8D
7914  3B8E
7915  3B8F
7916  3B90
7917  3B91
7918  3B92
7919  3B93
7920  3B94
7921  3B95
7922  3B96
7923  3B97
7924  3B98
7925  3B99
7926  3B9A
7927  3B9B
7928  3B9C
7929  3B9D
7930  3B9E
7931  3B9F
7932  3BA0
7933  3BA1
7934  3BA2
7935  3BA3
7936  3BA4
7937  3BA5
7938  3BA6
7939  3BA7
7940  3BA8
7941  3BA9
7942  3BAA
7943  3BAB
7944  3BAC
7945  3BAD
7946  3BAE
7947  3BAF
7948  3BB0
7949  3BB1
7950  3BB2
7951  3BB3
7952  3BB4
7953  3BB5
7954  3BB6
7955  3BB7
7956  3BB8
7957  3BB9
7958  3BBA
7959  3BBB
7960  3BBC
7961  3BBD
7962  3BBE
7963  3BBF
7964  3BC0
7965  3BC1
7966  3BC2
7967  3BC3
7968  3BC4
7969  3BC5
7970  3BC6
7971  3BC7
7972  3BC8
7973  3BC9
7974  3BCA
7975  3BCB
7976  3BCC
7977  3BCD
7978  3BCE
7979  3BCF
7980  3BD0
7981  3BD1
7982  3BD2
7983  3BD3
7984  3BD4
7985  3BD5
7986  3BD6
7987  3BD7
7988  3BD8
7989  3BD9
7990  3BDA
7991  3BDB
7992  3BDC
7993  3BDD
7994  3BDE
7995  3BDF
7996  3BE0
7997  3BE1
7998  3BE2
7999  3BE3
8000  3BE4
8001  3BE5
8002  3BE6
8003  3BE7
8004  3BE8
8005  3BE9
8006  3BEA
8007  3BEB
8008  3BEC
8009  3BED
8010  3BEE
8011  3BEF
8012  3BF0
8013  3BF1
8014  3BF2
8015  3BF3
8016  3BF4
8017  3BF5
8018  3BF6
8019  3BF7
8020  3BF8
8021  3BF9
8022  3BFA
8023  3BFB
8024  3BFC
8025  3BFD
8026  3BFE
8027  3BFF
8028  3C00
8029  3C01
8030  3C02
8031  3C03
8032  3C04
8033  3C05
8034  3C06
8035  3C07
8036  3C08
8037  3C09
8038  3C0A
8039  3C0B
8040  3C0C
8041  3C0D
8042  3C0E
8043  3C0F
8044  3C10
8045  3C11
8046  3C12
8047  3C13
8048  3C14
8049  3C15
8050  3C16
8051  3C17
8052  3C18
8053  3C19
8054  3C1A
8055  3C1B
8056  3C1C
8057  3C1D
8058  3C1E
8059  3C1F
8060  3C20
8061  3C21
8062  3C22
8063  3C23
8064  3C24
8065  3C25
8066  3C26
8067  3C27
8068  3C28
8069  3C29
8070  3C2A
8071  3C2B
8072  3C2C
8073  3C2D
8074  3C2E
8075  3C2F
8076  3C30
8077  3C31
8078  3C32
8079  3C33
8080  3C34
8081  3C35
8082  3C36
8083  3C37
8084  3C38
8085  3C39
8086  3C3A
8087  3C3B
8088  3C3C
8089  3C3D
8090  3C3E
8091  3C3F
8092  3C40
8093  3C41
8094  3C42
8095  3C43
8096  3C44
8097  3C45
8098  3C46
8099  3C47
8100  3C48
8101  3C49
8102  3C4A
8103  3C4B
8104  3C4C
8105  3C4D
8106  3C4E
8107  3C4F
8108  3C50
8109  3C51
8110  3C52
8111  3C53
8112  3C54
8113  3C55
8114  3C56
8115  3C57
8116  3C58
8117  3C59
8118  3C5A
8119  3C5B
8120  3C5C
8121  3C5D
8122  3C5E
8123  3C5F
8124  3C60
8125  3C61
8126  3C62
8127  3C63
8128  3C64
8129  3C65
8130  3C66
8131  3C67
8132  3C68
8133  3C69
8134  3C6A
8135  3C6B
8136  3C6C
8137  3C6D
8138  3C6E
8139  3C6F
8140  3C70
8141  3C71
8142  3C72
8143  3C73
8144  3C74
8145  3C75
8146  3C76
8147  3C77
8148  3C78
8149  3C79
8150  3C7A
8151  3C7B
8152  3C7C
8153  3C7D
8154  3C7E
8155  3C7F
8156  3C80
8157  3C81
8158  3C82
8159  3C83
8160  3C84
8161  3C85
8162  3C86
8163  3C87
8164  3C88
8165  3C89
8166  3C8A
8167  3C8B
8168  3C8C
8169  3C8D
8170  3C8E
8171  3C8F
8172  3C90
8173  3C91
8174  3C92
8175  3C93
8176  3C94
8177  3C95
8178  3C96
8179  3C97
8180  3C98
8181  3C99
8182  3C9A
8183  3C9B
8184  3C9C
8185  3C9D
8186  3C9E
8187  3C9F
8188  3CA0
8189  3CA1
8190  3CA2
8191  3CA3
8192  3CA4
8193  3CA5
8194  3CA6
8195  3CA7
8196  3CA8
8197  3CA9
8198  3CAA
8199  3CAB
8200  3CAC
8201  3CAD
8202  3CAE
8203  3CAF
8204  3CB0
8205  3CB1
8206  3CB2
8207  3CB3
8208  3CB4
8209  3CB5
8210  3CB6
8211  3CB7
8212  3CB8
8213  3CB9
8214  3CBA
8215  3CBB
8216  3CBC
8217  3CBD
8218  3CBE
8219  3CBF
8220  3CC0
8221  3CC1
8222  3CC2
8223  3CC3
8224  3CC4
8225  3CC5
8226  3CC6
8227  3CC7
8228  3CC8
8229  3CC9
8230  3CCA
8231  3CCB
8232  3CCC
8233  3CCD
8234  3CCE
8235  3CCF
8236  3CD0
8237  3CD1
8238  3CD2
8239  3CD3
8240  3CD4
8241  3CD5
8242  3CD6
8243  3CD7
8244  3CD8
8245  3CD9
8246  3CDA
8247  3CDB
8248  3CDC
8249  3CDD
8250  3CDE
8251  3CDF
8252  3CE0
8253  3CE1
8254  3CE2
8255  3CE3
8256  3CE4
8257  3CE5
8258  3CE6
8259  3CE7
8260  3CE8
8261  3CE9
8262  3CEA
8263  3CEB
8264  3CEC
8265  3CED
8266  3CEE
8267  3CEF
8268  3CF0
8269  3CF1
8270  3CF2
8271  3CF3
8272  3CF4
8273  3CF5
8274  3CF6
8275  3CF7
8276  3CF8
8277  3CF9
8278  3CFA
8279  3CFB
8280  3CFC
8281  3CFD
8282  3CFE
8283  3CFF
8284  3D00
8285  3D01
8286  3D02
8287  3D03
8288  3D04
8289  3D05
8290  3D06
8291  3D07
8292  3D08
8293  3D09
8294  3D0A
8295  3D0B
8296  3D0C
8297  3D0D
8298  3D0E
8299  3D0F
8300  3D10
8301  3D11
8302  3D12
8303  3D13
8304  3D14
8305  3D15
8306  3D16
8307  3D17
8308  3D18
8309  3D19
8310  3D1A
8311  3D1B
8312  3D1C
8313  3D1D
8314  3D1E
8315  3D1F
8316  3D20
8317  3D21
8318  3D22
8319  3D23
8320  3D24
8321  3D25
8322  3D26
8323  3D27
8324  3D28
8325  3D29
8326  3D2A
8327  3D2B
8328  3D2C
8329  3D2D
8330  3D2E
8331  3D2F
8332  3D30
8333  3D31
8334  3D32
8335  3D33
8336  3D34
8337  3D35
8338  3D36
8339  3D37
8340  3D38
8341  3D39
8342  3D3A
8343  3D3B
8344  3D3C
8345  3D3D
8346  3D3E
8347  3D3F
8348  3D40
8349  3D41
8350  3D42
8351  3D43
8352  3D44
8353  3D45
8354  3D46
8355  3D47
8356  3D48
8357  3D49
8358  3D4A
8359  3D4B
8360  3D4C
8361  3D4D
8362  3D4E
8363  3D4F
8364  3D50
8365  3D51
8366  3D52
8367  3D53
8368  3D54
8369  3D55
8370  3D56
8371  3D57
8372  3D58
8373  3D59
8374  3D5A
8375  3D5B
8376  3D5C
8377  3D5D
8378  3D5E
8379  3D5F
8380  3D60
8381  3D61
8382  3D62
8383  3D63
8384  3D64
8385  3D65
8386  3D66
8387  3D67
8388  3D68
8389  3D69
8390  3D6A
8391  3D6B
8392  3D6C
8393  3D6D
8394  3D6E
8395  3D6F
8396  3D70
8397  3D71
8398  3D72
8399  3D73
8400  3D74
8401  3D75
8402  3D76
8403  3D77
8404  3D78
8405  3D79
8406  3D7A
8407  3D7B
8408  3D7C
8409  3D7D
8410  3D7E
8411  3D7F
8412  3D80
8413  3D81
8414  3D82
8415  3D83
8416  3D84
8417  3D85
8418  3D86
8419  3D87
8420  3D88
8421  3D89
8422  3D8A
8423  3D8B
8424  3D8C
8425  3D8D
8426  3D8E
8427  3D8F
8428  3D90
8429  3D91
8430  3D92
8431  3D93
8432  3D94
8433  3D95
8434  3D96
8435  3D97
8436  3D98
8437  3D99
8438  3D9A
8439  3D9B
8440  3D9C
8441  3D9D
8442  3D9E
8443  3D9F
8444  3DA0
8445  3DA1
8446  3DA2
8447  3DA3
8448  3DA4
8449  3DA5
8450  3DA6
8451  3DA7
8452  3DA8
8453  3DA9
8454  3DAA
8455  3DAB
8456  3DAC
8457  3DAD
8458  3DAE
8459  3DAF
8460  3DB0
8461  3DB1
8462  3DB2
8463  3DB3
8464  3DB4
8465  3DB5
8466  3DB6
8467  3DB7
8468  3DB8
8469  3DB9
8470  3DBA
8471  3DBB
8472  3DBC
8473  3DBD
8474  3DBE
8475  3DBF
8476  3DC0
8477  3DC1
8478  3DC2
8479  3DC3
8480  3DC4
8481  3DC5
8482  3DC6
8483  3DC7
8484  3DC8
8485  3DC9
8486  3DCA
8487  3DCB
8488  3DCC
8489  3DCD
8490  3DCE
8491  3DCF
8492  3DD0
8493  3DD1
8494  3DD2
8495  3DD3
8496  3DD4
8497  3DD5
8498  3DD6
8499  3DD7
8500  3DD8
8501  3DD9
8502  3DDA
8503  3DDB
8504  3DDC
8505  3DDD
8506  3DDE
8507  3DDF
8508  3DE0
8509  3DE1
8510  3DE2
8511  3DE3
8512  3DE4
8513  3DE5
8514  3DE6
8515  3DE7
8516  3DE8
8517  3DE9
8518  3DEA
8519  3DEB
8520  3DEC
8521  3DED
8522  3DEE
8523  3DEF
8524  3DF0
8525  3DF1
8526  3DF2
8527  3DF3
8528  3DF4
8529  3DF5
8530  3DF6
8531  3DF7
8532  3DF8
8533  3DF9
8534  3DFA
8535  3DFB
8536  3DFC
8537  3DFD
8538  3DFE
8539  3DFF
8540  3E00
8541  3E01
8542  3E02
8543  3E03
8544  3E04
8545  3E05
8546  3E06
8547  3E07
8548  3E08
8549  3E09
8550  3E0A
8551  3E0B
8552  3E0C
8553  3E0D
8554  3E0E
8555  3E0F
8556  3E10
8557  3E11
8558  3E12
8559  3E13
8560  3E14
8561  3E15
8562  3E16
8563  3E17
8564  3E18
8565  3E19
8566  3E1A
8567  3E1B
8568  3E1C
8569  3E1D
8570  3E1E
8571  3E1F
8572  3E20
8573  3E21
8574  3E22
8575  3E23
8576  3E24
8577  3E25
8578  3E26
8579  3E27
8580  3E28
8581  3E29
8582  3E2A
8583  3E2B
8584  3E2C
8585  3E2D
8586  3E2E
8587  3E2F
8588  3E30
8589  3E31
8590  3E32
8591  3E33
8592  3E34
8593  3E35
8594  3E36
8595  3E37
8596  3E38
8597  3E39
8598  3E3A
8599  3E3B
8600  3E3C
8601  3E3D
8602  3E3E
8603  3E3F
8604  3E40
8605  3E41
8606  3E42
8607  3E43
8608  3E44
8609  3E45
8610  3E46
8611  3E47
8612  3E48
8613  3E49
8614  3E4A
8615  3E4B
8616  3E4C
8617  3E4D
8618  3E4E
8619  3E4F
8620  3E50
8621  3E51
8622  3E52
8623  3E53
8624  3E54
8625  3E55
8626  3E56
8627  3E57
8628  3E58
8629  3E59
8630  3E5A
8631  3E5B
8632  3E5C
8633  3E5D
8634  3E5E
8635  3E5F
8636  3E60
8637  3E61
8638  3E62
8639  3E63
8640  3E64
8641  3E65
8642  3E66
8643  3E67
8644  3E68
8645  3E69
8646  3E6A
8647  3E6B
8648  3E6C
8649  3E6D
8650  3E6E
8651  3E6F
8652  3E70
8653  3E71
8654  3E72
8655  3E73
8656  3E74
8657  3E75
8658  3E76
8659  3E77
8660  3E78
8661  3E79
8662  3E7A
8663  3E7B
8664  3E7C
8665  3E7D
8666  3E7E
8667  3E7F
8668  3E80
8669  3E81
8670  3E82
8671  3E83
8672  3E84
8673  3E85
8674  3E86
8675  3E87
8676  3E88
8677  3E89
8678  3E8A
8679  3E8B
8680  3E8C
8681  3E8D
8682  3E8E
8683  3E8F
8684  3E90
8685  3E91
8686  3E92
8687  3E93
8688  3E94
8689  3E95
8690  3E96
8691  3E97
8692  3E98
8693  3E99
8694  3E9A
8695  3E9B
8696  3E9C
8697  3E9D
8698  3E9E
8699  3E9F
8700  3EA0
8701  3EA1
8702  3EA2
8703  3EA3
8704  3EA4
8705  3EA5
8706  3EA6
8707  3EA7
8708  3EA8
8709  3EA9
8710  3EAA
8711  3EAB
8712  3EAC
8713  3EAD
8714  3EAE
8715  3EAF
8716  3EB0
8717  3EB1
8718  3EB2
8719  3EB3
8720  3EB4
8721  3EB5
8722  3EB6
8723  3EB7
8724  3EB8
8725  3EB9
8726  3EBA
8727  3EBB
8728  3EBC
8729  3EBD
8730  3EBE
8731  3EBF
8732  3EC0
8733  3EC1
8734  3EC2
8735  3EC3
8736  3EC4
8737  3EC5
8738  3EC6
8739  3EC7
8740  3EC8
8741  3EC9
8742  3ECA
8743  3ECB
8744  3ECC
8745  3ECD
8746  3ECE
8747  3ECF
8748  3ED0
8749  3ED1
8750  3ED2
8751  3ED3
8752  3ED4
8753  3ED5
8754  3ED6
8755  3ED7
8756  3ED8
8757  3ED9
8758  3EDA
8759  3EDB
8760  3EDC
8761  3EDD
8762  3EDE
8763  3EDF
8764  3EE0
8765  3EE1
8766  3EE2
8767  3EE3
8768  3EE4
8769  3EE5
8770  3EE6
8771  3EE7
8772  3EE8
8773  3EE9
8774  3EEA
8775  3EEB
8776  3EEC
8777  3EED
8778  3EEE
8779  3EEF
8780  3EF0
8781  3EF1
8782  3EF2
8783  3EF3
8784  3EF4
8785  3EF5
8786  3EF6
8787  3EF7
8788  3EF8
8789  3EF9
8790  3EFA
8791  3EFB
8792  3EFC
8793  3EFD
8794  3EFE
8795  3EFF
8796  3F00
8797  3F01
8798  3F02
8799  3F03
8800  3F04
8801  3F05
8802  3F06
8803  3F07
8804  3F08
8805  3F09
8806  3F0A
8807  3F0B
8808  3F0C
8809  3F0D
8810  3F0E
8811  3F0F
8812  3F10
8813  3F11
8814  3F12
8815  3F13
8816  3F14
8817  3F15
8818  3F16
8819  3F17
8820  3F18
8821  3F19
8822  3F1A
8823  3F1B
8824  3F1C
8825  3F1D
8826  3F1E
8827  3F1F
8828  3F20
8829  3F21
8830  3F22
8831  3F23
8832  3F24
8833  3F25
8834  3F26
8835  3F27
8836  3F28
8837  3F29
8838  3F2A
8839  3F2B
8840  3F2C
8841  3F2D
8842  3F2E
8843  3F2F
8844  3F30
8845  3F31
8846  3F32
8847  3F33
8848  3F34
8849  3F35
8850  3F36
8851  3F37
8852  3F38
8853  3F39
8854  3F3A
8855  3F3B
8856  3F3C
8857  3F3D
8858  3F3E
8859  3F3F
8860  3F40
8861  3F41
8862  3F42
8863  3F43
8864  3F44
8865  3F45
8866  3F46
8867  3F47
8868  3F48
8869  3F49
8870  3F4A
8871  3F4B
8872  3F4C
8873  3F4D
8874  3F4E
8875  3F4F
8876  3F50
8877  3F51
8878  3F52
8879  3F53
8880  3F54
8881  3F55
8882  3F56
8883  3F57
8884  3F58
8885  3F59
8886  3F5A
8887  3F5B
8888  3F5C
8889  3F5D
8890  3F5E
8891  3F5F
8892  3F60
8893  3F61
8894  3F62
8895  3F63
8896  3F64
8897  3F65
8898  3F66
8899  3F67
8900  3F68
8901  3F69
8902  3F6A
8903  3F6B
8904  3F6C
8905  3F6D
8906  3F6E
8907  3F6F
8908  3F70
8909  3F71
8910  3F72
8911  3F73
8912  3F74
8913  3F75
8914  3F76
8915  3F77
8916  3F78
8917  3F79
8918  3F7A
8919  3F7B
8920  3F7C
8921  3F7D
8922  3F7E
8923  3F7F
8924  3F80
8925  3F81
8926  3F82
8927  3F83
8928  3F84
8929  3F85
8930  3F86
8931  3F87
8932  3F88
8933  3F89
8934  3F8A
8935  3F8B
8936  3F8C
8937  3F8D
8938  3F8E
8939  3F8F
8940  3F90
8941  3F91
8942  3F92
8943  3F93
8944  3F94
8945  3F95
8946  3F96
8947  3F97
8948  3F98
8949  3F99
8950  3F9A
8951  3F9B
8952  3F9C
8953  3F9D
8954  3F9E
8955  3F9F
8956  3FA0
8957  3FA1
8958  3FA2
8959  3FA3
8960  3FA4
8961  3FA5
8962  3FA6
8963  3FA7
8964  3FA8
8965  3FA9
8966  3FAA
8967  3FAB
8968  3FAC
8969  3FAD
8970  3FAE
8971  3FAF
8972  3FB0
8973  3FB1
8974  3FB2
8975  3FB3
8976  3FB4
8977  3FB5
8978  3FB6
8979  3FB7
8980  3FB8
8981  3FB9
8982  3FBA
8983  3FBB
8984  3FBC
8985  3FBD
8986  3FBE
8987  3FBF
8988  3FC0
8989  3FC1
8990  3FC2
8991  3FC3
8992  3FC4
8993  3FC5
8994  3FC6
8995  3FC7
8996  3FC8
8997  3FC9
8998  3FCA
8999  3FCB
9000  3FCC
9001  3FCD
9002  3FCE
9003  3FCF
9004  3FD0
9005  3FD1
9006  3FD2
9007  3FD3
9008  3FD4
9009  3FD5
9010  3FD6
9011  3FD7
9012  3FD8
9013  3FD9
9014  3FDA
9015  3FDB
9016  3FDC
9017  3FDD
9018  3FDE
9019  3FDF
9020  3FE0
9021  3FE1
9022  3FE2
9023  3FE3
9024  3FE4
9025  3FE5
9026  3FE6
9027  3FE7
9028  3FE8
9029  3FE9
9030  3FEA
9031  3FEB
9032  3FEC
9033  3FED
9034  3FEE
9035  3FEF
9036  3FF0
9037  3FF1
9038  3FF2
9039  3FF3
9040  3FF4
9041  3FF5
9042  3FF6
9043  3FF7
9044  3FF8
9045  3FF9
9046  3FFA
9047  3FFB
9048  3FFC
9049  3FFD
9050  3FFE
9051  3FFF
9052  4000
9053  4001
9054  4002
9055  4003
9056  4004
9057  4005
9058  4006
9059  4007
9060  4008
9061  4009
9062  400A
9063  400B
9064  400C
9065  400D
9066  400E
9067  400F
9068  4010
9069  4011
9070  4012
9071  4013
9072  4014
9073  4015
9074  4016
9075  4017
9076  4018
9077  4019
9078  401A
9079  401B
9080  401C
9081  401D
9082  401E
9083  401F
9084  4020
9085  4021
9086  4022
9087  4023
9088  4024
9089  4025
9090  4026
9091  4027
9092  4028
9093  4029
9094  402A
9095  402B
9096  402C
9097  402D
9098  402E
9099  402F
9100  4030
9101  4031
9102  4032
9103  4033
9104  4034
9105  4035
9106  4036
9107  4037
9108  4038
9109  4039
9110  403A
9111  403B
9112  403C
9113  403D
9114  403E
9115  403F
9116  4040
9117  4041
9118  4042
9119  4043
9120  4044
9121  4045
9122  4046
9123  4047
9124  4048
9125  4049
9126  404A
9127  404B
9128  404C
9129  404D
9130  404E
9131  404F
9132  4050
9133  4051
9134  4052
9135  4053
9136  4054
9137  4055
9138  4056
9139  4057
9140  4058
9141  4059
9142  405A
9143  405B
9144  405C
9145  405D
9146  405E
9147  405F
9148  4060
9149  4061
9150  4062
9151  4063
9152  4064
9153  4065
9154  4066
9155  4067
9156  4068
9157  4069
9158  406A
9159  406B
9160  406C
9161  406D
9162  406E
9163  406F
9164  4070
9165  4071
9166  4072
9167  4073
9168  4074
9169  4075
9170  4076
9171  4077
9172  4078
9173  4079
9174  407A
9175  407B
9176  407C
9177  407D
9178  407E
9179  407F
9180  4080
9181  4081
9182  4082
9183  4083
9184  4084
9185  4085
9186  4086
9187  4087
9188  4088
9189  4089
9190  408A
9191  408B
9192  408C
9193  408D
9194  408E
9195  408F
9196  4090
9197  4091
9198  4092
9199  4093
9200  4094
9201  4095
9202  4096
9203  4097
9204  4098
9205  4099
9206  409A
9207  409B
9208  409C
9209  409D
9210  409E
9211  409F
9212  40A0
9213  40A1
9214  40A2
9215  40A3
9216  40A4
9217  40A5
9218  40A6
9219  40A7
9220  40A8
9221  40A9
9222  40AA
9223  40AB
9224  40AC
9225  40AD
9226  40AE
9227  40AF
9228  40B0
9229  40B1
9230  40B2
9231  40B3
9232  40B4
9233  40B5
9234  40B6
9235  40B7
9236  40B8
9237  40B9
9238  40BA
9239  40BB
9240  40BC
9241  40BD
9242  40BE
9243  40BF
9244  40C0
9245  40C1
9246  40C2
9247  40C3
9248  40C4
9249  40C5
9250  40C6
9251  40C7
9252  40C8
9253  40C9
9254  40CA
9255  40CB
9256  40CC
9257  40CD
9258  40CE
9259  40CF
9260  40D0
9261  40D1
9262  40D2
9263  40D3
9264  40D4
9265  40D5
9266  40D6
9267  40D7
9268  40D8
9269  40D9
9270  40DA
9271  40DB
9272  40DC
9273  40DD
9274  40DE
9275  40DF
9276  40E0
9277  40E1
9278  40E2
9279  40E3
9280  40E4
9281  40E5
9282  40E6
9283  40E7
9284  40E8
9285  40E9
9286  40EA
9287  40EB
9288  40EC
9289  40ED
9290  40EE
9291  40EF
9292  40F0
9293  40F1
9294  40F2
9295  40F3
9296  40F4
9297  40F5
9298  40F6
9299  40F7
9300  40F8
9301  40F9
9302  40FA
9303  40FB
9304  40FC
9305  40FD
9306  40FE
9307  40FF
9308  4100
9309  4101
9310  4102
9311  4103
9312  4104
9313  4105
9314  4106
9315  4107
9316  4108
9317  4109
9318  410A
9319  410B
9320  410C
9321  410D
9322  410E
9323  410F
9324  4110
9325  4111
9326  4112
9327  4113
9328  4114
9329  4115
9330  4116
9331  4117
9332  4118
9333  4119
9334  411A
9335  411B
9336  411C
9337  411D
9338  411E
9339  411F
9340  4120
9341  4121
9342  4122
9343  4123
9344  4124
9345  4125
9346  4126
9347  4127
9348  4128
9349  4129
9350  412A
9351  412B
9352  412C
9353  412D
9354  412E
9355  412F
9356  4130
9357  4131
9358  4132
9359  4133
9360  4134
9361  4135
9362  4136
9363  4137
9364  4138
9365  4139
9366  413A
9367  413B
9368  413C
9369  413D
9370  413E
9371  413F
9372  4140
9373  4141
9374  4142
9375  4143
9376  4144
9377  4145
9378  4146
9379  4147
9380  4148
9381  4149
9382  414A
9383  414B
9384  414C
9385  414D
9386  414E
9387  414F
9388  4150
9389  4151
9390  4152
9391  4153
9392  4154
9393  4155
9394  4156
9395  4157
9396  4158
9397  4159
9398  415A
9399  415B
9400  415C
9401  415D
9402  415E
9403  415F
9404  4160
9405  4161
9406  4162
9407  4163
9408  4164
9409  4165
9410  4166
9411  4167
9412  4168
9413  4169
9414  416A
9415  416B
9416  416C
9417  416D
9418  416E
9419  416F
9420  4170
9421  4171
9422  4172
9423  4173
9424  4174
9425  4175
9426  4176
9427  4177
9428  4178
9429  4179
9430  417A
9431  417B
9432  417C
9433  417D
9434  417E
9435  417F
9436  4180
9437  4181
9438  4182
9439  4183
9440  4184
9441  4185
9442  4186
9443  4187
9444  4188
9445  4189
9446  418A
9447  418B
9448  418C
9449  418D
9450  418E
9451  418F
9452  4190
9453  4191
9454  4192
9455  4193
9456  4194
9457  4195
9458  4196
9459  4197
9460  4198
9461  4199
9462  419A
9463  419B
9464  419C
9465  419D
9466  419E
9467  419F
9468  41A0
9469  41A1
9470  41A2
9471  41A3
9472  41A4
9473  41A5
9474  41A6
9475  41A7
9476  41A8
9477  41A9
9478  41AA
9479  41AB
9480  41AC
9481  41AD
9482  41AE
9483  41AF
9484  41B0
9485  41B1
9486  41B2
9487  41B3
9488  41B4
9489  41B5
9490  41B6
9491  41B7
9492  41B8
9493  41B9
9494  41BA
9495  41BB
9496  41BC
9497  41BD
9498  41BE
9499  41BF
9500  41C0
9501  41C1
9502  41C2
9503  41C3
9504  41C4
9505  41C5
9506  41C6
9507  41C7
9508  41C8
9509  41C9
9510  41CA
9511  41CB
9512  41CC
9513  41CD
9514  41CE
9515  41CF
9516  41D0
9517  41D1
9518  41D2
9519  41D3
9520  41D4
9521  41D5
9522  41D6
9523  41D7
9524  41D8
9525  41D9
9526  41DA
9527  41DB
9528  41DC
9529  41DD
9530  41DE
9531  41DF
9532  41E0
9533  41E1
9534  41E2
9535  41E3
9536  41E4
9537  41E5
9538  41E6
9539  41E7
9540  41E8
9541  41E9
9542  41EA
9543  41EB
9544  41EC
9545  41ED
9546  41EE
9547  41EF
9548  41F0
9549  41F1
9550  41F2
9551  41F3
9552  41F4
9553  41F5
9554  41F6
9555  41F7
9556  41F8
9557  41F9
9558  41FA
9559  41FB
9560  41FC
9561  41FD
9562  41FE
9563  41FF
9564  4200
9565  4201
9566  4202
9567  4203
9568  4204
9569  4205
9570  4206
9571  4207
9572  4208
9573  4209
9574  420A
9575  420B
9576  420C
9577  420D
9578  420E
9579  420F
9580  4210
9581  4211
9582  4212
9583  4213
9584  4214
9585  4215
9586  4216
9587  4217
9588  4218
9589  4219
9590  421A
9591  421B
9592  421C
9593  421D
9594  421E
9595  421F
9596  4220
9597  4221
9598  4222
9599  4223
9600  4224
9601  4225
9602  4226
9603  4227
9604  4228
9605  4229
9606  422A
9607  422B
9608  422C
9609  422D
9610  422E
9611  422F
9612  4230
9613  4231
9614  4232
9615  4233
9616  4234
9617  4235
9618  4236
9619  4237
9620  4238
9621  4239
9622  423A
9623  423B
9624  423C
9625  423D
9626  423E
9627  423F
9628  4240
9629  4241
9630  4242
9631  4243
9632  4244
9633  4245
9634  4246
9635  4247
9636  4248
9637  4249
9638  424A
9639  424B
9640  424C
9641  424D
9642  424E
9643  424F
9644  4250
9645  4251
9646  4252
9647  4253
9648  4254
9649  4255
9650  4256
9651  4257
9652  4258
9653  4259
9654  425A
9655  425B
9656  425C
9657  425D
9658  425E
9659  425F
9660  4260
9661  4261
9662  4262
9663  4263
9664  4264
9665  4265
9666  4266
9667  4267
9668  4268
9669  4269
9670  426A
9671  426B
9672  426C
9673  426D
9674  426E
9675  426F
9676  4270
9677  4271
9678  4272
9679  4273
9680  4274
9681  4275
9682  4276
9683  4277
9684  4278
9685  4279
9686  427A
9687  427B
9688  427C
9689  427D
9690  427E
9691  427F
9692  4280
9693  4281
9694  4282
9695  4283
9696  4284
9697  4285
9698  4286
9699  4287
9700  4288
9701  4289
9702  428A
9703  428B
9704  428C
9705  428D
9706  428E
9707  428F
9708  4290
9709  4291
9710  4292
9711  4293
9712  4294
9713  4295
9714  4296
9715  4297
9716  4298
9717  4299
9718  429A
9719  429B
9720  429C
9721  429D
9722  429E
9723  429F
9724  42A0
9725  42A1
9726  42A2
9727  42A3
9728  42A4
9729  42A5
9730  42A6
9731  42A7
9732  42A8
9733  42A9
9734  42AA
9735  42AB
9736  42AC
9737  42AD
9738  42AE
9739  42AF
9740  42B0
9741  42B1
9742  42B2
9743  42B3
9744  42B4
9745  42B5
9746  42B6
9747  42B7
9748  42B8
9749  42B9
9750  42BA
9751  42BB
9752  42BC
9753  42BD
9754  42BE
9755  42BF
9756  42C0
9757  42C1
9758  42C2
9759  42C3
9760  42C4
9761  42C5
9762  42C6
9763  42C7
9764  42C8
9765  42C9
9766  42CA
9767  42CB
9768  42CC
9769  42CD
9770  42CE
9771  42CF
9772  42D0
9773  42D1
9774  42D2
9775  42D3
9776  42D4
9777  42D5
9778  42D6
9779  42D7
9780  42D8
9781  42D9
9782  42DA
9783  42DB
9784  42DC
9785  42DD
9786  42DE
9787  42DF
9788  42E0
9789  42E1
9790  42E2
9791  42E3
9792  42E4
9793  42E5
9794  42E6
9795  42E7
9796  42E8
9797  42E9
9798  42EA
9799  42EB
9800  42EC
9801  42ED
9802  42EE
9803  42EF
9804  42F0
9805  42F1
9806  42F2
9807  42F3
9808  42F4
9809  42F5
9810  42F6
9811  42F7
9812  42F8
9813  42F9
9814  42FA
9815  42FB
9816  42FC
9817  42FD
9818  42FE
9819  42FF
9820  4300
9821  4301
9822  4302
9823  4303
9824  4304
9825  4305
9826  4306
9827  4307
9828  4308
9829  4309
9830  430A
9831  430B
9832  430C
9833  430D
9834  430E
9835  430F
9836  4310
9837  4311
9838  4312
9839  4313
9840  4314
9841  4315
9842  4316
9843  4317
9844  4318
9845  4319
9846  431A
9847  431B
9848  431C
9849  431D
9850  431E
9851  431F
9852  4320
9853  4321
9854  4322
9855  4323
9856  4324
9857  4325
9858  4326
9859  4327
9860  4328
9861  4329
9862  432A
9863  432B
9864  432C
9865  432D
9866  432E
9867  432F
9868  4330
9869  4331
9870  4332
9871  4333
9872  4334
9873  4335
9874  4336
9875  4337
9876  4338
9877  4339
9878  433A
9879  433B
9880  433C
9881  433D
9882  433E
9883  433F
9884  4340
9885  4341
9886  4342
9887  4343
9888  4344
9889  4345
9890  4346
9891  4347
9892  4348
9893  4349
9894  434A
9895  434B
9896  434C
9897  434D
9898  434E
9899  434F
9900  4350
9901  4351
9902  4352
9903  4353
9904  4354
9905  4355
9906  4356
9907  4357
9908  4358
9909  4359
9910  435A
9911  435B
9912  435C
9913  435D
9914  435E
9915  435F
9916  4360
9917  4361
9918  4362
9919  4363
9920  4364
9921  4365
9922  4366
9923  4367
9924  4368
9925  4369
9926  436A
9927  436B
9928  436C
9929  436D
9930  436E
9931  436F
9932  4370
9933  4371
9934  4372
9935  4373
9936  4374
9937  4375
9938  4376
9939  4377
9940  4378
9941  4379
9942  437A
9943  437B
9944  437C
9945  437D
9946  437E
9947  437F
9948  4380
9949  4381
9950  4382
9951  4383
9952  4384
9953  4385
9954  4386
9955  4387
9956  4388
9957  4389
9958  438A
9959  438B
9960  438C
9961  438D
9962  438E
9963  438F
9964  4390
9965  4391
9966  4392
9967  4393
9968  4394
9969  4395
9970  4396
9971  4397
9972  4398
9973  4399
9974  439A
9975  439B
9976  439C
9977  439D
9978  439E
9979  439F
9980  43A0
9981  43A1
9982  43A2
9983  43A3
9984  43A4
9985  43A5
9986  43A6
9987  43A7
9988  43A8
9989  43A9
9990  43AA
9991  43AB
9992  43AC
9993  43AD
9994  43AE
9995  43AF
9996  43B0
9997  43B1
9998  43B2
9999  43B3
10000  43B4
10001  43B5
10002  43B6
10003  43B7
10004  43B8
10005  43B9
10006  43BA
10007  43BB
10008  43BC
10009  43BD
10010  43BE
10011  43BF
10012  43C0
10013  43C1
10014  43C2
10015  43C3
10016  43C4
10017  43C5
10018  43C6
10019  43C7
10020  43C8
10021  43C9
10022  43CA
10023  43CB
10024  43CC
10025  43CD
10026  43CE
10027  43CF
10028  43D0
10029  43D1
10030  43D2
10031  43D3
10032  43D4
10033  43D5
10034  43D6
10035  43D7
10036  43D8
10037  43D9
10038  43DA
10039  43DB
10040  43DC
10041  43DD
10042  43DE
10043  43DF
10044  43E0
10045  43E1
10046  43E2
10047  43E3
10048  43E4
10049  43E5
10050  43E6
10051  43E7
10052  43E8
10053  43E9
10054  43EA
10055  43EB
10056  43EC
10057  43ED
10058  43EE
10059  43EF
10060  43F0
10061  43F1
10062  43F2
10063  43F3
10064  43F4
10065  43F5
10066  43F6
10067  43F7
10068  43F8
10069  43F9
10070  43FA
10071  43FB
10072  43FC
10073  43FD
10074  43FE
10075  43FF
10076  4400
10077  4401
10078  4402
10079  4403
10080  4404
10081  4405
10082  4406
10083  4407
10084  4408
10085  4409
10086  440A
10087  440B
10088  440C
10089  440D
10090  440E
10091  440F
10092  4410
10093  4411
10094  4412
10095  4413
10096  4414
10097  4415
10098  4416
10099  4417
10100  4418
10101  4419
10102  441A
10103  441B
10104  441C
10105  441D
10106  441E
10107  441F
10108  4420
10109  4421
10110  4422
10111  4423
10112  4424
10113  4425
10114  4426
10115  4427
10116  4428
10117  4429
10118  442A
10119  442B
10120  442C
10121  442D
10122  442E
10123  442F
10124  4430
10125  4431
10126  4432
10127  4433
10128  4434
10129  4435
10130  4436
10131  4437
10132  4438
10133  4439
10134  443A
10135  443B
10136  443C
10137  443D
10138  443E
10139  443F
10140  4440
10141  4441
10142  4442
10143  4443
10144  4444
10145  4445
10146  4446
10147  4447
10148  4448
10149  4449
10150  444A
10151  444B
10152  444C
10153  444D
10154  444E
10155  444F
10156  4450
10157  4451
10158  4452
10159  4453
10160  4454
10161  4455
10162  4456
10163  4457
10164  4458
10165  4459
10166  445A
10167  445B
10168  445C
10169  445D
10170  445E
10171  445F
10172  4460
10173  4461
10174  4462
10175  4463
10176  4464
10177  4465
10178  4466
10179  4467
10180  4468
10181  4469
10182  446A
10183  446B
10184  446C
10185  446D
10186  446E
10187  446F
10188  4470
10189  4471
10190  4472
10191  4473
10192  4474
10193  4475
10194  4476
10195  4477
10196  4478
10197  4479
10198  447A
10199  447B
10200  447C
10201  447D
10202  447E
10203  447F
10204  4480
10205  4481
10206  4482
10207  4483
10208  4484
10209  4485
10210  4486
10211  4487
10212  4488
10213  4489
10214  448A
10215  448B
10216  448C
10217  448D
10218  448E
10219  448F
10220  4490
10221  4491
10222  4492
10223  4493
10224  4494
10225  4495
10226  4496
10227  4497
10228  4498
10229  4499
10230  449A
10231  449B
10232  449C
10233  449D
10234  449E
10235  449F
10236  44A0
10237  44A1
10238  44A2
10239  44A3
10240  44A4
10241  44A5
10242  44A6
10243  44A7
10244  44A8
10245  44A9
10246  44AA
10247  44AB
10248  44AC
10249  44AD
10250  44AE
10251  44AF
10252  44B0
10253  44B1
10254  44B2
10255  44B3
10256  44B4
10257  44B5
10258  44B6
10259  44B7
10260  44B8
10261  44B9
10262  44BA
10263  44BB
10264  44BC
10265  44BD
10266  44BE
10267  44BF
10268  44C0
10269  44C1
10270  44C2
10271  44C3
10272  44C4
10273  44C5
10274  44C6
10275  44C7
10276  44C8
10277  44C9
10278  44CA
10279  44CB
10280  44CC
10281  44CD
10282  44CE
10283  44CF
10284  44D0
10285  44D1
10286  44D2
10287  44D3
10288  44D4
10289  44D5
10290  44D6
10291  44D7
10292  44D8
10293  44D9
10294  44DA
10295  44DB
10296  44DC
10297  44DD
10298  44DE
10299  44DF
10300  44E0
10301  44E1
10302  44E2
10303  44E3
10304  44E4
10305  44E5
10306  44E6
10307  44E7
10308  44E8
10309  44E9
10310  44EA
10311  44EB
10312  44EC
10313  44ED
10314  44EE
10315  44EF
10316  44F0
10317  44F1
10318  44F2
10319  44F3
10320  44F4
10321  44F5
10322  44F6
10323  44F7
10324  44F8
10325  44F9
10326  44FA
10327  44FB
10328  44FC
10329  44FD
10330  44FE
10331  44FF
10332  4500
10333  4501
10334  4502
10335  4503
10336  4504
10337  4505
10338  4506
10339  4507
10340  4508
10341  4509
10342  450A
10343  450B
10344  450C
10345  450D
10346  450E
10347  450F
10348  4510
10349  4511
10350  4512
10351  4513
10352  4514
10353  4515
10354  4516
10355  4517
10356  4518
10357  4519
10358  451A
10359  451B
10360  451C
10361  451D
10362  451E
10363  451F
10364  4520
10365  4521
10366  4522
10367  4523
10368  4524
10369  4525
10370  4526
10371  4527
10372  4528
10373  4529
10374  452A
10375  452B
10376  452C
10377  452D
10378  452E
10379  452F
10380  4530
10381  4531
10382  4532
10383  4533
10384  4534
10385  4535
10386  4536
10387  4537
10388  4538
10389  4539
10390  453A
10391  453B
10392  453C
10393  453D
10394  453E
10395  453F
10396  4540
10397  4541
10398  4542
10399  4543
10400  4544
10401  4545
10402  4546
10403  4547
10404  4548
10405  4549
10406  454A
10407  454B
10408  454C
10409  454D
10410  454E
10411  454F
10412  4550
10413  4551
10414  4552
10415  4553
10416  4554
10417  4555
10418  4556
10419  4557
10420  4558
10421  4559
10422  455A
10423  455B
10424  455C
10425  455D
10426  455E
10427  455F
10428  4560
10429  4561
10430  4562
10431  4563
10432  4564
10433  4565
10434  4566
10435  4567
10436  4568
10437  4569
10438  456A
10439  456B
10440  456C
10441  456D
10442  456E
10443  456F
10444  4570
10445  4571
10446  4572
10447  4573
10448  4574
10449  4575
10450  4576
10451  4577
10452  4578
10453  4579
10454  457A
10455  457B
10456  457C
10457  457D
10458  457E
10459  457F
10460  4580
10461  4581
10462  4582
10463  4583
10464  4584
10465  4585
10466  4586
10467  4587
10468  4588
10469  4589
10470  458A
10471  458B
10472  458C
10473  458D
10474  458E
10475  458F
10476  4590
10477  4591
10478  4592
10479  4593
10480  4594
10481  4595
10482  4596
10483  4597
10484  4598
10485  4599
10486  459A
10487  459B
10488  459C
10489  459D
10490  459E
10491  459F
10492  45A0
10493  45A1
10494  45A2
10495  45A3
10496  45A4
10497  45A5
10498  45A6
10499  45A7
10500  45A8
10501  45A9
10502  45AA
10503  45AB
10504  45AC
10505  45AD
10506  45AE
10507  45AF
10508  45B0
10509  45B1
10510  45B2
10511  45B3
10512  45B4
10513  45B5
10514  45B6
10515  45B7
10516  45B8
10517  45B9
10518  45BA
10519  45BB
10520  45BC
10521  45BD
10522  45BE
10523  45BF
10524  45C0
10525  45C1
10526  45C2
10527  45C3
10528  45C4
10529  45C5
10530  45C6
10531  45C7
10532  45C8
10533  45C9
10534  45CA
10535  45CB
10536  45CC
10537  45CD
10538  45CE
10539  45CF
10540  45D0
10541  45D1
10542  45D2
10543  45D3
10544  45D4
10545  45D5
10546  45D6
10547  45D7
10548  45D8
10549  45D9
10550  45DA
10551  45DB
10552  45DC
10553  45DD
10554  45DE
10555  45DF
10556  45E0
10557  45E1
10558  45E2
10559  45E3
10560  45E4
10561  45E5
10562  45E6
10563  45E7
10564  45E8
10565  45E9
10566  45EA
10567  45EB
10568  45EC
10569  45ED
10570  45EE
10571  45EF
10572  45F0
10573  45F1
10574  45F2
10575  45F3
10576  45F4
10577  45F5
10578  45F6
10579  45F7
10580  45F8
10581  45F9
10582  45FA
10583  45FB
10584  45FC
10585  45FD
10586  45FE
10587  45FF
10588  4600
10589  4601
10590  4602
10591  4603
10592  4604
10593  4605
10594  4606
10595  4607
10596  4608
10597  4609
10598  460A
10599  460B
10600  460C
10601  460D
10602  460E
10603  460F
10604  4610
10605  4611
10606  4612
10607  4613
10608  4614
10609  4615
10610  4616
10611  4617
10612  4618
10613  4619
10614  461A
10615  461B
10616  461C
10617  461D
10618  461E
10619  461F
10620  4620
10621  4621
10622  4622
10623  4623
10624  4624
10625  4625
10626  4626
10627  4627
10628  4628
10629  4629
10630  462A
10631  462B
10632  462C
10633  462D
10634  462E
10635  462F
10636  4630
10637  4631
10638  4632
10639  4633
10640  4634
10641  4635
10642  4636
10643  4637
10644  4638
10645  4639
10646  463A
10647  463B
10648  463C
10649  463D
10650  463E
10651  463F
10652  4640
10653  4641
10654  4642
10655  4643
10656  4644
10657  4645
10658  4646
10659  4647
10660  4648
10661  4649
10662  464A
10663  464B
10664  464C
10665  464D
10666  464E
10667  464F
10668  4650
10669  4651
10670  4652
10671  4653
10672  4654
10673  4655
10674  4656
10675  4657
10676  4658
10677  4659
10678  465A
10679  465B
10680  465C
10681  465D
10682  465E
10683  465F
10684  4660
10685  4661
10686  4662
10687  4663
10688  4664
10689  4665
10690  4666
10691  4667
10692  4668
10693  4669
10694  466A
10695  466B
10696  466C
10697  466D
10698  466E
10699  466F
10700  4670
10701  4671
10702  4672
10703  4673
10704  4674
10705  4675
10706  4676
10707  4677
10708  4678
10709  4679
10710  467A
10711  467B
10712  467C
10713  467D
10714  467E
10715  467F
10716  4680
10717  4681
10718  4682
10719  4683
10720  4684
10721  4685
10722  4686
10723  4687
10724  4688
10725  4689
10726  468A
10727  468B
10728  468C
10729  468D
10730  468E
10731  468F
10732  4690
10733  4691
10734  4692
10735  4693
10736  4694
10737  4695
10738  4696
10739  4697
10740  4698
10741  4699
10742  469A
10743  469B
10744  469C
10745  469D
10746  469E
10747  469F
10748  46A0
10749  46A1
10750  46A2
10751  46A3
10752  46A4
10753  46A5
10754  46A6
10755  46A7
10756  46A8
10757  46A9
10758  46AA
10759  46AB
10760  46AC
10761  46AD
10762  46AE
10763  46AF
10764  46B0
10765  46B1
10766  46B2
10767  46B3
10768  46B4
10769  46B5
10770  46B6
10771  46B7
10772  46B8
10773  46B9
10774  46BA
10775  46BB
10776  46BC
10777  46BD
10778  46BE
10779  46BF
10780  46C0
10781  46C1
10782  46C2
10783  46C3
10784  46C4
10785  46C5
10786  46C6
10787  46C7
10788  46C8
10789  46C9
10790  46CA
10791  46CB
10792  46CC
10793  46CD
10794  46CE
10795  46CF
10796  46D0
10797  46D1
10798  46D2
10799  46D3
10800  46D4
10801  46D5
10802  46D6
10803  46D7
10804  46D8
10805  46D9
10806  46DA
10807  46DB
10808  46DC
10809  46DD
10810  46DE
10811  46DF
10812  46E0
10813  46E1
10814  46E2
10815  46E3
10816  46E4
10817  46E5
10818  46E6
10819  46E7
10820  46E8
10821  46E9
10822  46EA
10823  46EB
10824  46EC
10825  46ED
10826  46EE
10827  46EF
10828  46F0
10829  46F1
10830  46F2
10831  46F3
10832  46F4
10833  46F5
10834  46F6
10835  46F7
10836  46F8
10837  46F9
10838  46FA
10839  46FB
10840  46FC
10841  46FD
10842  46FE
10843  46FF
10844  4700
10845  4701
10846  4702
10847  4703
10848  4704
10849  4705
10850  4706
10851  4707
10852  4708
10853  4709
10854  470A
10855  470B
10856  470C
10857  470D
10858  470E
10859  470F
10860  4710
10861  4711
10862  4712
10863  4713
10864  4714
10865  4715
10866  4716
10867  4717
10868  4718
10869  4719
10870  471A
10871  471B
10872  471C
10873  471D
10874  471E
10875  471F
10876  4720
10877  4721
10878  4722
10879  4723
10880  4724
10881  4725
10882  4726
10883  4727
10884  4728
10885  4729
10886  472A
10887  472B
10888  472C
10889  472D
10890  472E
10891  472F
10892  4730
10893  4731
10894  4732
10895  4733
10896  4734
10897  4735
10898  4736
10899  4737
10900  4738
10901  4739
10902  473A
10903  473B
10904  473C
10905  473D
10906  473E
10907  473F
10908  4740
10909  4741
10910  4742
10911  4743
10912  4744
10913  4745
10914  4746
10915  4747
10916  4748
10917  4749
10918  474A
10919  474B
10920  474C
10921  474D
10922  474E
10923  474F
10924  4750
10925  4751
10926  4752
10927  4753
10928  4754
10929  4755
10930  4756
10931  4757
10932  4758
10933  4759
10934  475A
10935  475B
10936  475C
10937  475D
10938  475E
10939  475F
10940  4760
10941  4761
10942  4762
10943  4763
10944  4764
10945  4765
10946  4766
10947  4767
10948  4768
10949  4769
10950  476A
10951  476B
10952  476C
10953  476D
10954  476E
10955  476F
10956  4770
10957  4771
10958  4772
10959  4773
10960  4774
10961  4775
10962  4776
10963  4777
10964  4778
10965  4779
10966  477A
10967  477B
10968  477C
10969  477D
10970  477E
10971  477F
10972  4780
10973  4781
10974  4782
10975  4783
10976  4784
10977  4785
10978  4786
10979  4787
10980  4788
10981  4789
10982  478A
10983  478B
10984  478C
10985  478D
10986  478E
10987  478F
10988  4790
10989  4791
10990  4792
10991  4793
10992  4794
10993  4795
10994  4796
10995  4797
10996  4798
10997  4799
10998  479A
10999  479B
11000  479C
11001  479D
11002  479E
11003  479F
11004  47A0
11005  47A1
11006  47A2
11007  47A3
11008  47A4
11009  47A5
11010  47A6
11011  47A7
11012  47A8
11013  47A9
11014  47AA
11015  47AB
11016  47AC
11017  47AD
11018  47AE
11019  47AF
11020  47B0
11021  47B1
11022  47B2
11023  47B3
11024  47B4
11025  47B5
11026  47B6
11027  47B7
11028  47B8
11029  47B9
11030  47BA
11031  47BB
11032  47BC
11033  47BD
11034  47BE
11035  47BF
11036  47C0
11037  47C1
11038  47C2
11039  47C3
11040  47C4
11041  47C5
11042  47C6
11043  47C7
11044  47C8
11045  47C9
11046  47CA
11047  47CB
11048  47CC
11049  47CD
11050  47CE
11051  47CF
11052  47D0
11053  47D1
11054  47D2
11055  47D3
11056  47D4
11057  47D5
11058  47D6
11059  47D7
11060  47D8
11061  47D9
11062  47DA
11063  47DB
11064  47DC
11065  47DD
11066  47DE
11067  47DF
11068  47E0
11069  47E1
11070  47E2
11071  47E3
11072  47E4
11073  47E5
11074  47E6
11075  47E7
11076  47E8
11077  47E9
11078  47EA
11079  47EB
11080  47EC
11081  47ED
11082  47EE
11083  47EF
11084  47F0
11085  47F1
11086  47F2
11087  47F3
11088  47F4
11089  47F5
11090  47F6
11091  47F7
11092  47F8
11093  47F9
11094  47FA
11095  47FB
11096  47FC
11097  47FD
11098  47FE
11099  47FF
11100  4800
11101  4801
11102  4802
11103  4803
11104  4804
11105  4805
11106  4806
11107  4807
11108  4808
11109  4809
11110  480A
11111  480B
11112  480C
11113  480D
11114  480E
11115  480F
11116  4810
11117  4811
11118  4812
11119  4813
11120  4814
11121  4815
11122  4816
11123  4817
11124  4818
11125  4819
11126  481A
11127  481B
11128  481C
11129  481D
11130  481E
11131  481F
11132  4820
11133  4821
11134  4822
11135  4823
11136  4824
11137  4825
11138  4826
11139  4827
11140  4828
11141  4829
11142  482A
11143  482B
11144  482C
11145  482D
11146  482E
11147  482F
11148  4830
11149  4831
11150  4832
11151  4833
11152  4834
11153  4835
11154  4836
11155  4837
11156  4838
11157  4839
11158  483A
11159  483B
11160  483C
11161  483D
11162  483E
11163  483F
11164  4840
11165  4841
11166  4842
11167  4843
11168  4844
11169  4845
11170  4846
11171  4847
11172  4848
11173  4849
11174  484A
11175  484B
11176  484C
11177  484D
11178  484E
11179  484F
11180  4850
11181  4851
11182  4852
11183  4853
11184  4854
11185  4855
11186  4856
11187  4857
11188  4858
11189  4859
11190  485A
11191  485B
11192  485C
11193  485D
11194  485E
11195  485F
11196  4860
11197  4861
11198  4862
11199  4863
11200  4864
11201  4865
11202  4866
11203  4867
11204  4868
11205  4869
11206  486A
11207  486B
11208  486C
11209  486D
11210  486E
11211  486F
11212  4870
11213  4871
11214  4872
11215  4873
11216  4874
11217  4875
11218  4876
11219  4877
11220  4878
11221  4879
11222  487A
11223  487B
11224  487C
11225  487D
11226  487E
11227  487F
11228  4880
11229  4881
11230  4882
11231  4883
11232  4884
11233  4885
11234  4886
11235  4887
11236  4888
11237  4889
11238  488A
11239  488B
11240  488C
11241  488D
11242  488E
11243  488F
11244  4890
11245  4891
11246  4892
11247  4893
11248  4894
11249  4895
11250  4896
11251  4897
11252  4898
11253  4899
11254  489A
11255  489B
11256  489C
11257  489D
11258  489E
11259  489F
11260  48A0
11261  48A1
11262  48A2
11263  48A3
11264  48A4
11265  48A5
11266  48A6
11267  48A7
11268  48A8
11269  48A9
11270  48AA
11271  48AB
11272  48AC
11273  48AD
11274  48AE
11275  48AF
11276  48B0
11277  48B1
11278  48B2
11279  48B3
11280  48B4
11281  48B5
11282  48B6
11283  48B7
11284  48B8
11285  48B9
11286  48BA
11287  48BB
11288  48BC
11289  48BD
11290  48BE
11291  48BF
11292  48C0
11293  48C1
11294  48C2
11295  48C3
11296  48C4
11297  48C5
11298  48C6
11299  48C7
11300  48C8
11301  48C9
11302  48CA
11303  48CB
11304  48CC
11305  48CD
11306  48CE
11307  48CF
11308  48D0
11309  48D1
11310  48D2
11311  48D3
11312  48D4
11313  48D5
11314  48D6
11315  48D7
11316  48D8
11317  48D9
11318  48DA
11319  48DB
11320  48DC
11321  48DD
11322  48DE
11323  48DF
11324  48E0
11325  48E1
11326  48E2
11327  48E3
11328  48E4
11329  48E5
11330  48E6
11331  48E7
11332  48E8
11333  48E9
11334  48EA
11335  48EB
11336  48EC
11337  48ED
11338  48EE
11339  48EF
11340  48F0
11341  48F1
11342  48F2
11343  48F3
11344  48F4
11345  48F5
11346  48F6
11347  48F7
11348  48F8
11349  48F9
11350  48FA
11351  48FB
11352  48FC
11353  48FD
11354  48FE
11355  48FF
11356  4900
11357  4901
11358  4902
11359  4903
11360  4904
11361  4905
11362  4906
11363  4907
11364  4908
11365  4909
11366  490A
11367  490B
11368  490C
11369  490D
11370  490E
11371  490F
11372  4910
11373  4911
11374  4912
11375  4913
11376  4914
11377  4915
11378  4916
11379  4917
11380  4918
11381  4919
11382  491A
11383  491B
11384  491C
11385  491D
11386  491E
11387  491F
11388  4920
11389  4921
11390  4922
11391  4923
11392  4924
11393  4925
11394  4926
11395  4927
11396  4928
11397  4929
11398  492A
11399  492B
11400  492C
11401  492D
11402  492E
11403  492F
11404  4930
11405  4931
11406  4932
11407  4933
11408  4934
11409  4935
11410  4936
11411  4937
11412  4938
11413  4939
11414  493A
11415  493B
11416  493C
11417  493D
11418  493E
11419  493F
11420  4940
11421  4941
11422  4942
11423  4943
11424  4944
11425  4945
11426  4946
11427  4947
11428  4948
11429  4949
11430  494A
11431  494B
11432  494C
11433  494D
11434  494E
11435  494F
11436  4950
11437  4951
11438  4952
11439  4953
11440  4954
11441  4955
11442  4956
11443  4957
11444  4958
11445  4959
11446  495A
11447  495B
11448  495C
11449  495D
11450  495E
11451  495F
11452  4960
11453  4961
11454  4962
11455  4963
11456  4964
11457  4965
11458  4966
11459  4967
11460  4968
11461  4969
11462  496A
11463  496B
11464  496C
11465  496D
11466  496E
11467  496F
11468  4970
11469  4971
11470  4972
11471  4973
11472  4974
11473  4975
11474  4976
11475  4977
11476  4978
11477  4979
11478  497A
11479  497B
11480  497C
11481  497D
11482  497E
11483  497F
11484  4980
11485  4981
11486  4982
11487  4983
11488  4984
11489  4985
11490  4986
11491  4987
11492  4988
11493  4989
11494  498A
11495  498B
11496  498C
11497  498D
11498  498E
11499  498F
11500  4990
11501  4991
11502  4992
11503  4993
11504  4994
11505  4995
11506  4996
11507  4997
11508  4998
11509  4999
11510  499A
11511  499B
11512  499C
11513  499D
11514  499E
11515  499F
11516  49A0
11517  49A1
11518  49A2
11519  49A3
11520  49A4
11521  49A5
11522  49A6
11523  49A7
11524  49A8
11525  49A9
11526  49AA
11527  49AB
11528  49AC
11529  49AD
11530  49AE
11531  49AF
11532  49B0
11533  49B1
11534  49B2
11535  49B3
11536  49B4
11537  49B5
11538  49B6
11539  49B7
11540  49B8
11541  49B9
11542  49BA
11543  49BB
11544  49BC
11545  49BD
11546  49BE
11547  49BF
11548  49C0
11549  49C1
11550  49C2
11551  49C3
11552  49C4
11553  49C5
11554  49C6
11555  49C7
11556  49C8
11557  49C9
11558  49CA
11559  49CB
11560  49CC
11561  49CD
11562  49CE
11563  49CF
11564  49D0
11565  49D1
11566  49D2
11567  49D3
11568  49D4
11569  49D5
11570  49D6
11571  49D7
11572  49D8
11573  49D9
11574  49DA
11575  49DB
11576  49DC
11577  49DD
11578  49DE
11579  49DF
11580  49E0
11581  49E1
11582  49E2
11583  49E3
11584  49E4
11585  49E5
11586  49E6
11587  49E7
11588  49E8
11589  49E9
11590  49EA
11591  49EB
11592  49EC
11593  49ED
11594  49EE
11595  49EF
11596  49F0
11597  49F1
11598  49F2
11599  49F3
11600  49F4
11601  49F5
11602  49F6
11603  49F7
11604  49F8
11605  49F9
11606  49FA
11607  49FB
11608  49FC
11609  49FD
11610  49FE
11611  49FF
11612  4A00
11613  4A01
11614  4A02
11615  4A03
11616  4A04
11617  4A05
11618  4A06
11619  4A07
11620  4A08
11621  4A09
11622  4A0A
11623  4A0B
11624  4A0C
11625  4A0D
11626  4A0E
11627  4A0F
11628  4A10
11629  4A11
11630  4A12
11631  4A13
11632  4A14
11633  4A15
11634  4A16
11635  4A17
11636  4A18
11637  4A19
11638  4A1A
11639  4A1B
11640  4A1C
11641  4A1D
11642  4A1E
11643  4A1F
11644  4A20
11645  4A21
11646  4A22
11647  4A23
11648  4A24
11649  4A25
11650  4A26
11651  4A27
11652  4A28
11653  4A29
11654  4A2A
11655  4A2B
11656  4A2C
11657  4A2D
11658  4A2E
11659  4A2F
11660  4A30
11661  4A31
11662  4A32
11663  4A33
11664  4A34
11665  4A35
11666  4A36
11667  4A37
11668  4A38
11669  4A39
11670  4A3A
11671  4A3B
11672  4A3C
11673  4A3D
11674  4A3E
11675  4A3F
11676  4A40
11677  4A41
11678  4A42
11679  4A43
11680  4A44
11681  4A45
11682  4A46
11683  4A47
11684  4A48
11685  4A49
11686  4A4A
11687  4A4B
11688  4A4C
11689  4A4D
11690  4A4E
11691  4A4F
11692  4A50
11693  4A51
11694  4A52
11695  4A53
11696  4A54
11697  4A55
11698  4A56
11699  4A57
11700  4A58
11701  4A59
11702  4A5A
11703  4A5B
11704  4A5C
11705  4A5D
11706  4A5E
11707  4A5F
11708  4A60
11709  4A61
11710  4A62
11711  4A63
11712  4A64
11713  4A65
11714  4A66
11715  4A67
11716  4A68
11717  4A69
11718  4A6A
11719  4A6B
11720  4A6C
11721  4A6D
11722  4A6E
11723  4A6F
11724  4A70
11725  4A71
11726  4A72
11727  4A73
11728  4A74
11729  4A75
11730  4A76
11731  4A77
11732  4A78
11733  4A79
11734  4A7A
11735  4A7B
11736  4A7C
11737  4A7D
11738  4A7E
11739  4A7F
11740  4A80
11741  4A81
11742  4A82
11743  4A83
11744  4A84
11745  4A85
11746  4A86
11747  4A87
11748  4A88
11749  4A89
11750  4A8A
11751  4A8B
11752  4A8C
11753  4A8D
11754  4A8E
11755  4A8F
11756  4A90
11757  4A91
11758  4A92
11759  4A93
11760  4A94
11761  4A95
11762  4A96
11763  4A97
11764  4A98
11765  4A99
11766  4A9A
11767  4A9B
11768  4A9C
11769  4A9D
11770  4A9E
11771  4A9F
11772  4AA0
11773  4AA1
11774  4AA2
11775  4AA3
11776  4AA4
11777  4AA5
11778  4AA6
11779  4AA7
11780  4AA8
11781  4AA9
11782  4AAA
11783  4AAB
11784  4AAC
11785  4AAD
11786  4AAE
11787  4AAF
11788  4AB0
11789  4AB1
11790  4AB2
11791  4AB3
11792  4AB4
11793  4AB5
11794  4AB6
11795  4AB7
11796  4AB8
11797  4AB9
11798  4ABA
11799  4ABB
11800  4ABC
11801  4ABD
11802  4ABE
11803  4ABF
11804  4AC0
11805  4AC1
11806  4AC2
11807  4AC3
11808  4AC4
11809  4AC5
11810  4AC6
11811  4AC7
11812  4AC8
11813  4AC9
11814  4ACA
11815  4ACB
11816  4ACC
11817  4ACD
11818  4ACE
11819  4ACF
11820  4AD0
11821  4AD1
11822  4AD2
11823  4AD3
11824  4AD4
11825  4AD5
11826  4AD6
11827  4AD7
11828  4AD8
11829  4AD9
11830  4ADA
11831  4ADB
11832  4ADC
11833  4ADD
11834  4ADE
11835  4ADF
11836  4AE0
11837  4AE1
11838  4AE2
11839  4AE3
11840  4AE4
11841  4AE5
11842  4AE6
11843  4AE7
11844  4AE8
11845  4AE9
11846  4AEA
11847  4AEB
11848  4AEC
11849  4AED
11850  4AEE
11851  4AEF
11852  4AF0
11853  4AF1
11854  4AF2
11855  4AF3
11856  4AF4
11857  4AF5
11858  4AF6
11859  4AF7
11860  4AF8
11861  4AF9
11862  4AFA
11863  4AFB
11864  4AFC
11865  4AFD
11866  4AFE
11867  4AFF
11868  4B00
11869  4B01
11870  4B02
11871  4B03
11872  4B04
11873  4B05
11874  4B06
11875  4B07
11876  4B08
11877  4B09
11878  4B0A
11879  4B0B
11880  4B0C
11881  4B0D
11882  4B0E
11883  4B0F
11884  4B10
11885  4B11
11886  4B12
11887  4B13
11888  4B14
11889  4B15
11890  4B16
11891  4B17
11892  4B18
11893  4B19
11894  4B1A
11895  4B1B
11896  4B1C
11897  4B1D
11898  4B1E
11899  4B1F
11900  4B20
11901  4B21
11902  4B22
11903  4B23
11904  4B24
11905  4B25
11906  4B26
11907  4B27
11908  4B28
11909  4B29
11910  4B2A
11911  4B2B
11912  4B2C
11913  4B2D
11914  4B2E
11915  4B2F
11916  4B30
11917  4B31
11918  4B32
11919  4B33
11920  4B34
11921  4B35
11922  4B36
11923  4B37
11924  4B38
11925  4B39
11926  4B3A
11927  4B3B
11928  4B3C
11929  4B3D
11930  4B3E
11931  4B3F
11932  4B40
11933  4B41
11934  4B42
11935  4B43
11936  4B44
11937  4B45
11938  4B46
11939  4B47
11940  4B48
11941  4B49
11942  4B4A
11943  4B4B
11944  4B4C
11945  4B4D
11946  4B4E
11947  4B4F
11948  4B50
11949  4B51
11950  4B52
11951  4B53
11952  4B54
11953  4B55
11954  4B56
11955  4B57
11956  4B58
11957  4B59
11958  4B5A
11959  4B5B
11960  4B5C
11961  4B5D
11962  4B5E
11963  4B5F
11964  4B60
11965  4B61
11966  4B62
11967  4B63
11968  4B64
11969  4B65
11970  4B66
11971  4B67
11972  4B68
11973  4B69
11974  4B6A
11975  4B6B
11976  4B6C
11977  4B6D
11978  4B6E
11979  4B6F
11980  4B70
11981  4B71
11982  4B72
11983  4B73
11984  4B74
11985  4B75
11986  4B76
11987  4B77
11988  4B78
11989  4B79
11990  4B7A
11991  4B7B
11992  4B7C
11993  4B7D
11994  4B7E
11995  4B7F
11996  4B80
11997  4B81
11998  4B82
11999  4B83
12000  4B84
12001  4B85
12002  4B86
12003  4B87
12004  4B88
12005  4B89
12006  4B8A
12007  4B8B
12008  4B8C
12009  4B8D
12010  4B8E
12011  4B8F
12012  4B90
12013  4B91
12014  4B92
12015  4B93
12016  4B94
12017  4B95
12018  4B96
12019  4B97
12020  4B98
12021  4B99
12022  4B9A
12023  4B9B
12024  4B9C
12025  4B9D
12026  4B9E
12027  4B9F
12028  4BA0
12029  4BA1
12030  4BA2
12031  4BA3
12032  4BA4
12033  4BA5
12034  4BA6
12035  4BA7
12036  4BA8
12037  4BA9
12038  4BAA
12039  4BAB
12040  4BAC
12041  4BAD
12042  4BAE
12043  4BAF
12044  4BB0
12045  4BB1
12046  4BB2
12047  4BB3
12048  4BB4
12049  4BB5
12050  4BB6
12051  4BB7
12052  4BB8
12053  4BB9
12054  4BBA
12055  4BBB
12056  4BBC
12057  4BBD
12058  4BBE
12059  4BBF
12060  4BC0
12061  4BC1
12062  4BC2
12063  4BC3
12064  4BC4
12065  4BC5
12066  4BC6
12067  4BC7
12068  4BC8
12069  4BC9
12070  4BCA
12071  4BCB
12072  4BCC
12073  4BCD
12074  4BCE
12075  4BCF
12076  4BD0
12077  4BD1
12078  4BD2
12079  4BD3
12080  4BD4
12081  4BD5
12082  4BD6
12083  4BD7
12084  4BD8
12085  4BD9
12086  4BDA
12087  4BDB
12088  4BDC
12089  4BDD
12090  4BDE
12091  4BDF
12092  4BE0
12093  4BE1
12094  4BE2
12095  4BE3
12096  4BE4
12097  4BE5
12098  4BE6
12099  4BE7
12100  4BE8
12101  4BE9
12102  4BEA
12103  4BEB
12104  4BEC
12105  4BED
12106  4BEE
12107  4BEF
12108  4BF0
12109  4BF1
12110  4BF2
12111  4BF3
12112  4BF4
12113  4BF5
12114  4BF6
12115  4BF7
12116  4BF8
12117  4BF9
12118  4BFA
12119  4BFB
12120  4BFC
12121  4BFD
12122  4BFE
12123  4BFF
12124  4C00
12125  4C01
12126  4C02
12127  4C03
12128  4C04
12129  4C05
12130  4C06
12131  4C07
12132  4C08
12133  4C09
12134  4C0A
12135  4C0B
12136  4C0C
12137  4C0D
12138  4C0E
12139  4C0F
12140  4C10
12141  4C11
12142  4C12
12143  4C13
12144  4C14
12145  4C15
12146  4C16
12147  4C17
12148  4C18
12149  4C19
12150  4C1A
12151  4C1B
12152  4C1C
12153  4C1D
12154  4C1E
12155  4C1F
12156  4C20
12157  4C21
12158  4C22
12159  4C23
12160  4C24
12161  4C25
12162  4C26
12163  4C27
12164  4C28
12165  4C29
12166  4C2A
12167  4C2B
12168  4C2C
12169  4C2D
12170  4C2E
12171  4C2F
12172  4C30
12173  4C31
12174  4C32
12175  4C33
12176  4C34
12177  4C35
12178  4C36
12179  4C37
12180  4C38
12181  4C39
12182  4C3A
12183  4C3B
12184  4C3C
12185  4C3D
12186  4C3E
12187  4C3F
12188  4C40
12189  4C41
12190  4C42
12191  4C43
12192  4C44
12193  4C45
12194  4C46
12195  4C47
12196  4C48
12197  4C49
12198  4C4A
12199  4C4B
12200  4C4C
12201  4C4D
12202  4C4E
12203  4C4F
12204  4C50
12205  4C51
12206  4C52
12207  4C53
12208  4C54
12209  4C55
12210  4C56
12211  4C57
12212  4C58
12213  4C59
12214  4C5A
12215  4C5B
12216  4C5C
12217  4C5D
12218  4C5E
12219  4C5F
12220  4C60
12221  4C61
12222  4C62
12223  4C63
12224  4C64
12225  4C65
12226  4C66
12227  4C67
12228  4C68
12229  4C69
12230  4C6A
12231  4C6B
12232  4C6C
12233  4C6D
12234  4C6E
12235  4C6F
12236  4C70
12237  4C71
12238  4C72
12239  4C73
12240  4C74
12241  4C75
12242  4C76
12243  4C77
12244  4C78
12245  4C79
12246  4C7A
12247  4C7B
12248  4C7C
12249  4C7D
12250  4C7E
12251  4C7F
12252  4C80
12253  4C81
12254  4C82
12255  4C83
12256  4C84
12257  4C85
12258  4C86
12259  4C87
12260  4C88
12261  4C89
12262  4C8A
12263  4C8B
12264  4C8C
12265  4C8D
12266  4C8E
12267  4C8F
12268  4C90
12269  4C91
12270  4C92
12271  4C93
12272  4C94
12273  4C95
12274  4C96
12275  4C97
12276  4C98
12277  4C99
12278  4C9A
12279  4C9B
12280  4C9C
12281  4C9D
12282  4C9E
12283  4C9F
12284  4CA0
12285  4CA1
12286  4CA2
12287  4CA3
12288  4CA4
12289  4CA5
12290  4CA6
12291  4CA7
12292  4CA8
12293  4CA9
12294  4CAA
12295  4CAB
12296  4CAC
12297  4CAD
12298  4CAE
12299  4CAF
12300  4CB0
12301  4CB1
12302  4CB2
12303  4CB3
12304  4CB4
12305  4CB5
12306  4CB6
12307  4CB7
12308  4CB8
12309  4CB9
12310  4CBA
12311  4CBB
12312  4CBC
12313  4CBD
12314  4CBE
12315  4CBF
12316  4CC0
12317  4CC1
12318  4CC2
12319  4CC3
12320  4CC4
12321  4CC5
12322  4CC6
12323  4CC7
12324  4CC8
12325  4CC9
12326  4CCA
12327  4CCB
12328  4CCC
12329  4CCD
12330  4CCE
12331  4CCF
12332  4CD0
12333  4CD1
12334  4CD2
12335  4CD3
12336  4CD4
12337  4CD5
12338  4CD6
12339  4CD7
12340  4CD8
12341  4CD9
12342  4CDA
12343  4CDB
12344  4CDC
12345  4CDD
12346  4CDE
12347  4CDF
12348  4CE0
12349  4CE1
12350  4CE2
12351  4CE3
12352  4CE4
12353  4CE5
12354  4CE6
12355  4CE7
12356  4CE8
12357  4CE9
12358  4CEA
12359  4CEB
12360  4CEC
12361  4CED
12362  4CEE
12363  4CEF
12364  4CF0
12365  4CF1
12366  4CF2
12367  4CF3
12368  4CF4
12369  4CF5
12370  4CF6
12371  4CF7
12372  4CF8
12373  4CF9
12374  4CFA
12375  4CFB
12376  4CFC
12377  4CFD
12378  4CFE
12379  4CFF
12380  4D00
12381  4D01
12382  4D02
12383  4D03
12384  4D04
12385  4D05
12386  4D06
12387  4D07
12388  4D08
12389  4D09
12390  4D0A
12391  4D0B
12392  4D0C
12393  4D0D
12394  4D0E
12395  4D0F
12396  4D10
12397  4D11
12398  4D12
12399  4D13
12400  4D14
12401  4D15
12402  4D16
12403  4D17
12404  4D18
12405  4D19
12406  4D1A
12407  4D1B
12408  4D1C
12409  4D1D
12410  4D1E
12411  4D1F
12412  4D20
12413  4D21
12414  4D22
12415  4D23
12416  4D24
12417  4D25
12418  4D26
12419  4D27
12420  4D28
12421  4D29
12422  4D2A
12423  4D2B
12424  4D2C
12425  4D2D
12426  4D2E
12427  4D2F
12428  4D30
12429  4D31
12430  4D32
12431  4D33
12432  4D34
12433  4D35
12434  4D36
12435  4D37
12436  4D38
12437  4D39
12438  4D3A
12439  4D3B
12440  4D3C
12441  4D3D
12442  4D3E
12443  4D3F
12444  4D40
12445  4D41
12446  4D42
12447  4D43
12448  4D44
12449  4D45
12450  4D46
12451  4D47
12452  4D48
12453  4D49
12454  4D4A
12455  4D4B
12456  4D4C
12457  4D4D
12458  4D4E
12459  4D4F
12460  4D50
12461  4D51
12462  4D52
12463  4D53
12464  4D54
12465  4D55
12466  4D56
12467  4D57
12468  4D58
12469  4D59
12470  4D5A
12471  4D5B
12472  4D5C
12473  4D5D
12474  4D5E
12475  4D5F
12476  4D60
12477  4D61
12478  4D62
12479  4D63
12480  4D64
12481  4D65
12482  4D66
12483  4D67
12484  4D68
12485  4D69
12486  4D6A
12487  4D6B
12488  4D6C
12489  4D6D
12490  4D6E
12491  4D6F
12492  4D70
12493  4D71
12494  4D72
12495  4D73
12496  4D74
12497  4D75
12498  4D76
12499  4D77
12500  4D78
12501  4D79
12502  4D7A
12503  4D7B
12504  4D7C
12505  4D7D
12506  4D7E
12507  4D7F
12508  4D80
12509  4D81
12510  4D82
12511  4D83
12512  4D84
12513  4D85
12514  4D86
12515  4D87
12516  4D88
12517  4D89
12518  4D8A
12519  4D8B
12520  4D8C
12521  4D8D
12522  4D8E
12523  4D8F
12524  4D90
12525  4D91
12526  4D92
12527  4D93
12528  4D94
12529  4D95
12530  4D96
12531  4D97
12532  4D98
12533  4D99
12534  4D9A
12535  4D9B
12536  4D9C
12537  4D9D
12538  4D9E
12539  4D9F
12540  4DA0
12541  4DA1
12542  4DA2
12543  4DA3
12544  4DA4
12545  4DA5
12546  4DA6
12547  4DA7
12548  4DA8
12549  4DA9
12550  4DAA
12551  4DAB
12552  4DAC
12553  4DAD
12554  4DAE
12555  4DAF
12556  4DB0
12557  4DB1
12558  4DB2
12559  4DB3
12560  4DB4
12561  4DB5
12562  4DB6
12563  4DB7
12564  4DB8
12565  4DB9
12566  4DBA
12567  4DBB
12568  4DBC
12569  4DBD
12570  4DBE
12571  4DBF
12572  4DC0
12573  4DC1
12574  4DC2
12575  4DC3
12576  4DC4
12577  4DC5
12578  4DC6
12579  4DC7
12580  4DC8
12581  4DC9
12582  4DCA
12583  4DCB
12584  4DCC
12585  4DCD
12586  4DCE
12587  4DCF
12588  4DD0
12589  4DD1
12590  4DD2
12591  4DD3
12592  4DD4
12593  4DD5
12594  4DD6
12595  4DD7
12596  4DD8
12597  4DD9
12598  4DDA
12599  4DDB
12600  4DDC
12601  4DDD
12602  4DDE
12603  4DDF
12604  4DE0
12605  4DE1
12606  4DE2
12607  4DE3
12608  4DE4
12609  4DE5
12610  4DE6
12611  4DE7
12612  4DE8
12613  4DE9
12614  4DEA
12615  4DEB
12616  4DEC
12617  4DED
12618  4DEE
12619  4DEF
12620  4DF0
12621  4DF1
12622  4DF2
12623  4DF3
12624  4DF4
12625  4DF5
12626  4DF6
12627  4DF7
12628  4DF8
12629  4DF9
12630  4DFA
12631  4DFB
12632  4DFC
12633  4DFD
12634  4DFE
12635  4DFF
12636  4E00
12637  4E01
12638  4E02
12639  4E03
12640  4E04
12641  4E05
12642  4E06
12643  4E07
12644  4E08
12645  4E09
12646  4E0A
12647  4E0B
12648  4E0C
12649  4E0D
12650  4E0E
12651  4E0F
12652  4E10
12653  4E11
12654  4E12
12655  4E13
12656  4E14
12657  4E15
12658  4E16
12659  4E17
12660  4E18
12661  4E19
12662  4E1A
12663  4E1B
12664  4E1C
12665  4E1D
12666  4E1E
12667  4E1F
12668  4E20
12669  4E21
12670  4E22
12671  4E23
12672  4E24
12673  4E25
12674  4E26
12675  4E27
12676  4E28
12677  4E29
12678  4E2A
12679  4E2B
12680  4E2C
12681  4E2D
12682  4E2E
12683  4E2F
12684  4E30
12685  4E31
12686  4E32
12687  4E33
12688  4E34
12689  4E35
12690  4E36
12691  4E37
12692  4E38
12693  4E39
12694  4E3A
12695  4E3B
12696  4E3C
12697  4E3D
12698  4E3E
12699  4E3F
12700  4E40
12701  4E41
12702  4E42
12703  4E43
12704  4E44
12705  4E45
12706  4E46
12707  4E47
12708  4E48
12709  4E49
12710  4E4A
12711  4E4B
12712  4E4C
12713  4E4D
12714  4E4E
12715  4E4F
12716  4E50
12717  4E51
12718  4E52
12719  4E53
12720  4E54
12721  4E55
12722  4E56
12723  4E57
12724  4E58
12725  4E59
12726  4E5A
12727  4E5B
12728  4E5C
12729  4E5D
12730  4E5E
12731  4E5F
12732  4E60
12733  4E61
12734  4E62
12735  4E63
12736  4E64
12737  4E65
12738  4E66
12739  4E67
12740  4E68
12741  4E69
12742  4E6A
12743  4E6B
12744  4E6C
12745  4E6D
12746  4E6E
12747  4E6F
12748  4E70
12749  4E71
12750  4E72
12751  4E73
12752  4E74
12753  4E75
12754  4E76
12755  4E77
12756  4E78
12757  4E79
12758  4E7A
12759  4E7B
12760  4E7C
12761  4E7D
12762  4E7E
12763  4E7F
12764  4E80
12765  4E81
12766  4E82
12767  4E83
12768  4E84
12769  4E85
12770  4E86
12771  4E87
12772  4E88
12773  4E89
12774  4E8A
12775  4E8B
12776  4E8C
12777  4E8D
12778  4E8E
12779  4E8F
12780  4E90
12781  4E91
12782  4E92
12783  4E93
12784  4E94
12785  4E95
12786  4E96
12787  4E97
12788  4E98
12789  4E99
12790  4E9A
12791  4E9B
12792  4E9C
12793  4E9D
12794  4E9E
12795  4E9F
12796  4EA0
12797  4EA1
12798  4EA2
12799  4EA3
12800  4EA4
12801  4EA5
12802  4EA6
12803  4EA7
12804  4EA8
12805  4EA9
12806  4EAA
12807  4EAB
12808  4EAC
12809  4EAD
12810  4EAE
12811  4EAF
12812  4EB0
12813  4EB1
12814  4EB2
12815  4EB3
12816  4EB4
12817  4EB5
12818  4EB6
12819  4EB7
12820  4EB8
12821  4EB9
12822  4EBA
12823  4EBB
12824  4EBC
12825  4EBD
12826  4EBE
12827  4EBF
12828  4EC0
12829  4EC1
12830  4EC2
12831  4EC3
12832  4EC4
12833  4EC5
12834  4EC6
12835  4EC7
12836  4EC8
12837  4EC9
12838  4ECA
12839  4ECB
12840  4ECC
12841  4ECD
12842  4ECE
12843  4ECF
12844  4ED0
12845  4ED1
12846  4ED2
12847  4ED3
12848  4ED4
12849  4ED5
12850  4ED6
12851  4ED7
12852  4ED8
12853  4ED9
12854  4EDA
12855  4EDB
12856  4EDC
12857  4EDD
12858  4EDE
12859  4EDF
12860  4EE0
12861  4EE1
12862  4EE2
12863  4EE3
12864  4EE4
12865  4EE5
12866  4EE6
12867  4EE7
12868  4EE8
12869  4EE9
12870  4EEA
12871  4EEB
12872  4EEC
12873  4EED
12874  4EEE
12875  4EEF
12876  4EF0
12877  4EF1
12878  4EF2
12879  4EF3
12880  4EF4
12881  4EF5
12882  4EF6
12883  4EF7
12884  4EF8
12885  4EF9
12886  4EFA
12887  4EFB
12888  4EFC
12889  4EFD
12890  4EFE
12891  4EFF
12892  4F00
12893  4F01
12894  4F02
12895  4F03
12896  4F04
12897  4F05
12898  4F06
12899  4F07
12900  4F08
12901  4F09
12902  4F0A
12903  4F0B
12904  4F0C
12905  4F0D
12906  4F0E
12907  4F0F
12908  4F10
12909  4F11
12910  4F12
12911  4F13
12912  4F14
12913  4F15
12914  4F16
12915  4F17
12916  4F18
12917  4F19
12918  4F1A
12919  4F1B
12920  4F1C
12921  4F1D
12922  4F1E
12923  4F1F
12924  4F20
12925  4F21
12926  4F22
12927  4F23
12928  4F24
12929  4F25
12930  4F26
12931  4F27
12932  4F28
12933  4F29
12934  4F2A
12935  4F2B
12936  4F2C
12937  4F2D
12938  4F2E
12939  4F2F
12940  4F30
12941  4F31
12942  4F32
12943  4F33
12944  4F34
12945  4F35
12946  4F36
12947  4F37
12948  4F38
12949  4F39
12950  4F3A
12951  4F3B
12952  4F3C
12953  4F3D
12954  4F3E
12955  4F3F
12956  4F40
12957  4F41
12958  4F42
12959  4F43
12960  4F44
12961  4F45
12962  4F46
12963  4F47
12964  4F48
12965  4F49
12966  4F4A
12967  4F4B
12968  4F4C
12969  4F4D
12970  4F4E
12971  4F4F
12972  4F50
12973  4F51
12974  4F52
12975  4F53
12976  4F54
12977  4F55
12978  4F56
12979  4F57
12980  4F58
12981  4F59
12982  4F5A
12983  4F5B
12984  4F5C
12985  4F5D
12986  4F5E
12987  4F5F
12988  4F60
12989  4F61
12990  4F62
12991  4F63
12992  4F64
12993  4F65
12994  4F66
12995  4F67
12996  4F68
12997  4F69
12998  4F6A
12999  4F6B
13000  4F6C
13001  4F6D
13002  4F6E
13003  4F6F
13004  4F70
13005  4F71
13006  4F72
13007  4F73
13008  4F74
13009  4F75
13010  4F76
13011  4F77
13012  4F78
13013  4F79
13014  4F7A
13015  4F7B
13016  4F7C
13017  4F7D
13018  4F7E
13019  4F7F
13020  4F80
13021  4F81
13022  4F82
13023  4F83
13024  4F84
13025  4F85
13026  4F86
13027  4F87
13028  4F88
13029  4F89
13030  4F8A
13031  4F8B
13032  4F8C
13033  4F8D
13034  4F8E
13035  4F8F
13036  4F90
13037  4F91
13038  4F92
13039  4F93
13040  4F94
13041  4F95
13042  4F96
13043  4F97
13044  4F98
13045  4F99
13046  4F9A
13047  4F9B
13048  4F9C
13049  4F9D
13050  4F9E
13051  4F9F
13052  4FA0
13053  4FA1
13054  4FA2
13055  4FA3
13056  4FA4
13057  4FA5
13058  4FA6
13059  4FA7
13060  4FA8
13061  4FA9
13062  4FAA
13063  4FAB
13064  4FAC
13065  4FAD
13066  4FAE
13067  4FAF
13068  4FB0
13069  4FB1
13070  4FB2
13071  4FB3
13072  4FB4
13073  4FB5
13074  4FB6
13075  4FB7
13076  4FB8
13077  4FB9
13078  4FBA
13079  4FBB
13080  4FBC
13081  4FBD
13082  4FBE
13083  4FBF
13084  4FC0
13085  4FC1
13086  4FC2
13087  4FC3
13088  4FC4
13089  4FC5
13090  4FC6
13091  4FC7
13092  4FC8
13093  4FC9
13094  4FCA
13095  4FCB
13096  4FCC
13097  4FCD
13098  4FCE
13099  4FCF
13100  4FD0
13101  4FD1
13102  4FD2
13103  4FD3
13104  4FD4
13105  4FD5
13106  4FD6
13107  4FD7
13108  4FD8
13109  4FD9
13110  4FDA
13111  4FDB
13112  4FDC
13113  4FDD
13114  4FDE
13115  4FDF
13116  4FE0
13117  4FE1
13118  4FE2
13119  4FE3
13120  4FE4
13121  4FE5
13122  4FE6
13123  4FE7
13124  4FE8
13125  4FE9
13126  4FEA
13127  4FEB
13128  4FEC
13129  4FED
13130  4FEE
13131  4FEF
13132  4FF0
13133  4FF1
13134  4FF2
13135  4FF3
13136  4FF4
13137  4FF5
13138  4FF6
13139  4FF7
13140  4FF8
13141  4FF9
13142  4FFA
13143  4FFB
13144  4FFC
13145  4FFD
13146  4FFE
13147  4FFF
13148  5000
13149  5001
13150  5002
13151  5003
13152  5004
13153  5005
13154  5006
13155  5007
13156  5008
13157  5009
13158  500A
13159  500B
13160  500C
13161  500D
13162  500E
13163  500F
13164  5010
13165  5011
13166  5012
13167  5013
13168  5014
13169  5015
13170  5016
13171  5017
13172  5018
13173  5019
13174  501A
13175  501B
13176  501C
13177  501D
13178  501E
13179  501F
13180  5020
13181  5021
13182  5022
13183  5023
13184  5024
13185  5025
13186  5026
13187  5027
13188  5028
13189  5029
13190  502A
13191  502B
13192  502C
13193  502D
13194  502E
13195  502F
13196  5030
13197  5031
13198  5032
13199  5033
13200  5034
13201  5035
13202  5036
13203  5037
13204  5038
13205  5039
13206  503A
13207  503B
13208  503C
13209  503D
13210  503E
13211  503F
13212  5040
13213  5041
13214  5042
13215  5043
13216  5044
13217  5045
13218  5046
13219  5047
13220  5048
13221  5049
13222  504A
13223  504B
13224  504C
13225  504D
13226  504E
13227  504F
13228  5050
13229  5051
13230  5052
13231  5053
13232  5054
13233  5055
13234  5056
13235  5057
13236  5058
13237  5059
13238  505A
13239  505B
13240  505C
13241  505D
13242  505E
13243  505F
13244  5060
13245  5061
13246  5062
13247  5063
13248  5064
13249  5065
13250  5066
13251  5067
13252  5068
13253  5069
13254  506A
13255  506B
13256  506C
13257  506D
13258  506E
13259  506F
13260  5070
13261  5071
13262  5072
13263  5073
13264  5074
13265  5075
13266  5076
13267  5077
13268  5078
13269  5079
13270  507A
13271  507B
13272  507C
13273  507D
13274  507E
13275  507F
13276  5080
13277  5081
13278  5082
13279  5083
13280  5084
13281  5085
13282  5086
13283  5087
13284  5088
13285  5089
13286  508A
13287  508B
13288  508C
13289  508D
13290  508E
13291  508F
13292  5090
13293  5091
13294  5092
13295  5093
13296  5094
13297  5095
13298  5096
13299  5097
13300  5098
13301  5099
13302  509A
13303  509B
13304  509C
13305  509D
13306  509E
13307  509F
13308  50A0
13309  50A1
13310  50A2
13311  50A3
13312  50A4
13313  50A5
13314  50A6
13315  50A7
13316  50A8
13317  50A9
13318  50AA
13319  50AB
13320  50AC
13321  50AD
13322  50AE
13323  50AF
13324  50B0
13325  50B1
13326  50B2
13327  50B3
13328  50B4
13329  50B5
13330  50B6
13331  50B7
13332  50B8
13333  50B9
13334  50BA
13335  50BB
13336  50BC
13337  50BD
13338  50BE
13339  50BF
13340  50C0
13341  50C1
13342  50C2
13343  50C3
13344  50C4
13345  50C5
13346  50C6
13347  50C7
13348  50C8
13349  50C9
13350  50CA
13351  50CB
13352  50CC
13353  50CD
13354  50CE
13355  50CF
13356  50D0
13357  50D1
13358  50D2
13359  50D3
13360  50D4
13361  50D5
13362  50D6
13363  50D7
13364  50D8
13365  50D9
13366  50DA
13367  50DB
13368  50DC
13369  50DD
13370  50DE
13371  50DF
13372  50E0
13373  50E1
13374  50E2
13375  50E3
13376  50E4
13377  50E5
13378  50E6
13379  50E7
13380  50E8
13381  50E9
13382  50EA
13383  50EB
13384  50EC
13385  50ED
13386  50EE
13387  50EF
13388  50F0
13389  50F1
13390  50F2
13391  50F3
13392  50F4
13393  50F5
13394  50F6
13395  50F7
13396  50F8
13397  50F9
13398  50FA
13399  50FB
13400  50FC
13401  50FD
13402  50FE
13403  50FF
13404  5100
13405  5101
13406  5102
13407  5103
13408  5104
13409  5105
13410  5106
13411  5107
13412  5108
13413  5109
13414  510A
13415  510B
13416  510C
13417  510D
13418  510E
13419  510F
13420  5110
13421  5111
13422  5112
13423  5113
13424  5114
13425  5115
13426  5116
13427  5117
13428  5118
13429  5119
13430  511A
13431  511B
13432  511C
13433  511D
13434  511E
13435  511F
13436  5120
13437  5121
13438  5122
13439  5123
13440  5124
13441  5125
13442  5126
13443  5127
13444  5128
13445  5129
13446  512A
13447  512B
13448  512C
13449  512D
13450  512E
13451  512F
13452  5130
13453  5131
13454  5132
13455  5133
13456  5134
13457  5135
13458  5136
13459  5137
13460  5138
13461  5139
13462  513A
13463  513B
13464  513C
13465  513D
13466  513E
13467  513F
13468  5140
13469  5141
13470  5142
13471  5143
13472  5144
13473  5145
13474  5146
13475  5147
13476  5148
13477  5149
13478  514A
13479  514B
13480  514C
13481  514D
13482  514E
13483  514F
13484  5150
13485  5151
13486  5152
13487  5153
13488  5154
13489  5155
13490  5156
13491  5157
13492  5158
13493  5159
13494  515A
13495  515B
13496  515C
13497  515D
13498  515E
13499  515F
13500  5160
13501  5161
13502  5162
13503  5163
13504  5164
13505  5165
13506  5166
13507  5167
13508  5168
13509  5169
13510  516A
13511  516B
13512  516C
13513  516D
13514  516E
13515  516F
13516  5170
13517  5171
13518  5172
13519  5173
13520  5174
13521  5175
13522  5176
13523  5177
13524  5178
13525  5179
13526  517A
13527  517B
13528  517C
13529  517D
13530  517E
13531  517F
13532  5180
13533  5181
13534  5182
13535  5183
13536  5184
13537  5185
13538  5186
13539  5187
13540  5188
13541  5189
13542  518A
13543  518B
13544  518C
13545  518D
13546  518E
13547  518F
13548  5190
13549  5191
13550  5192
13551  5193
13552  5194
13553  5195
13554  5196
13555  5197
13556  5198
13557  5199
13558  519A
13559  519B
13560  519C
13561  519D
13562  519E
13563  519F
13564  51A0
13565  51A1
13566  51A2
13567  51A3
13568  51A4
13569  51A5
13570  51A6
13571  51A7
13572  51A8
13573  51A9
13574  51AA
13575  51AB
13576  51AC
13577  51AD
13578  51AE
13579  51AF
13580  51B0
13581  51B1
13582  51B2
13583  51B3
13584  51B4
13585  51B5
13586  51B6
13587  51B7
13588  51B8
13589  51B9
13590  51BA
13591  51BB
13592  51BC
13593  51BD
13594  51BE
13595  51BF
13596  51C0
13597  51C1
13598  51C2
13599  51C3
13600  51C4
13601  51C5
13602  51C6
13603  51C7
13604  51C8
13605  51C9
13606  51CA
13607  51CB
13608  51CC
13609  51CD
13610  51CE
13611  51CF
13612  51D0
13613  51D1
13614  51D2
13615  51D3
13616  51D4
13617  51D5
13618  51D6
13619  51D7
13620  51D8
13621  51D9
13622  51DA
13623  51DB
13624  51DC
13625  51DD
13626  51DE
13627  51DF
13628  51E0
13629  51E1
13630  51E2
13631  51E3
13632  51E4
13633  51E5
13634  51E6
13635  51E7
13636  51E8
13637  51E9
13638  51EA
13639  51EB
13640  51EC
13641  51ED
13642  51EE
13643  51EF
13644  51F0
13645  51F1
13646  51F2
13647  51F3
13648  51F4
13649  51F5
13650  51F6
13651  51F7
13652  51F8
13653  51F9
13654  51FA
13655  51FB
13656  51FC
13657  51FD
13658  51FE
13659  51FF
13660  5200
13661  5201
13662  5202
13663  5203
13664  5204
13665  5205
13666  5206
13667  5207
13668  5208
13669  5209
13670  520A
13671  520B
13672  520C
13673  520D
13674  520E
13675  520F
13676  5210
13677  5211
13678  5212
13679  5213
13680  5214
13681  5215
13682  5216
13683  5217
13684  5218
13685  5219
13686  521A
13687  521B
13688  521C
13689  521D
13690  521E
13691  521F
13692  5220
13693  5221
13694  5222
13695  5223
13696  5224
13697  5225
13698  5226
13699  5227
13700  5228
13701  5229
13702  522A
13703  522B
13704  522C
13705  522D
13706  522E
13707  522F
13708  5230
13709  5231
13710  5232
13711  5233
13712  5234
13713  5235
13714  5236
13715  5237
13716  5238
13717  5239
13718  523A
13719  523B
13720  523C
13721  523D
13722  523E
13723  523F
13724  5240
13725  5241
13726  5242
13727  5243
13728  5244
13729  5245
13730  5246
13731  5247
13732  5248
13733  5249
13734  524A
13735  524B
13736  524C
13737  524D
13738  524E
13739  524F
13740  5250
13741  5251
13742  5252
13743  5253
13744  5254
13745  5255
13746  5256
13747  5257
13748  5258
13749  5259
13750  525A
13751  525B
13752  525C
13753  525D
13754  525E
13755  525F
13756  5260
13757  5261
13758  5262
13759  5263
13760  5264
13761  5265
13762  5266
13763  5267
13764  5268
13765  5269
13766  526A
13767  526B
13768  526C
13769  526D
13770  526E
13771  526F
13772  5270
13773  5271
13774  5272
13775  5273
13776  5274
13777  5275
13778  5276
13779  5277
13780  5278
13781  5279
13782  527A
13783  527B
13784  527C
13785  527D
13786  527E
13787  527F
13788  5280
13789  5281
13790  5282
13791  5283
13792  5284
13793  5285
13794  5286
13795  5287
13796  5288
13797  5289
13798  528A
13799  528B
13800  528C
13801  528D
13802  528E
13803  528F
13804  5290
13805  5291
13806  5292
13807  5293
13808  5294
13809  5295
13810  5296
13811  5297
13812  5298
13813  5299
13814  529A
13815  529B
13816  529C
13817  529D
13818  529E
13819  529F
13820  52A0
13821  52A1
13822  52A2
13823  52A3
13824  52A4
13825  52A5
13826  52A6
13827  52A7
13828  52A8
13829  52A9
13830  52AA
13831  52AB
13832  52AC
13833  52AD
13834  52AE
13835  52AF
13836  52B0
13837  52B1
13838  52B2
13839  52B3
13840  52B4
13841  52B5
13842  52B6
13843  52B7
13844  52B8
13845  52B9
13846  52BA
13847  52BB
13848  52BC
13849  52BD
13850  52BE
13851  52BF
13852  52C0
13853  52C1
13854  52C2
13855  52C3
13856  52C4
13857  52C5
13858  52C6
13859  52C7
13860  52C8
13861  52C9
13862  52CA
13863  52CB
13864  52CC
13865  52CD
13866  52CE
13867  52CF
13868  52D0
13869  52D1
13870  52D2
13871  52D3
13872  52D4
13873  52D5
13874  52D6
13875  52D7
13876  52D8
13877  52D9
13878  52DA
13879  52DB
13880  52DC
13881  52DD
13882  52DE
13883  52DF
13884  52E0
13885  52E1
13886  52E2
13887  52E3
13888  52E4
13889  52E5
13890  52E6
13891  52E7
13892  52E8
13893  52E9
13894  52EA
13895  52EB
13896  52EC
13897  52ED
13898  52EE
13899  52EF
13900  52F0
13901  52F1
13902  52F2
13903  52F3
13904  52F4
13905  52F5
13906  52F6
13907  52F7
13908  52F8
13909  52F9
13910  52FA
13911  52FB
13912  52FC
13913  52FD
13914  52FE
13915  52FF
13916  5300
13917  5301
13918  5302
13919  5303
13920  5304
13921  5305
13922  5306
13923  5307
13924  5308
13925  5309
13926  530A
13927  530B
13928  530C
13929  530D
13930  530E
13931  530F
13932  5310
13933  5311
13934  5312
13935  5313
13936  5314
13937  5315
13938  5316
13939  5317
13940  5318
13941  5319
13942  531A
13943  531B
13944  531C
13945  531D
13946  531E
13947  531F
13948  5320
13949  5321
13950  5322
13951  5323
13952  5324
13953  5325
13954  5326
13955  5327
13956  5328
13957  5329
13958  532A
13959  532B
13960  532C
13961  532D
13962  532E
13963  532F
13964  5330
13965  5331
13966  5332
13967  5333
13968  5334
13969  5335
13970  5336
13971  5337
13972  5338
13973  5339
13974  533A
13975  533B
13976  533C
13977  533D
13978  533E
13979  533F
13980  5340
13981  5341
13982  5342
13983  5343
13984  5344
13985  5345
13986  5346
13987  5347
13988  5348
13989  5349
13990  534A
13991  534B
13992  534C
13993  534D
13994  534E
13995  534F
13996  5350
13997  5351
13998  5352
13999  5353
14000  5354
14001  5355
14002  5356
14003  5357
14004  5358
14005  5359
14006  535A
14007  535B
14008  535C
14009  535D
14010  535E
14011  535F
14012  5360
14013  5361
14014  5362
14015  5363
14016  5364
14017  5365
14018  5366
14019  5367
14020  5368
14021  5369
14022  536A
14023  536B
14024  536C
14025  536D
14026  536E
14027  536F
14028  5370
14029  5371
14030  5372
14031  5373
14032  5374
14033  5375
14034  5376
14035  5377
14036  5378
14037  5379
14038  537A
14039  537B
14040  537C
14041  537D
14042  537E
14043  537F
14044  5380
14045  5381
14046  5382
14047  5383
14048  5384
14049  5385
14050  5386
14051  5387
14052  5388
14053  5389
14054  538A
14055  538B
14056  538C
14057  538D
14058  538E
14059  538F
14060  5390
14061  5391
14062  5392
14063  5393
14064  5394
14065  5395
14066  5396
14067  5397
14068  5398
14069  5399
14070  539A
14071  539B
14072  539C
14073  539D
14074  539E
14075  539F
14076  53A0
14077  53A1
14078  53A2
14079  53A3
14080  53A4
14081  53A5
14082  53A6
14083  53A7
14084  53A8
14085  53A9
14086  53AA
14087  53AB
14088  53AC
14089  53AD
14090  53AE
14091  53AF
14092  53B0
14093  53B1
14094  53B2
14095  53B3
14096  53B4
14097  53B5
14098  53B6
14099  53B7
14100  53B8
14101  53B9
14102  53BA
14103  53BB
14104  53BC
14105  53BD
14106  53BE
14107  53BF
14108  53C0
14109  53C1
14110  53C2
14111  53C3
14112  53C4
14113  53C5
14114  53C6
14115  53C7
14116  53C8
14117  53C9
14118  53CA
14119  53CB
14120  53CC
14121  53CD
14122  53CE
14123  53CF
14124  53D0
14125  53D1
14126  53D2
14127  53D3
14128  53D4
14129  53D5
14130  53D6
14131  53D7
14132  53D8
14133  53D9
14134  53DA
14135  53DB
14136  53DC
14137  53DD
14138  53DE
14139  53DF
14140  53E0
14141  53E1
14142  53E2
14143  53E3
14144  53E4
14145  53E5
14146  53E6
14147  53E7
14148  53E8
14149  53E9
14150  53EA
14151  53EB
14152  53EC
14153  53ED
14154  53EE
14155  53EF
14156  53F0
14157  53F1
14158  53F2
14159  53F3
14160  53F4
14161  53F5
14162  53F6
14163  53F7
14164  53F8
14165  53F9
14166  53FA
14167  53FB
14168  53FC
14169  53FD
14170  53FE
14171  53FF
14172  5400
14173  5401
14174  5402
14175  5403
14176  5404
14177  5405
14178  5406
14179  5407
14180  5408
14181  5409
14182  540A
14183  540B
14184  540C
14185  540D
14186  540E
14187  540F
14188  5410
14189  5411
14190  5412
14191  5413
14192  5414
14193  5415
14194  5416
14195  5417
14196  5418
14197  5419
14198  541A
14199  541B
14200  541C
14201  541D
14202  541E
14203  541F
14204  5420
14205  5421
14206  5422
14207  5423
14208  5424
14209  5425
14210  5426
14211  5427
14212  5428
14213  5429
14214  542A
14215  542B
14216  542C
14217  542D
14218  542E
14219  542F
14220  5430
14221  5431
14222  5432
14223  5433
14224  5434
14225  5435
14226  5436
14227  5437
14228  5438
14229  5439
14230  543A
14231  543B
14232  543C
14233  543D
14234  543E
14235  543F
14236  5440
14237  5441
14238  5442
14239  5443
14240  5444
14241  5445
14242  5446
14243  5447
14244  5448
14245  5449
14246  544A
14247  544B
14248  544C
14249  544D
14250  544E
14251  544F
14252  5450
14253  5451
14254  5452
14255  5453
14256  5454
14257  5455
14258  5456
14259  5457
14260  5458
14261  5459
14262  545A
14263  545B
14264  545C
14265  545D
14266  545E
14267  545F
14268  5460
14269  5461
14270  5462
14271  5463
14272  5464
14273  5465
14274  5466
14275  5467
14276  5468
14277  5469
14278  546A
14279  546B
14280  546C
14281  546D
14282  546E
14283  546F
14284  5470
14285  5471
14286  5472
14287  5473
14288  5474
14289  5475
14290  5476
14291  5477
14292  5478
14293  5479
14294  547A
14295  547B
14296  547C
14297  547D
14298  547E
14299  547F
14300  5480
14301  5481
14302  5482
14303  5483
14304  5484
14305  5485
14306  5486
14307  5487
14308  5488
14309  5489
14310  548A
14311  548B
14312  548C
14313  548D
14314  548E
14315  548F
14316  5490
14317  5491
14318  5492
14319  5493
14320  5494
14321  5495
14322  5496
14323  5497
14324  5498
14325  5499
14326  549A
14327  549B
14328  549C
14329  549D
14330  549E
14331  549F
14332  54A0
14333  54A1
14334  54A2
14335  54A3
14336  54A4
14337  54A5
14338  54A6
14339  54A7
14340  54A8
14341  54A9
14342  54AA
14343  54AB
14344  54AC
14345  54AD
14346  54AE
14347  54AF
14348  54B0
14349  54B1
14350  54B2
14351  54B3
14352  54B4
14353  54B5
14354  54B6
14355  54B7
14356  54B8
14357  54B9
14358  54BA
14359  54BB
14360  54BC
14361  54BD
14362  54BE
14363  54BF
14364  54C0
14365  54C1
14366  54C2
14367  54C3
14368  54C4
14369  54C5
14370  54C6
14371  54C7
14372  54C8
14373  54C9
14374  54CA
14375  54CB
14376  54CC
14377  54CD
14378  54CE
14379  54CF
14380  54D0
14381  54D1
14382  54D2
14383  54D3
14384  54D4
14385  54D5
14386  54D6
14387  54D7
14388  54D8
14389  54D9
14390  54DA
14391  54DB
14392  54DC
14393  54DD
14394  54DE
14395  54DF
14396  54E0
14397  54E1
14398  54E2
14399  54E3
14400  54E4
14401  54E5
14402  54E6
14403  54E7
14404  54E8
14405  54E9
14406  54EA
14407  54EB
14408  54EC
14409  54ED
14410  54EE
14411  54EF
14412  54F0
14413  54F1
14414  54F2
14415  54F3
14416  54F4
14417  54F5
14418  54F6
14419  54F7
14420  54F8
14421  54F9
14422  54FA
14423  54FB
14424  54FC
14425  54FD
14426  54FE
14427  54FF
14428  5500
14429  5501
14430  5502
14431  5503
14432  5504
14433  5505
14434  5506
14435  5507
14436  5508
14437  5509
14438  550A
14439  550B
14440  550C
14441  550D
14442  550E
14443  550F
14444  5510
14445  5511
14446  5512
14447  5513
14448  5514
14449  5515
14450  5516
14451  5517
14452  5518
14453  5519
14454  551A
14455  551B
14456  551C
14457  551D
14458  551E
14459  551F
14460  5520
14461  5521
14462  5522
14463  5523
14464  5524
14465  5525
14466  5526
14467  5527
14468  5528
14469  5529
14470  552A
14471  552B
14472  552C
14473  552D
14474  552E
14475  552F
14476  5530
14477  5531
14478  5532
14479  5533
14480  5534
14481  5535
14482  5536
14483  5537
14484  5538
14485  5539
14486  553A
14487  553B
14488  553C
14489  553D
14490  553E
14491  553F
14492  5540
14493  5541
14494  5542
14495  5543
14496  5544
14497  5545
14498  5546
14499  5547
14500  5548
14501  5549
14502  554A
14503  554B
14504  554C
14505  554D
14506  554E
14507  554F
14508  5550
14509  5551
14510  5552
14511  5553
14512  5554
14513  5555
14514  5556
14515  5557
14516  5558
14517  5559
14518  555A
14519  555B
14520  555C
14521  555D
14522  555E
14523  555F
14524  5560
14525  5561
14526  5562
14527  5563
14528  5564
14529  5565
14530  5566
14531  5567
14532  5568
14533  5569
14534  556A
14535  556B
14536  556C
14537  556D
14538  556E
14539  556F
14540  5570
14541  5571
14542  5572
14543  5573
14544  5574
14545  5575
14546  5576
14547  5577
14548  5578
14549  5579
14550  557A
14551  557B
14552  557C
14553  557D
14554  557E
14555  557F
14556  5580
14557  5581
14558  5582
14559  5583
14560  5584
14561  5585
14562  5586
14563  5587
14564  5588
14565  5589
14566  558A
14567  558B
14568  558C
14569  558D
14570  558E
14571  558F
14572  5590
14573  5591
14574  5592
14575  5593
14576  5594
14577  5595
14578  5596
14579  5597
14580  5598
14581  5599
14582  559A
14583  559B
14584  559C
14585  559D
14586  559E
14587  559F
14588  55A0
14589  55A1
14590  55A2
14591  55A3
14592  55A4
14593  55A5
14594  55A6
14595  55A7
14596  55A8
14597  55A9
14598  55AA
14599  55AB
14600  55AC
14601  55AD
14602  55AE
14603  55AF
14604  55B0
14605  55B1
14606  55B2
14607  55B3
14608  55B4
14609  55B5
14610  55B6
14611  55B7
14612  55B8
14613  55B9
14614  55BA
14615  55BB
14616  55BC
14617  55BD
14618  55BE
14619  55BF
14620  55C0
14621  55C1
14622  55C2
14623  55C3
14624  55C4
14625  55C5
14626  55C6
14627  55C7
14628  55C8
14629  55C9
14630  55CA
14631  55CB
14632  55CC
14633  55CD
14634  55CE
14635  55CF
14636  55D0
14637  55D1
14638  55D2
14639  55D3
14640  55D4
14641  55D5
14642  55D6
14643  55D7
14644  55D8
14645  55D9
14646  55DA
14647  55DB
14648  55DC
14649  55DD
14650  55DE
14651  55DF
14652  55E0
14653  55E1
14654  55E2
14655  55E3
14656  55E4
14657  55E5
14658  55E6
14659  55E7
14660  55E8
14661  55E9
14662  55EA
14663  55EB
14664  55EC
14665  55ED
14666  55EE
14667  55EF
14668  55F0
14669  55F1
14670  55F2
14671  55F3
14672  55F4
14673  55F5
14674  55F6
14675  55F7
14676  55F8
14677  55F9
14678  55FA
14679  55FB
14680  55FC
14681  55FD
14682  55FE
14683  55FF
14684  5600
14685  5601
14686  5602
14687  5603
14688  5604
14689  5605
14690  5606
14691  5607
14692  5608
14693  5609
14694  560A
14695  560B
14696  560C
14697  560D
14698  560E
14699  560F
14700  5610
14701  5611
14702  5612
14703  5613
14704  5614
14705  5615
14706  5616
14707  5617
14708  5618
14709  5619
14710  561A
14711  561B
14712  561C
14713  561D
14714  561E
14715  561F
14716  5620
14717  5621
14718  5622
14719  5623
14720  5624
14721  5625
14722  5626
14723  5627
14724  5628
14725  5629
14726  562A
14727  562B
14728  562C
14729  562D
14730  562E
14731  562F
14732  5630
14733  5631
14734  5632
14735  5633
14736  5634
14737  5635
14738  5636
14739  5637
14740  5638
14741  5639
14742  563A
14743  563B
14744  563C
14745  563D
14746  563E
14747  563F
14748  5640
14749  5641
14750  5642
14751  5643
14752  5644
14753  5645
14754  5646
14755  5647
14756  5648
14757  5649
14758  564A
14759  564B
14760  564C
14761  564D
14762  564E
14763  564F
14764  5650
14765  5651
14766  5652
14767  5653
14768  5654
14769  5655
14770  5656
14771  5657
14772  5658
14773  5659
14774  565A
14775  565B
14776  565C
14777  565D
14778  565E
14779  565F
14780  5660
14781  5661
14782  5662
14783  5663
14784  5664
14785  5665
14786  5666
14787  5667
14788  5668
14789  5669
14790  566A
14791  566B
14792  566C
14793  566D
14794  566E
14795  566F
14796  5670
14797  5671
14798  5672
14799  5673
14800  5674
14801  5675
14802  5676
14803  5677
14804  5678
14805  5679
14806  567A
14807  567B
14808  567C
14809  567D
14810  567E
14811  567F
14812  5680
14813  5681
14814  5682
14815  5683
14816  5684
14817  5685
14818  5686
14819  5687
14820  5688
14821  5689
14822  568A
14823  568B
14824  568C
14825  568D
14826  568E
14827  568F
14828  5690
14829  5691
14830  5692
14831  5693
14832  5694
14833  5695
14834  5696
14835  5697
14836  5698
14837  5699
14838  569A
14839  569B
14840  569C
14841  569D
14842  569E
14843  569F
14844  56A0
14845  56A1
14846  56A2
14847  56A3
14848  56A4
14849  56A5
14850  56A6
14851  56A7
14852  56A8
14853  56A9
14854  56AA
14855  56AB
14856  56AC
14857  56AD
14858  56AE
14859  56AF
14860  56B0
14861  56B1
14862  56B2
14863  56B3
14864  56B4
14865  56B5
14866  56B6
14867  56B7
14868  56B8
14869  56B9
14870  56BA
14871  56BB
14872  56BC
14873  56BD
14874  56BE
14875  56BF
14876  56C0
14877  56C1
14878  56C2
14879  56C3
14880  56C4
14881  56C5
14882  56C6
14883  56C7
14884  56C8
14885  56C9
14886  56CA
14887  56CB
14888  56CC
14889  56CD
14890  56CE
14891  56CF
14892  56D0
14893  56D1
14894  56D2
14895  56D3
14896  56D4
14897  56D5
14898  56D6
14899  56D7
14900  56D8
14901  56D9
14902  56DA
14903  56DB
14904  56DC
14905  56DD
14906  56DE
14907  56DF
14908  56E0
14909  56E1
14910  56E2
14911  56E3
14912  56E4
14913  56E5
14914  56E6
14915  56E7
14916  56E8
14917  56E9
14918  56EA
14919  56EB
14920  56EC
14921  56ED
14922  56EE
14923  56EF
14924  56F0
14925  56F1
14926  56F2
14927  56F3
14928  56F4
14929  56F5
14930  56F6
14931  56F7
14932  56F8
14933  56F9
14934  56FA
14935  56FB
14936  56FC
14937  56FD
14938  56FE
14939  56FF
14940  5700
14941  5701
14942  5702
14943  5703
14944  5704
14945  5705
14946  5706
14947  5707
14948  5708
14949  5709
14950  570A
14951  570B
14952  570C
14953  570D
14954  570E
14955  570F
14956  5710
14957  5711
14958  5712
14959  5713
14960  5714
14961  5715
14962  5716
14963  5717
14964  5718
14965  5719
14966  571A
14967  571B
14968  571C
14969  571D
14970  571E
14971  571F
14972  5720
14973  5721
14974  5722
14975  5723
14976  5724
14977  5725
14978  5726
14979  5727
14980  5728
14981  5729
14982  572A
14983  572B
14984  572C
14985  572D
14986  572E
14987  572F
14988  5730
14989  5731
14990  5732
14991  5733
14992  5734
14993  5735
14994  5736
14995  5737
14996  5738
14997  5739
14998  573A
14999  573B
15000  573C
15001  573D
15002  573E
15003  573F
15004  5740
15005  5741
15006  5742
15007  5743
15008  5744
15009  5745
15010  5746
15011  5747
15012  5748
15013  5749
15014  574A
15015  574B
15016  574C
15017  574D
15018  574E
15019  574F
15020  5750
15021  5751
15022  5752
15023  5753
15024  5754
15025  5755
15026  5756
15027  5757
15028  5758
15029  5759
15030  575A
15031  575B
15032  575C
15033  575D
15034  575E
15035  575F
15036  5760
15037  5761
15038  5762
15039  5763
15040  5764
15041  5765
15042  5766
15043  5767
15044  5768
15045  5769
15046  576A
15047  576B
15048  576C
15049  576D
15050  576E
15051  576F
15052  5770
15053  5771
15054  5772
15055  5773
15056  5774
15057  5775
15058  5776
15059  5777
15060  5778
15061  5779
15062  577A
15063  577B
15064  577C
15065  577D
15066  577E
15067  577F
15068  5780
15069  5781
15070  5782
15071  5783
15072  5784
15073  5785
15074  5786
15075  5787
15076  5788
15077  5789
15078  578A
15079  578B
15080  578C
15081  578D
15082  578E
15083  578F
15084  5790
15085  5791
15086  5792
15087  5793
15088  5794
15089  5795
15090  5796
15091  5797
15092  5798
15093  5799
15094  579A
15095  579B
15096  579C
15097  579D
15098  579E
15099  579F
15100  57A0
15101  57A1
15102  57A2
15103  57A3
15104  57A4
15105  57A5
15106  57A6
15107  57A7
15108  57A8
15109  57A9
15110  57AA
15111  57AB
15112  57AC
15113  57AD
15114  57AE
15115  57AF
15116  57B0
15117  57B1
15118  57B2
15119  57B3
15120  57B4
15121  57B5
15122  57B6
15123  57B7
15124  57B8
15125  57B9
15126  57BA
15127  57BB
15128  57BC
15129  57BD
15130  57BE
15131  57BF
15132  57C0
15133  57C1
15134  57C2
15135  57C3
15136  57C4
15137  57C5
15138  57C6
15139  57C7
15140  57C8
15141  57C9
15142  57CA
15143  57CB
15144  57CC
15145  57CD
15146  57CE
15147  57CF
15148  57D0
15149  57D1
15150  57D2
15151  57D3
15152  57D4
15153  57D5
15154  57D6
15155  57D7
15156  57D8
15157  57D9
15158  57DA
15159  57DB
15160  57DC
15161  57DD
15162  57DE
15163  57DF
15164  57E0
15165  57E1
15166  57E2
15167  57E3
15168  57E4
15169  57E5
15170  57E6
15171  57E7
15172  57E8
15173  57E9
15174  57EA
15175  57EB
15176  57EC
15177  57ED
15178  57EE
15179  57EF
15180  57F0
15181  57F1
15182  57F2
15183  57F3
15184  57F4
15185  57F5
15186  57F6
15187  57F7
15188  57F8
15189  57F9
15190  57FA
15191  57FB
15192  57FC
15193  57FD
15194  57FE
15195  57FF
15196  5800
15197  5801
15198  5802
15199  5803
15200  5804
15201  5805
15202  5806
15203  5807
15204  5808
15205  5809
15206  580A
15207  580B
15208  580C
15209  580D
15210  580E
15211  580F
15212  5810
15213  5811
15214  5812
15215  5813
15216  5814
15217  5815
15218  5816
15219  5817
15220  5818
15221  5819
15222  581A
15223  581B
15224  581C
15225  581D
15226  581E
15227  581F
15228  5820
15229  5821
15230  5822
15231  5823
15232  5824
15233  5825
15234  5826
15235  5827
15236  5828
15237  5829
15238  582A
15239  582B
15240  582C
15241  582D
15242  582E
15243  582F
15244  5830
15245  5831
15246  5832
15247  5833
15248  5834
15249  5835
15250  5836
15251  5837
15252  5838
15253  5839
15254  583A
15255  583B
15256  583C
15257  583D
15258  583E
15259  583F
15260  5840
15261  5841
15262  5842
15263  5843
15264  5844
15265  5845
15266  5846
15267  5847
15268  5848
15269  5849
15270  584A
15271  584B
15272  584C
15273  584D
15274  584E
15275  584F
15276  5850
15277  5851
15278  5852
15279  5853
15280  5854
15281  5855
15282  5856
15283  5857
15284  5858
15285  5859
15286  585A
15287  585B
15288  585C
15289  585D
15290  585E
15291  585F
15292  5860
15293  5861
15294  5862
15295  5863
15296  5864
15297  5865
15298  5866
15299  5867
15300  5868
15301  5869
15302  586A
15303  586B
15304  586C
15305  586D
15306  586E
15307  586F
15308  5870
15309  5871
15310  5872
15311  5873
15312  5874
15313  5875
15314  5876
15315  5877
15316  5878
15317  5879
15318  587A
15319  587B
15320  587C
15321  587D
15322  587E
15323  587F
15324  5880
15325  5881
15326  5882
15327  5883
15328  5884
15329  5885
15330  5886
15331  5887
15332  5888
15333  5889
15334  588A
15335  588B
15336  588C
15337  588D
15338  588E
15339  588F
15340  5890
15341  5891
15342  5892
15343  5893
15344  5894
15345  5895
15346  5896
15347  5897
15348  5898
15349  5899
15350  589A
15351  589B
15352  589C
15353  589D
15354  589E
15355  589F
15356  58A0
15357  58A1
15358  58A2
15359  58A3
15360  58A4
15361  58A5
15362  58A6
15363  58A7
15364  58A8
15365  58A9
15366  58AA
15367  58AB
15368  58AC
15369  58AD
15370  58AE
15371  58AF
15372  58B0
15373  58B1
15374  58B2
15375  58B3
15376  58B4
15377  58B5
15378  58B6
15379  58B7
15380  58B8
15381  58B9
15382  58BA
15383  58BB
15384  58BC
15385  58BD
15386  58BE
15387  58BF
15388  58C0
15389  58C1
15390  58C2
15391  58C3
15392  58C4
15393  58C5
15394  58C6
15395  58C7
15396  58C8
15397  58C9
15398  58CA
15399  58CB
15400  58CC
15401  58CD
15402  58CE
15403  58CF
15404  58D0
15405  58D1
15406  58D2
15407  58D3
15408  58D4
15409  58D5
15410  58D6
15411  58D7
15412  58D8
15413  58D9
15414  58DA
15415  58DB
15416  58DC
15417  58DD
15418  58DE
15419  58DF
15420  58E0
15421  58E1
15422  58E2
15423  58E3
15424  58E4
15425  58E5
15426  58E6
15427  58E7
15428  58E8
15429  58E9
15430  58EA
15431  58EB
15432  58EC
15433  58ED
15434  58EE
15435  58EF
15436  58F0
15437  58F1
15438  58F2
15439  58F3
15440  58F4
15441  58F5
15442  58F6
15443  58F7
15444  58F8
15445  58F9
15446  58FA
15447  58FB
15448  58FC
15449  58FD
15450  58FE
15451  58FF
15452  5900
15453  5901
15454  5902
15455  5903
15456  5904
15457  5905
15458  5906
15459  5907
15460  5908
15461  5909
15462  590A
15463  590B
15464  590C
15465  590D
15466  590E
15467  590F
15468  5910
15469  5911
15470  5912
15471  5913
15472  5914
15473  5915
15474  5916
15475  5917
15476  5918
15477  5919
15478  591A
15479  591B
15480  591C
15481  591D
15482  591E
15483  591F
15484  5920
15485  5921
15486  5922
15487  5923
15488  5924
15489  5925
15490  5926
15491  5927
15492  5928
15493  5929
15494  592A
15495  592B
15496  592C
15497  592D
15498  592E
15499  592F
15500  5930
15501  5931
15502  5932
15503  5933
15504  5934
15505  5935
15506  5936
15507  5937
15508  5938
15509  5939
15510  593A
15511  593B
15512  593C
15513  593D
15514  593E
15515  593F
15516  5940
15517  5941
15518  5942
15519  5943
15520  5944
15521  5945
15522  5946
15523  5947
15524  5948
15525  5949
15526  594A
15527  594B
15528  594C
15529  594D
15530  594E
15531  594F
15532  5950
15533  5951
15534  5952
15535  5953
15536  5954
15537  5955
15538  5956
15539  5957
15540  5958
15541  5959
15542  595A
15543  595B
15544  595C
15545  595D
15546  595E
15547  595F
15548  5960
15549  5961
15550  5962
15551  5963
15552  5964
15553  5965
15554  5966
15555  5967
15556  5968
15557  5969
15558  596A
15559  596B
15560  596C
15561  596D
15562  596E
15563  596F
15564  5970
15565  5971
15566  5972
15567  5973
15568  5974
15569  5975
15570  5976
15571  5977
15572  5978
15573  5979
15574  597A
15575  597B
15576  597C
15577  597D
15578  597E
15579  597F
15580  5980
15581  5981
15582  5982
15583  5983
15584  5984
15585  5985
15586  5986
15587  5987
15588  5988
15589  5989
15590  598A
15591  598B
15592  598C
15593  598D
15594  598E
15595  598F
15596  5990
15597  5991
15598  5992
15599  5993
15600  5994
15601  5995
15602  5996
15603  5997
15604  5998
15605  5999
15606  599A
15607  599B
15608  599C
15609  599D
15610  599E
15611  599F
15612  59A0
15613  59A1
15614  59A2
15615  59A3
15616  59A4
15617  59A5
15618  59A6
15619  59A7
15620  59A8
15621  59A9
15622  59AA
15623  59AB
15624  59AC
15625  59AD
15626  59AE
15627  59AF
15628  59B0
15629  59B1
15630  59B2
15631  59B3
15632  59B4
15633  59B5
15634  59B6
15635  59B7
15636  59B8
15637  59B9
15638  59BA
15639  59BB
15640  59BC
15641  59BD
15642  59BE
15643  59BF
15644  59C0
15645  59C1
15646  59C2
15647  59C3
15648  59C4
15649  59C5
15650  59C6
15651  59C7
15652  59C8
15653  59C9
15654  59CA
15655  59CB
15656  59CC
15657  59CD
15658  59CE
15659  59CF
15660  59D0
15661  59D1
15662  59D2
15663  59D3
15664  59D4
15665  59D5
15666  59D6
15667  59D7
15668  59D8
15669  59D9
15670  59DA
15671  59DB
15672  59DC
15673  59DD
15674  59DE
15675  59DF
15676  59E0
15677  59E1
15678  59E2
15679  59E3
15680  59E4
15681  59E5
15682  59E6
15683  59E7
15684  59E8
15685  59E9
15686  59EA
15687  59EB
15688  59EC
15689  59ED
15690  59EE
15691  59EF
15692  59F0
15693  59F1
15694  59F2
15695  59F3
15696  59F4
15697  59F5
15698  59F6
15699  59F7
15700  59F8
15701  59F9
15702  59FA
15703  59FB
15704  59FC
15705  59FD
15706  59FE
15707  59FF
15708  5A00
15709  5A01
15710  5A02
15711  5A03
15712  5A04
15713  5A05
15714  5A06
15715  5A07
15716  5A08
15717  5A09
15718  5A0A
15719  5A0B
15720  5A0C
15721  5A0D
15722  5A0E
15723  5A0F
15724  5A10
15725  5A11
15726  5A12
15727  5A13
15728  5A14
15729  5A15
15730  5A16
15731  5A17
15732  5A18
15733  5A19
15734  5A1A
15735  5A1B
15736  5A1C
15737  5A1D
15738  5A1E
15739  5A1F
15740  5A20
15741  5A21
15742  5A22
15743  5A23
15744  5A24
15745  5A25
15746  5A26
15747  5A27
15748  5A28
15749  5A29
15750  5A2A
15751  5A2B
15752  5A2C
15753  5A2D
15754  5A2E
15755  5A2F
15756  5A30
15757  5A31
15758  5A32
15759  5A33
15760  5A34
15761  5A35
15762  5A36
15763  5A37
15764  5A38
15765  5A39
15766  5A3A
15767  5A3B
15768  5A3C
15769  5A3D
15770  5A3E
15771  5A3F
15772  5A40
15773  5A41
15774  5A42
15775  5A43
15776  5A44
15777  5A45
15778  5A46
15779  5A47
15780  5A48
15781  5A49
15782  5A4A
15783  5A4B
15784  5A4C
15785  5A4D
15786  5A4E
15787  5A4F
15788  5A50
15789  5A51
15790  5A52
15791  5A53
15792  5A54
15793  5A55
15794  5A56
15795  5A57
15796  5A58
15797  5A59
15798  5A5A
15799  5A5B
15800  5A5C
15801  5A5D
15802  5A5E
15803  5A5F
15804  5A60
15805  5A61
15806  5A62
15807  5A63
15808  5A64
15809  5A65
15810  5A66
15811  5A67
15812  5A68
15813  5A69
15814  5A6A
15815  5A6B
15816  5A6C
15817  5A6D
15818  5A6E
15819  5A6F
15820  5A70
15821  5A71
15822  5A72
15823  5A73
15824  5A74
15825  5A75
15826  5A76
15827  5A77
15828  5A78
15829  5A79
15830  5A7A
15831  5A7B
15832  5A7C
15833  5A7D
15834  5A7E
15835  5A7F
15836  5A80
15837  5A81
15838  5A82
15839  5A83
15840  5A84
15841  5A85
15842  5A86
15843  5A87
15844  5A88
15845  5A89
15846  5A8A
15847  5A8B
15848  5A8C
15849  5A8D
15850  5A8E
15851  5A8F
15852  5A90
15853  5A91
15854  5A92
15855  5A93
15856  5A94
15857  5A95
15858  5A96
15859  5A97
15860  5A98
15861  5A99
15862  5A9A
15863  5A9B
15864  5A9C
15865  5A9D
15866  5A9E
15867  5A9F
15868  5AA0
15869  5AA1
15870  5AA2
15871  5AA3
15872  5AA4
15873  5AA5
15874  5AA6
15875  5AA7
15876  5AA8
15877  5AA9
15878  5AAA
15879  5AAB
15880  5AAC
15881  5AAD
15882  5AAE
15883  5AAF
15884  5AB0
15885  5AB1
15886  5AB2
15887  5AB3
15888  5AB4
15889  5AB5
15890  5AB6
15891  5AB7
15892  5AB8
15893  5AB9
15894  5ABA
15895  5ABB
15896  5ABC
15897  5ABD
15898  5ABE
15899  5ABF
15900  5AC0
15901  5AC1
15902  5AC2
15903  5AC3
15904  5AC4
15905  5AC5
15906  5AC6
15907  5AC7
15908  5AC8
15909  5AC9
15910  5ACA
15911  5ACB
15912  5ACC
15913  5ACD
15914  5ACE
15915  5ACF
15916  5AD0
15917  5AD1
15918  5AD2
15919  5AD3
15920  5AD4
15921  5AD5
15922  5AD6
15923  5AD7
15924  5AD8
15925  5AD9
15926  5ADA
15927  5ADB
15928  5ADC
15929  5ADD
15930  5ADE
15931  5ADF
15932  5AE0
15933  5AE1
15934  5AE2
15935  5AE3
15936  5AE4
15937  5AE5
15938  5AE6
15939  5AE7
15940  5AE8
15941  5AE9
15942  5AEA
15943  5AEB
15944  5AEC
15945  5AED
15946  5AEE
15947  5AEF
15948  5AF0
15949  5AF1
15950  5AF2
15951  5AF3
15952  5AF4
15953  5AF5
15954  5AF6
15955  5AF7
15956  5AF8
15957  5AF9
15958  5AFA
15959  5AFB
15960  5AFC
15961  5AFD
15962  5AFE
15963  5AFF
15964  5B00
15965  5B01
15966  5B02
15967  5B03
15968  5B04
15969  5B05
15970  5B06
15971  5B07
15972  5B08
15973  5B09
15974  5B0A
15975  5B0B
15976  5B0C
15977  5B0D
15978  5B0E
15979  5B0F
15980  5B10
15981  5B11
15982  5B12
15983  5B13
15984  5B14
15985  5B15
15986  5B16
15987  5B17
15988  5B18
15989  5B19
15990  5B1A
15991  5B1B
15992  5B1C
15993  5B1D
15994  5B1E
15995  5B1F
15996  5B20
15997  5B21
15998  5B22
15999  5B23
16000  5B24
16001  5B25
16002  5B26
16003  5B27
16004  5B28
16005  5B29
16006  5B2A
16007  5B2B
16008  5B2C
16009  5B2D
16010  5B2E
16011  5B2F
16012  5B30
16013  5B31
16014  5B32
16015  5B33
16016  5B34
16017  5B35
16018  5B36
16019  5B37
16020  5B38
16021  5B39
16022  5B3A
16023  5B3B
16024  5B3C
16025  5B3D
16026  5B3E
16027  5B3F
16028  5B40
16029  5B41
16030  5B42
16031  5B43
16032  5B44
16033  5B45
16034  5B46
16035  5B47
16036  5B48
16037  5B49
16038  5B4A
16039  5B4B
16040  5B4C
16041  5B4D
16042  5B4E
16043  5B4F
16044  5B50
16045  5B51
16046  5B52
16047  5B53
16048  5B54
16049  5B55
16050  5B56
16051  5B57
16052  5B58
16053  5B59
16054  5B5A
16055  5B5B
16056  5B5C
16057  5B5D
16058  5B5E
16059  5B5F
16060  5B60
16061  5B61
16062  5B62
16063  5B63
16064  5B64
16065  5B65
16066  5B66
16067  5B67
16068  5B68
16069  5B69
16070  5B6A
16071  5B6B
16072  5B6C
16073  5B6D
16074  5B6E
16075  5B6F
16076  5B70
16077  5B71
16078  5B72
16079  5B73
16080  5B74
16081  5B75
16082  5B76
16083  5B77
16084  5B78
16085  5B79
16086  5B7A
16087  5B7B
16088  5B7C
16089  5B7D
16090  5B7E
16091  5B7F
16092  5B80
16093  5B81
16094  5B82
16095  5B83
16096  5B84
16097  5B85
16098  5B86
16099  5B87
16100  5B88
16101  5B89
16102  5B8A
16103  5B8B
16104  5B8C
16105  5B8D
16106  5B8E
16107  5B8F
16108  5B90
16109  5B91
16110  5B92
16111  5B93
16112  5B94
16113  5B95
16114  5B96
16115  5B97
16116  5B98
16117  5B99
16118  5B9A
16119  5B9B
16120  5B9C
16121  5B9D
16122  5B9E
16123  5B9F
16124  5BA0
16125  5BA1
16126  5BA2
16127  5BA3
16128  5BA4
16129  5BA5
16130  5BA6
16131  5BA7
16132  5BA8
16133  5BA9
16134  5BAA
16135  5BAB
16136  5BAC
16137  5BAD
16138  5BAE
16139  5BAF
16140  5BB0
16141  5BB1
16142  5BB2
16143  5BB3
16144  5BB4
16145  5BB5
16146  5BB6
16147  5BB7
16148  5BB8
16149  5BB9
16150  5BBA
16151  5BBB
16152  5BBC
16153  5BBD
16154  5BBE
16155  5BBF
16156  5BC0
16157  5BC1
16158  5BC2
16159  5BC3
16160  5BC4
16161  5BC5
16162  5BC6
16163  5BC7
16164  5BC8
16165  5BC9
16166  5BCA
16167  5BCB
16168  5BCC
16169  5BCD
16170  5BCE
16171  5BCF
16172  5BD0
16173  5BD1
16174  5BD2
16175  5BD3
16176  5BD4
16177  5BD5
16178  5BD6
16179  5BD7
16180  5BD8
16181  5BD9
16182  5BDA
16183  5BDB
16184  5BDC
16185  5BDD
16186  5BDE
16187  5BDF
16188  5BE0
16189  5BE1
16190  5BE2
16191  5BE3
16192  5BE4
16193  5BE5
16194  5BE6
16195  5BE7
16196  5BE8
16197  5BE9
16198  5BEA
16199  5BEB
16200  5BEC
16201  5BED
16202  5BEE
16203  5BEF
16204  5BF0
16205  5BF1
16206  5BF2
16207  5BF3
16208  5BF4
16209  5BF5
16210  5BF6
16211  5BF7
16212  5BF8
16213  5BF9
16214  5BFA
16215  5BFB
16216  5BFC
16217  5BFD
16218  5BFE
16219  5BFF
16220  5C00
16221  5C01
16222  5C02
16223  5C03
16224  5C04
16225  5C05
16226  5C06
16227  5C07
16228  5C08
16229  5C09
16230  5C0A
16231  5C0B
16232  5C0C
16233  5C0D
16234  5C0E
16235  5C0F
16236  5C10
16237  5C11
16238  5C12
16239  5C13
16240  5C14
16241  5C15
16242  5C16
16243  5C17
16244  5C18
16245  5C19
16246  5C1A
16247  5C1B
16248  5C1C
16249  5C1D
16250  5C1E
16251  5C1F
16252  5C20
16253  5C21
16254  5C22
16255  5C23
16256  5C24
16257  5C25
16258  5C26
16259  5C27
16260  5C28
16261  5C29
16262  5C2A
16263  5C2B
16264  5C2C
16265  5C2D
16266  5C2E
16267  5C2F
16268  5C30
16269  5C31
16270  5C32
16271  5C33
16272  5C34
16273  5C35
16274  5C36
16275  5C37
16276  5C38
16277  5C39
16278  5C3A
16279  5C3B
16280  5C3C
16281  5C3D
16282  5C3E
16283  5C3F
16284  5C40
16285  5C41
16286  5C42
16287  5C43
16288  5C44
16289  5C45
16290  5C46
16291  5C47
16292  5C48
16293  5C49
16294  5C4A
16295  5C4B
16296  5C4C
16297  5C4D
16298  5C4E
16299  5C4F
16300  5C50
16301  5C51
16302  5C52
16303  5C53
16304  5C54
16305  5C55
16306  5C56
16307  5C57
16308  5C58
16309  5C59
16310  5C5A
16311  5C5B
16312  5C5C
16313  5C5D
16314  5C5E
16315  5C5F
16316  5C60
16317  5C61
16318  5C62
16319  5C63
16320  5C64
16321  5C65
16322  5C66
16323  5C67
16324  5C68
16325  5C69
16326  5C6A
16327  5C6B
16328  5C6C
16329  5C6D
16330  5C6E
16331  5C6F
16332  5C70
16333  5C71
16334  5C72
16335  5C73
16336  5C74
16337  5C75
16338  5C76
16339  5C77
16340  5C78
16341  5C79
16342  5C7A
16343  5C7B
16344  5C7C
16345  5C7D
16346  5C7E
16347  5C7F
16348  5C80
16349  5C81
16350  5C82
16351  5C83
16352  5C84
16353  5C85
16354  5C86
16355  5C87
16356  5C88
16357  5C89
16358  5C8A
16359  5C8B
16360  5C8C
16361  5C8D
16362  5C8E
16363  5C8F
16364  5C90
16365  5C91
16366  5C92
16367  5C93
16368  5C94
16369  5C95
16370  5C96
16371  5C97
16372  5C98
16373  5C99
16374  5C9A
16375  5C9B
16376  5C9C
16377  5C9D
16378  5C9E
16379  5C9F
16380  5CA0
16381  5CA1
16382  5CA2
16383  5CA3
16384  5CA4
16385  5CA5
16386  5CA6
16387  5CA7
16388  5CA8
16389  5CA9
16390  5CAA
16391  5CAB
16392  5CAC
16393  5CAD
16394  5CAE
16395  5CAF
16396  5CB0
16397  5CB1
16398  5CB2
16399  5CB3
16400  5CB4
16401  5CB5
16402  5CB6
16403  5CB7
16404  5CB8
16405  5CB9
16406  5CBA
16407  5CBB
16408  5CBC
16409  5CBD
16410  5CBE
16411  5CBF
16412  5CC0
16413  5CC1
16414  5CC2
16415  5CC3
16416  5CC4
16417  5CC5
16418  5CC6
16419  5CC7
16420  5CC8
16421  5CC9
16422  5CCA
16423  5CCB
16424  5CCC
16425  5CCD
16426  5CCE
16427  5CCF
16428  5CD0
16429  5CD1
16430  5CD2
16431  5CD3
16432  5CD4
16433  5CD5
16434  5CD6
16435  5CD7
16436  5CD8
16437  5CD9
16438  5CDA
16439  5CDB
16440  5CDC
16441  5CDD
16442  5CDE
16443  5CDF
16444  5CE0
16445  5CE1
16446  5CE2
16447  5CE3
16448  5CE4
16449  5CE5
16450  5CE6
16451  5CE7
16452  5CE8
16453  5CE9
16454  5CEA
16455  5CEB
16456  5CEC
16457  5CED
16458  5CEE
16459  5CEF
16460  5CF0
16461  5CF1
16462  5CF2
16463  5CF3
16464  5CF4
16465  5CF5
16466  5CF6
16467  5CF7
16468  5CF8
16469  5CF9
16470  5CFA
16471  5CFB
16472  5CFC
16473  5CFD
16474  5CFE
16475  5CFF
16476  5D00
16477  5D01
16478  5D02
16479  5D03
16480  5D04
16481  5D05
16482  5D06
16483  5D07
16484  5D08
16485  5D09
16486  5D0A
16487  5D0B
16488  5D0C
16489  5D0D
16490  5D0E
16491  5D0F
16492  5D10
16493  5D11
16494  5D12
16495  5D13
16496  5D14
16497  5D15
16498  5D16
16499  5D17
16500  5D18
16501  5D19
16502  5D1A
16503  5D1B
16504  5D1C
16505  5D1D
16506  5D1E
16507  5D1F
16508  5D20
16509  5D21
16510  5D22
16511  5D23
16512  5D24
16513  5D25
16514  5D26
16515  5D27
16516  5D28
16517  5D29
16518  5D2A
16519  5D2B
16520  5D2C
16521  5D2D
16522  5D2E
16523  5D2F
16524  5D30
16525  5D31
16526  5D32
16527  5D33
16528  5D34
16529  5D35
16530  5D36
16531  5D37
16532  5D38
16533  5D39
16534  5D3A
16535  5D3B
16536  5D3C
16537  5D3D
16538  5D3E
16539  5D3F
16540  5D40
16541  5D41
16542  5D42
16543  5D43
16544  5D44
16545  5D45
16546  5D46
16547  5D47
16548  5D48
16549  5D49
16550  5D4A
16551  5D4B
16552  5D4C
16553  5D4D
16554  5D4E
16555  5D4F
16556  5D50
16557  5D51
16558  5D52
16559  5D53
16560  5D54
16561  5D55
16562  5D56
16563  5D57
16564  5D58
16565  5D59
16566  5D5A
16567  5D5B
16568  5D5C
16569  5D5D
16570  5D5E
16571  5D5F
16572  5D60
16573  5D61
16574  5D62
16575  5D63
16576  5D64
16577  5D65
16578  5D66
16579  5D67
16580  5D68
16581  5D69
16582  5D6A
16583  5D6B
16584  5D6C
16585  5D6D
16586  5D6E
16587  5D6F
16588  5D70
16589  5D71
16590  5D72
16591  5D73
16592  5D74
16593  5D75
16594  5D76
16595  5D77
16596  5D78
16597  5D79
16598  5D7A
16599  5D7B
16600  5D7C
16601  5D7D
16602  5D7E
16603  5D7F
16604  5D80
16605  5D81
16606  5D82
16607  5D83
16608  5D84
16609  5D85
16610  5D86
16611  5D87
16612  5D88
16613  5D89
16614  5D8A
16615  5D8B
16616  5D8C
16617  5D8D
16618  5D8E
16619  5D8F
16620  5D90
16621  5D91
16622  5D92
16623  5D93
16624  5D94
16625  5D95
16626  5D96
16627  5D97
16628  5D98
16629  5D99
16630  5D9A
16631  5D9B
16632  5D9C
16633  5D9D
16634  5D9E
16635  5D9F
16636  5DA0
16637  5DA1
16638  5DA2
16639  5DA3
16640  5DA4
16641  5DA5
16642  5DA6
16643  5DA7
16644  5DA8
16645  5DA9
16646  5DAA
16647  5DAB
16648  5DAC
16649  5DAD
16650  5DAE
16651  5DAF
16652  5DB0
16653  5DB1
16654  5DB2
16655  5DB3
16656  5DB4
16657  5DB5
16658  5DB6
16659  5DB7
16660  5DB8
16661  5DB9
16662  5DBA
16663  5DBB
16664  5DBC
16665  5DBD
16666  5DBE
16667  5DBF
16668  5DC0
16669  5DC1
16670  5DC2
16671  5DC3
16672  5DC4
16673  5DC5
16674  5DC6
16675  5DC7
16676  5DC8
16677  5DC9
16678  5DCA
16679  5DCB
16680  5DCC
16681  5DCD
16682  5DCE
16683  5DCF
16684  5DD0
16685  5DD1
16686  5DD2
16687  5DD3
16688  5DD4
16689  5DD5
16690  5DD6
16691  5DD7
16692  5DD8
16693  5DD9
16694  5DDA
16695  5DDB
16696  5DDC
16697  5DDD
16698  5DDE
16699  5DDF
16700  5DE0
16701  5DE1
16702  5DE2
16703  5DE3
16704  5DE4
16705  5DE5
16706  5DE6
16707  5DE7
16708  5DE8
16709  5DE9
16710  5DEA
16711  5DEB
16712  5DEC
16713  5DED
16714  5DEE
16715  5DEF
16716  5DF0
16717  5DF1
16718  5DF2
16719  5DF3
16720  5DF4
16721  5DF5
16722  5DF6
16723  5DF7
16724  5DF8
16725  5DF9
16726  5DFA
16727  5DFB
16728  5DFC
16729  5DFD
16730  5DFE
16731  5DFF
16732  5E00
16733  5E01
16734  5E02
16735  5E03
16736  5E04
16737  5E05
16738  5E06
16739  5E07
16740  5E08
16741  5E09
16742  5E0A
16743  5E0B
16744  5E0C
16745  5E0D
16746  5E0E
16747  5E0F
16748  5E10
16749  5E11
16750  5E12
16751  5E13
16752  5E14
16753  5E15
16754  5E16
16755  5E17
16756  5E18
16757  5E19
16758  5E1A
16759  5E1B
16760  5E1C
16761  5E1D
16762  5E1E
16763  5E1F
16764  5E20
16765  5E21
16766  5E22
16767  5E23
16768  5E24
16769  5E25
16770  5E26
16771  5E27
16772  5E28
16773  5E29
16774  5E2A
16775  5E2B
16776  5E2C
16777  5E2D
16778  5E2E
16779  5E2F
16780  5E30
16781  5E31
16782  5E32
16783  5E33
16784  5E34
16785  5E35
16786  5E36
16787  5E37
16788  5E38
16789  5E39
16790  5E3A
16791  5E3B
16792  5E3C
16793  5E3D
16794  5E3E
16795  5E3F
16796  5E40
16797  5E41
16798  5E42
16799  5E43
16800  5E44
16801  5E45
16802  5E46
16803  5E47
16804  5E48
16805  5E49
16806  5E4A
16807  5E4B
16808  5E4C
16809  5E4D
16810  5E4E
16811  5E4F
16812  5E50
16813  5E51
16814  5E52
16815  5E53
16816  5E54
16817  5E55
16818  5E56
16819  5E57
16820  5E58
16821  5E59
16822  5E5A
16823  5E5B
16824  5E5C
16825  5E5D
16826  5E5E
16827  5E5F
16828  5E60
16829  5E61
16830  5E62
16831  5E63
16832  5E64
16833  5E65
16834  5E66
16835  5E67
16836  5E68
16837  5E69
16838  5E6A
16839  5E6B
16840  5E6C
16841  5E6D
16842  5E6E
16843  5E6F
16844  5E70
16845  5E71
16846  5E72
16847  5E73
16848  5E74
16849  5E75
16850  5E76
16851  5E77
16852  5E78
16853  5E79
16854  5E7A
16855  5E7B
16856  5E7C
16857  5E7D
16858  5E7E
16859  5E7F
16860  5E80
16861  5E81
16862  5E82
16863  5E83
16864  5E84
16865  5E85
16866  5E86
16867  5E87
16868  5E88
16869  5E89
16870  5E8A
16871  5E8B
16872  5E8C
16873  5E8D
16874  5E8E
16875  5E8F
16876  5E90
16877  5E91
16878  5E92
16879  5E93
16880  5E94
16881  5E95
16882  5E96
16883  5E97
16884  5E98
16885  5E99
16886  5E9A
16887  5E9B
16888  5E9C
16889  5E9D
16890  5E9E
16891  5E9F
16892  5EA0
16893  5EA1
16894  5EA2
16895  5EA3
16896  5EA4
16897  5EA5
16898  5EA6
16899  5EA7
16900  5EA8
16901  5EA9
16902  5EAA
16903  5EAB
16904  5EAC
16905  5EAD
16906  5EAE
16907  5EAF
16908  5EB0
16909  5EB1
16910  5EB2
16911  5EB3
16912  5EB4
16913  5EB5
16914  5EB6
16915  5EB7
16916  5EB8
16917  5EB9
16918  5EBA
16919  5EBB
16920  5EBC
16921  5EBD
16922  5EBE
16923  5EBF
16924  5EC0
16925  5EC1
16926  5EC2
16927  5EC3
16928  5EC4
16929  5EC5
16930  5EC6
16931  5EC7
16932  5EC8
16933  5EC9
16934  5ECA
16935  5ECB
16936  5ECC
16937  5ECD
16938  5ECE
16939  5ECF
16940  5ED0
16941  5ED1
16942  5ED2
16943  5ED3
16944  5ED4
16945  5ED5
16946  5ED6
16947  5ED7
16948  5ED8
16949  5ED9
16950  5EDA
16951  5EDB
16952  5EDC
16953  5EDD
16954  5EDE
16955  5EDF
16956  5EE0
16957  5EE1
16958  5EE2
16959  5EE3
16960  5EE4
16961  5EE5
16962  5EE6
16963  5EE7
16964  5EE8
16965  5EE9
16966  5EEA
16967  5EEB
16968  5EEC
16969  5EED
16970  5EEE
16971  5EEF
16972  5EF0
16973  5EF1
16974  5EF2
16975  5EF3
16976  5EF4
16977  5EF5
16978  5EF6
16979  5EF7
16980  5EF8
16981  5EF9
16982  5EFA
16983  5EFB
16984  5EFC
16985  5EFD
16986  5EFE
16987  5EFF
16988  5F00
16989  5F01
16990  5F02
16991  5F03
16992  5F04
16993  5F05
16994  5F06
16995  5F07
16996  5F08
16997  5F09
16998  5F0A
16999  5F0B
17000  5F0C
17001  5F0D
17002  5F0E
17003  5F0F
17004  5F10
17005  5F11
17006  5F12
17007  5F13
17008  5F14
17009  5F15
17010  5F16
17011  5F17
17012  5F18
17013  5F19
17014  5F1A
17015  5F1B
17016  5F1C
17017  5F1D
17018  5F1E
17019  5F1F
17020  5F20
17021  5F21
17022  5F22
17023  5F23
17024  5F24
17025  5F25
17026  5F26
17027  5F27
17028  5F28
17029  5F29
17030  5F2A
17031  5F2B
17032  5F2C
17033  5F2D
17034  5F2E
17035  5F2F
17036  5F30
17037  5F31
17038  5F32
17039  5F33
17040  5F34
17041  5F35
17042  5F36
17043  5F37
17044  5F38
17045  5F39
17046  5F3A
17047  5F3B
17048  5F3C
17049  5F3D
17050  5F3E
17051  5F3F
17052  5F40
17053  5F41
17054  5F42
17055  5F43
17056  5F44
17057  5F45
17058  5F46
17059  5F47
17060  5F48
17061  5F49
17062  5F4A
17063  5F4B
17064  5F4C
17065  5F4D
17066  5F4E
17067  5F4F
17068  5F50
17069  5F51
17070  5F52
17071  5F53
17072  5F54
17073  5F55
17074  5F56
17075  5F57
17076  5F58
17077  5F59
17078  5F5A
17079  5F5B
17080  5F5C
17081  5F5D
17082  5F5E
17083  5F5F
17084  5F60
17085  5F61
17086  5F62
17087  5F63
17088  5F64
17089  5F65
17090  5F66
17091  5F67
17092  5F68
17093  5F69
17094  5F6A
17095  5F6B
17096  5F6C
17097  5F6D
17098  5F6E
17099  5F6F
17100  5F70
17101  5F71
17102  5F72
17103  5F73
17104  5F74
17105  5F75
17106  5F76
17107  5F77
17108  5F78
17109  5F79
17110  5F7A
17111  5F7B
17112  5F7C
17113  5F7D
17114  5F7E
17115  5F7F
17116  5F80
17117  5F81
17118  5F82
17119  5F83
17120  5F84
17121  5F85
17122  5F86
17123  5F87
17124  5F88
17125  5F89
17126  5F8A
17127  5F8B
17128  5F8C
17129  5F8D
17130  5F8E
17131  5F8F
17132  5F90
17133  5F91
17134  5F92
17135  5F93
17136  5F94
17137  5F95
17138  5F96
17139  5F97
17140  5F98
17141  5F99
17142  5F9A
17143  5F9B
17144  5F9C
17145  5F9D
17146  5F9E
17147  5F9F
17148  5FA0
17149  5FA1
17150  5FA2
17151  5FA3
17152  5FA4
17153  5FA5
17154  5FA6
17155  5FA7
17156  5FA8
17157  5FA9
17158  5FAA
17159  5FAB
17160  5FAC
17161  5FAD
17162  5FAE
17163  5FAF
17164  5FB0
17165  5FB1
17166  5FB2
17167  5FB3
17168  5FB4
17169  5FB5
17170  5FB6
17171  5FB7
17172  5FB8
17173  5FB9
17174  5FBA
17175  5FBB
17176  5FBC
17177  5FBD
17178  5FBE
17179  5FBF
17180  5FC0
17181  5FC1
17182  5FC2
17183  5FC3
17184  5FC4
17185  5FC5
17186  5FC6
17187  5FC7
17188  5FC8
17189  5FC9
17190  5FCA
17191  5FCB
17192  5FCC
17193  5FCD
17194  5FCE
17195  5FCF
17196  5FD0
17197  5FD1
17198  5FD2
17199  5FD3
17200  5FD4
17201  5FD5
17202  5FD6
17203  5FD7
17204  5FD8
17205  5FD9
17206  5FDA
17207  5FDB
17208  5FDC
17209  5FDD
17210  5FDE
17211  5FDF
17212  5FE0
17213  5FE1
17214  5FE2
17215  5FE3
17216  5FE4
17217  5FE5
17218  5FE6
17219  5FE7
17220  5FE8
17221  5FE9
17222  5FEA
17223  5FEB
17224  5FEC
17225  5FED
17226  5FEE
17227  5FEF
17228  5FF0
17229  5FF1
17230  5FF2
17231  5FF3
17232  5FF4
17233  5FF5
17234  5FF6
17235  5FF7
17236  5FF8
17237  5FF9
17238  5FFA
17239  5FFB
17240  5FFC
17241  5FFD
17242  5FFE
17243  5FFF
17244  6000
17245  6001
17246  6002
17247  6003
17248  6004
17249  6005
17250  6006
17251  6007
17252  6008
17253  6009
17254  600A
17255  600B
17256  600C
17257  600D
17258  600E
17259  600F
17260  6010
17261  6011
17262  6012
17263  6013
17264  6014
17265  6015
17266  6016
17267  6017
17268  6018
17269  6019
17270  601A
17271  601B
17272  601C
17273  601D
17274  601E
17275  601F
17276  6020
17277  6021
17278  6022
17279  6023
17280  6024
17281  6025
17282  6026
17283  6027
17284  6028
17285  6029
17286  602A
17287  602B
17288  602C
17289  602D
17290  602E
17291  602F
17292  6030
17293  6031
17294  6032
17295  6033
17296  6034
17297  6035
17298  6036
17299  6037
17300  6038
17301  6039
17302  603A
17303  603B
17304  603C
17305  603D
17306  603E
17307  603F
17308  6040
17309  6041
17310  6042
17311  6043
17312  6044
17313  6045
17314  6046
17315  6047
17316  6048
17317  6049
17318  604A
17319  604B
17320  604C
17321  604D
17322  604E
17323  604F
17324  6050
17325  6051
17326  6052
17327  6053
17328  6054
17329  6055
17330  6056
17331  6057
17332  6058
17333  6059
17334  605A
17335  605B
17336  605C
17337  605D
17338  605E
17339  605F
17340  6060
17341  6061
17342  6062
17343  6063
17344  6064
17345  6065
17346  6066
17347  6067
17348  6068
17349  6069
17350  606A
17351  606B
17352  606C
17353  606D
17354  606E
17355  606F
17356  6070
17357  6071
17358  6072
17359  6073
17360  6074
17361  6075
17362  6076
17363  6077
17364  6078
17365  6079
17366  607A
17367  607B
17368  607C
17369  607D
17370  607E
17371  607F
17372  6080
17373  6081
17374  6082
17375  6083
17376  6084
17377  6085
17378  6086
17379  6087
17380  6088
17381  6089
17382  608A
17383  608B
17384  608C
17385  608D
17386  608E
17387  608F
17388  6090
17389  6091
17390  6092
17391  6093
17392  6094
17393  6095
17394  6096
17395  6097
17396  6098
17397  6099
17398  609A
17399  609B
17400  609C
17401  609D
17402  609E
17403  609F
17404  60A0
17405  60A1
17406  60A2
17407  60A3
17408  60A4
17409  60A5
17410  60A6
17411  60A7
17412  60A8
17413  60A9
17414  60AA
17415  60AB
17416  60AC
17417  60AD
17418  60AE
17419  60AF
17420  60B0
17421  60B1
17422  60B2
17423  60B3
17424  60B4
17425  60B5
17426  60B6
17427  60B7
17428  60B8
17429  60B9
17430  60BA
17431  60BB
17432  60BC
17433  60BD
17434  60BE
17435  60BF
17436  60C0
17437  60C1
17438  60C2
17439  60C3
17440  60C4
17441  60C5
17442  60C6
17443  60C7
17444  60C8
17445  60C9
17446  60CA
17447  60CB
17448  60CC
17449  60CD
17450  60CE
17451  60CF
17452  60D0
17453  60D1
17454  60D2
17455  60D3
17456  60D4
17457  60D5
17458  60D6
17459  60D7
17460  60D8
17461  60D9
17462  60DA
17463  60DB
17464  60DC
17465  60DD
17466  60DE
17467  60DF
17468  60E0
17469  60E1
17470  60E2
17471  60E3
17472  60E4
17473  60E5
17474  60E6
17475  60E7
17476  60E8
17477  60E9
17478  60EA
17479  60EB
17480  60EC
17481  60ED
17482  60EE
17483  60EF
17484  60F0
17485  60F1
17486  60F2
17487  60F3
17488  60F4
17489  60F5
17490  60F6
17491  60F7
17492  60F8
17493  60F9
17494  60FA
17495  60FB
17496  60FC
17497  60FD
17498  60FE
17499  60FF
17500  6100
17501  6101
17502  6102
17503  6103
17504  6104
17505  6105
17506  6106
17507  6107
17508  6108
17509  6109
17510  610A
17511  610B
17512  610C
17513  610D
17514  610E
17515  610F
17516  6110
17517  6111
17518  6112
17519  6113
17520  6114
17521  6115
17522  6116
17523  6117
17524  6118
17525  6119
17526  611A
17527  611B
17528  611C
17529  611D
17530  611E
17531  611F
17532  6120
17533  6121
17534  6122
17535  6123
17536  6124
17537  6125
17538  6126
17539  6127
17540  6128
17541  6129
17542  612A
17543  612B
17544  612C
17545  612D
17546  612E
17547  612F
17548  6130
17549  6131
17550  6132
17551  6133
17552  6134
17553  6135
17554  6136
17555  6137
17556  6138
17557  6139
17558  613A
17559  613B
17560  613C
17561  613D
17562  613E
17563  613F
17564  6140
17565  6141
17566  6142
17567  6143
17568  6144
17569  6145
17570  6146
17571  6147
17572  6148
17573  6149
17574  614A
17575  614B
17576  614C
17577  614D
17578  614E
17579  614F
17580  6150
17581  6151
17582  6152
17583  6153
17584  6154
17585  6155
17586  6156
17587  6157
17588  6158
17589  6159
17590  615A
17591  615B
17592  615C
17593  615D
17594  615E
17595  615F
17596  6160
17597  6161
17598  6162
17599  6163
17600  6164
17601  6165
17602  6166
17603  6167
17604  6168
17605  6169
17606  616A
17607  616B
17608  616C
17609  616D
17610  616E
17611  616F
17612  6170
17613  6171
17614  6172
17615  6173
17616  6174
17617  6175
17618  6176
17619  6177
17620  6178
17621  6179
17622  617A
17623  617B
17624  617C
17625  617D
17626  617E
17627  617F
17628  6180
17629  6181
17630  6182
17631  6183
17632  6184
17633  6185
17634  6186
17635  6187
17636  6188
17637  6189
17638  618A
17639  618B
17640  618C
17641  618D
17642  618E
17643  618F
17644  6190
17645  6191
17646  6192
17647  6193
17648  6194
17649  6195
17650  6196
17651  6197
17652  6198
17653  6199
17654  619A
17655  619B
17656  619C
17657  619D
17658  619E
17659  619F
17660  61A0
17661  61A1
17662  61A2
17663  61A3
17664  61A4
17665  61A5
17666  61A6
17667  61A7
17668  61A8
17669  61A9
17670  61AA
17671  61AB
17672  61AC
17673  61AD
17674  61AE
17675  61AF
17676  61B0
17677  61B1
17678  61B2
17679  61B3
17680  61B4
17681  61B5
17682  61B6
17683  61B7
17684  61B8
17685  61B9
17686  61BA
17687  61BB
17688  61BC
17689  61BD
17690  61BE
17691  61BF
17692  61C0
17693  61C1
17694  61C2
17695  61C3
17696  61C4
17697  61C5
17698  61C6
17699  61C7
17700  61C8
17701  61C9
17702  61CA
17703  61CB
17704  61CC
17705  61CD
17706  61CE
17707  61CF
17708  61D0
17709  61D1
17710  61D2
17711  61D3
17712  61D4
17713  61D5
17714  61D6
17715  61D7
17716  61D8
17717  61D9
17718  61DA
17719  61DB
17720  61DC
17721  61DD
17722  61DE
17723  61DF
17724  61E0
17725  61E1
17726  61E2
17727  61E3
17728  61E4
17729  61E5
17730  61E6
17731  61E7
17732  61E8
17733  61E9
17734  61EA
17735  61EB
17736  61EC
17737  61ED
17738  61EE
17739  61EF
17740  61F0
17741  61F1
17742  61F2
17743  61F3
17744  61F4
17745  61F5
17746  61F6
17747  61F7
17748  61F8
17749  61F9
17750  61FA
17751  61FB
17752  61FC
17753  61FD
17754  61FE
17755  61FF
17756  6200
17757  6201
17758  6202
17759  6203
17760  6204
17761  6205
17762  6206
17763  6207
17764  6208
17765  6209
17766  620A
17767  620B
17768  620C
17769  620D
17770  620E
17771  620F
17772  6210
17773  6211
17774  6212
17775  6213
17776  6214
17777  6215
17778  6216
17779  6217
17780  6218
17781  6219
17782  621A
17783  621B
17784  621C
17785  621D
17786  621E
17787  621F
17788  6220
17789  6221
17790  6222
17791  6223
17792  6224
17793  6225
17794  6226
17795  6227
17796  6228
17797  6229
17798  622A
17799  622B
17800  622C
17801  622D
17802  622E
17803  622F
17804  6230
17805  6231
17806  6232
17807  6233
17808  6234
17809  6235
17810  6236
17811  6237
17812  6238
17813  6239
17814  623A
17815  623B
17816  623C
17817  623D
17818  623E
17819  623F
17820  6240
17821  6241
17822  6242
17823  6243
17824  6244
17825  6245
17826  6246
17827  6247
17828  6248
17829  6249
17830  624A
17831  624B
17832  624C
17833  624D
17834  624E
17835  624F
17836  6250
17837  6251
17838  6252
17839  6253
17840  6254
17841  6255
17842  6256
17843  6257
17844  6258
17845  6259
17846  625A
17847  625B
17848  625C
17849  625D
17850  625E
17851  625F
17852  6260
17853  6261
17854  6262
17855  6263
17856  6264
17857  6265
17858  6266
17859  6267
17860  6268
17861  6269
17862  626A
17863  626B
17864  626C
17865  626D
17866  626E
17867  626F
17868  6270
17869  6271
17870  6272
17871  6273
17872  6274
17873  6275
17874  6276
17875  6277
17876  6278
17877  6279
17878  627A
17879  627B
17880  627C
17881  627D
17882  627E
17883  627F
17884  6280
17885  6281
17886  6282
17887  6283
17888  6284
17889  6285
17890  6286
17891  6287
17892  6288
17893  6289
17894  628A
17895  628B
17896  628C
17897  628D
17898  628E
17899  628F
17900  6290
17901  6291
17902  6292
17903  6293
17904  6294
17905  6295
17906  6296
17907  6297
17908  6298
17909  6299
17910  629A
17911  629B
17912  629C
17913  629D
17914  629E
17915  629F
17916  62A0
17917  62A1
17918  62A2
17919  62A3
17920  62A4
17921  62A5
17922  62A6
17923  62A7
17924  62A8
17925  62A9
17926  62AA
17927  62AB
17928  62AC
17929  62AD
17930  62AE
17931  62AF
17932  62B0
17933  62B1
17934  62B2
17935  62B3
17936  62B4
17937  62B5
17938  62B6
17939  62B7
17940  62B8
17941  62B9
17942  62BA
17943  62BB
17944  62BC
17945  62BD
17946  62BE
17947  62BF
17948  62C0
17949  62C1
17950  62C2
17951  62C3
17952  62C4
17953  62C5
17954  62C6
17955  62C7
17956  62C8
17957  62C9
17958  62CA
17959  62CB
17960  62CC
17961  62CD
17962  62CE
17963  62CF
17964  62D0
17965  62D1
17966  62D2
17967  62D3
17968  62D4
17969  62D5
17970  62D6
17971  62D7
17972  62D8
17973  62D9
17974  62DA
17975  62DB
17976  62DC
17977  62DD
17978  62DE
17979  62DF
17980  62E0
17981  62E1
17982  62E2
17983  62E3
17984  62E4
17985  62E5
17986  62E6
17987  62E7
17988  62E8
17989  62E9
17990  62EA
17991  62EB
17992  62EC
17993  62ED
17994  62EE
17995  62EF
17996  62F0
17997  62F1
17998  62F2
17999  62F3
18000  62F4
18001  62F5
18002  62F6
18003  62F7
18004  62F8
18005  62F9
18006  62FA
18007  62FB
18008  62FC
18009  62FD
18010  62FE
18011  62FF
18012  6300
18013  6301
18014  6302
18015  6303
18016  6304
18017  6305
18018  6306
18019  6307
18020  6308
18021  6309
18022  630A
18023  630B
18024  630C
18025  630D
18026  630E
18027  630F
18028  6310
18029  6311
18030  6312
18031  6313
18032  6314
18033  6315
18034  6316
18035  6317
18036  6318
18037  6319
18038  631A
18039  631B
18040  631C
18041  631D
18042  631E
18043  631F
18044  6320
18045  6321
18046  6322
18047  6323
18048  6324
18049  6325
18050  6326
18051  6327
18052  6328
18053  6329
18054  632A
18055  632B
18056  632C
18057  632D
18058  632E
18059  632F
18060  6330
18061  6331
18062  6332
18063  6333
18064  6334
18065  6335
18066  6336
18067  6337
18068  6338
18069  6339
18070  633A
18071  633B
18072  633C
18073  633D
18074  633E
18075  633F
18076  6340
18077  6341
18078  6342
18079  6343
18080  6344
18081  6345
18082  6346
18083  6347
18084  6348
18085  6349
18086  634A
18087  634B
18088  634C
18089  634D
18090  634E
18091  634F
18092  6350
18093  6351
18094  6352
18095  6353
18096  6354
18097  6355
18098  6356
18099  6357
18100  6358
18101  6359
18102  635A
18103  635B
18104  635C
18105  635D
18106  635E
18107  635F
18108  6360
18109  6361
18110  6362
18111  6363
18112  6364
18113  6365
18114  6366
18115  6367
18116  6368
18117  6369
18118  636A
18119  636B
18120  636C
18121  636D
18122  636E
18123  636F
18124  6370
18125  6371
18126  6372
18127  6373
18128  6374
18129  6375
18130  6376
18131  6377
18132  6378
18133  6379
18134  637A
18135  637B
18136  637C
18137  637D
18138  637E
18139  637F
18140  6380
18141  6381
18142  6382
18143  6383
18144  6384
18145  6385
18146  6386
18147  6387
18148  6388
18149  6389
18150  638A
18151  638B
18152  638C
18153  638D
18154  638E
18155  638F
18156  6390
18157  6391
18158  6392
18159  6393
18160  6394
18161  6395
18162  6396
18163  6397
18164  6398
18165  6399
18166  639A
18167  639B
18168  639C
18169  639D
18170  639E
18171  639F
18172  63A0
18173  63A1
18174  63A2
18175  63A3
18176  63A4
18177  63A5
18178  63A6
18179  63A7
18180  63A8
18181  63A9
18182  63AA
18183  63AB
18184  63AC
18185  63AD
18186  63AE
18187  63AF
18188  63B0
18189  63B1
18190  63B2
18191  63B3
18192  63B4
18193  63B5
18194  63B6
18195  63B7
18196  63B8
18197  63B9
18198  63BA
18199  63BB
18200  63BC
18201  63BD
18202  63BE
18203  63BF
18204  63C0
18205  63C1
18206  63C2
18207  63C3
18208  63C4
18209  63C5
18210  63C6
18211  63C7
18212  63C8
18213  63C9
18214  63CA
18215  63CB
18216  63CC
18217  63CD
18218  63CE
18219  63CF
18220  63D0
18221  63D1
18222  63D2
18223  63D3
18224  63D4
18225  63D5
18226  63D6
18227  63D7
18228  63D8
18229  63D9
18230  63DA
18231  63DB
18232  63DC
18233  63DD
18234  63DE
18235  63DF
18236  63E0
18237  63E1
18238  63E2
18239  63E3
18240  63E4
18241  63E5
18242  63E6
18243  63E7
18244  63E8
18245  63E9
18246  63EA
18247  63EB
18248  63EC
18249  63ED
18250  63EE
18251  63EF
18252  63F0
18253  63F1
18254  63F2
18255  63F3
18256  63F4
18257  63F5
18258  63F6
18259  63F7
18260  63F8
18261  63F9
18262  63FA
18263  63FB
18264  63FC
18265  63FD
18266  63FE
18267  63FF
18268  6400
18269  6401
18270  6402
18271  6403
18272  6404
18273  6405
18274  6406
18275  6407
18276  6408
18277  6409
18278  640A
18279  640B
18280  640C
18281  640D
18282  640E
18283  640F
18284  6410
18285  6411
18286  6412
18287  6413
18288  6414
18289  6415
18290  6416
18291  6417
18292  6418
18293  6419
18294  641A
18295  641B
18296  641C
18297  641D
18298  641E
18299  641F
18300  6420
18301  6421
18302  6422
18303  6423
18304  6424
18305  6425
18306  6426
18307  6427
18308  6428
18309  6429
18310  642A
18311  642B
18312  642C
18313  642D
18314  642E
18315  642F
18316  6430
18317  6431
18318  6432
18319  6433
18320  6434
18321  6435
18322  6436
18323  6437
18324  6438
18325  6439
18326  643A
18327  643B
18328  643C
18329  643D
18330  643E
18331  643F
18332  6440
18333  6441
18334  6442
18335  6443
18336  6444
18337  6445
18338  6446
18339  6447
18340  6448
18341  6449
18342  644A
18343  644B
18344  644C
18345  644D
18346  644E
18347  644F
18348  6450
18349  6451
18350  6452
18351  6453
18352  6454
18353  6455
18354  6456
18355  6457
18356  6458
18357  6459
18358  645A
18359  645B
18360  645C
18361  645D
18362  645E
18363  645F
18364  6460
18365  6461
18366  6462
18367  6463
18368  6464
18369  6465
18370  6466
18371  6467
18372  6468
18373  6469
18374  646A
18375  646B
18376  646C
18377  646D
18378  646E
18379  646F
18380  6470
18381  6471
18382  6472
18383  6473
18384  6474
18385  6475
18386  6476
18387  6477
18388  6478
18389  6479
18390  647A
18391  647B
18392  647C
18393  647D
18394  647E
18395  647F
18396  6480
18397  6481
18398  6482
18399  6483
18400  6484
18401  6485
18402  6486
18403  6487
18404  6488
18405  6489
18406  648A
18407  648B
18408  648C
18409  648D
18410  648E
18411  648F
18412  6490
18413  6491
18414  6492
18415  6493
18416  6494
18417  6495
18418  6496
18419  6497
18420  6498
18421  6499
18422  649A
18423  649B
18424  649C
18425  649D
18426  649E
18427  649F
18428  64A0
18429  64A1
18430  64A2
18431  64A3
18432  64A4
18433  64A5
18434  64A6
18435  64A7
18436  64A8
18437  64A9
18438  64AA
18439  64AB
18440  64AC
18441  64AD
18442  64AE
18443  64AF
18444  64B0
18445  64B1
18446  64B2
18447  64B3
18448  64B4
18449  64B5
18450  64B6
18451  64B7
18452  64B8
18453  64B9
18454  64BA
18455  64BB
18456  64BC
18457  64BD
18458  64BE
18459  64BF
18460  64C0
18461  64C1
18462  64C2
18463  64C3
18464  64C4
18465  64C5
18466  64C6
18467  64C7
18468  64C8
18469  64C9
18470  64CA
18471  64CB
18472  64CC
18473  64CD
18474  64CE
18475  64CF
18476  64D0
18477  64D1
18478  64D2
18479  64D3
18480  64D4
18481  64D5
18482  64D6
18483  64D7
18484  64D8
18485  64D9
18486  64DA
18487  64DB
18488  64DC
18489  64DD
18490  64DE
18491  64DF
18492  64E0
18493  64E1
18494  64E2
18495  64E3
18496  64E4
18497  64E5
18498  64E6
18499  64E7
18500  64E8
18501  64E9
18502  64EA
18503  64EB
18504  64EC
18505  64ED
18506  64EE
18507  64EF
18508  64F0
18509  64F1
18510  64F2
18511  64F3
18512  64F4
18513  64F5
18514  64F6
18515  64F7
18516  64F8
18517  64F9
18518  64FA
18519  64FB
18520  64FC
18521  64FD
18522  64FE
18523  64FF
18524  6500
18525  6501
18526  6502
18527  6503
18528  6504
18529  6505
18530  6506
18531  6507
18532  6508
18533  6509
18534  650A
18535  650B
18536  650C
18537  650D
18538  650E
18539  650F
18540  6510
18541  6511
18542  6512
18543  6513
18544  6514
18545  6515
18546  6516
18547  6517
18548  6518
18549  6519
18550  651A
18551  651B
18552  651C
18553  651D
18554  651E
18555  651F
18556  6520
18557  6521
18558  6522
18559  6523
18560  6524
18561  6525
18562  6526
18563  6527
18564  6528
18565  6529
18566  652A
18567  652B
18568  652C
18569  652D
18570  652E
18571  652F
18572  6530
18573  6531
18574  6532
18575  6533
18576  6534
18577  6535
18578  6536
18579  6537
18580  6538
18581  6539
18582  653A
18583  653B
18584  653C
18585  653D
18586  653E
18587  653F
18588  6540
18589  6541
18590  6542
18591  6543
18592  6544
18593  6545
18594  6546
18595  6547
18596  6548
18597  6549
18598  654A
18599  654B
18600  654C
18601  654D
18602  654E
18603  654F
18604  6550
18605  6551
18606  6552
18607  6553
18608  6554
18609  6555
18610  6556
18611  6557
18612  6558
18613  6559
18614  655A
18615  655B
18616  655C
18617  655D
18618  655E
18619  655F
18620  6560
18621  6561
18622  6562
18623  6563
18624  6564
18625  6565
18626  6566
18627  6567
18628  6568
18629  6569
18630  656A
18631  656B
18632  656C
18633  656D
18634  656E
18635  656F
18636  6570
18637  6571
18638  6572
18639  6573
18640  6574
18641  6575
18642  6576
18643  6577
18644  6578
18645  6579
18646  657A
18647  657B
18648  657C
18649  657D
18650  657E
18651  657F
18652  6580
18653  6581
18654  6582
18655  6583
18656  6584
18657  6585
18658  6586
18659  6587
18660  6588
18661  6589
18662  658A
18663  658B
18664  658C
18665  658D
18666  658E
18667  658F
18668  6590
18669  6591
18670  6592
18671  6593
18672  6594
18673  6595
18674  6596
18675  6597
18676  6598
18677  6599
18678  659A
18679  659B
18680  659C
18681  659D
18682  659E
18683  659F
18684  65A0
18685  65A1
18686  65A2
18687  65A3
18688  65A4
18689  65A5
18690  65A6
18691  65A7
18692  65A8
18693  65A9
18694  65AA
18695  65AB
18696  65AC
18697  65AD
18698  65AE
18699  65AF
18700  65B0
18701  65B1
18702  65B2
18703  65B3
18704  65B4
18705  65B5
18706  65B6
18707  65B7
18708  65B8
18709  65B9
18710  65BA
18711  65BB
18712  65BC
18713  65BD
18714  65BE
18715  65BF
18716  65C0
18717  65C1
18718  65C2
18719  65C3
18720  65C4
18721  65C5
18722  65C6
18723  65C7
18724  65C8
18725  65C9
18726  65CA
18727  65CB
18728  65CC
18729  65CD
18730  65CE
18731  65CF
18732  65D0
18733  65D1
18734  65D2
18735  65D3
18736  65D4
18737  65D5
18738  65D6
18739  65D7
18740  65D8
18741  65D9
18742  65DA
18743  65DB
18744  65DC
18745  65DD
18746  65DE
18747  65DF
18748  65E0
18749  65E1
18750  65E2
18751  65E3
18752  65E4
18753  65E5
18754  65E6
18755  65E7
18756  65E8
18757  65E9
18758  65EA
18759  65EB
18760  65EC
18761  65ED
18762  65EE
18763  65EF
18764  65F0
18765  65F1
18766  65F2
18767  65F3
18768  65F4
18769  65F5
18770  65F6
18771  65F7
18772  65F8
18773  65F9
18774  65FA
18775  65FB
18776  65FC
18777  65FD
18778  65FE
18779  65FF
18780  6600
18781  6601
018782  000672        
018783  000673  var hFonts[53] ;
018784  000674  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
18785  336E
18786  336F
18787  3370
18788  3371
18789  3372
18790  3373
18791  3374
18792  3375
18793  3376
18794  3377
18795  3378
18796  3379
18797  337A
18798  337B
18799  337C
18800  337D
18801  337E
18802  337F
18803  3380
18804  3381
18805  3382
18806  3383
18807  3384
18808  3385
18809  3386
18810  3387
18811  3388
18812  3389
18813  338A
18814  338B
18815  338C
18816  338D
18817  338E
18818  338F
18819  3390
18820  3391
18821  3392
18822  3393
18823  3394
18824  3395
18825  3396
18826  3397
18827  3398
18828  3399
18829  339A
18830  339B
18831  339C
18832  339D
18833  339E
18834  339F
18835  33A0
18836  33A1
18837  33A2
18838  33A3
18839  33A4
18840  33A5
18841  33A6
18842  33A7
18843  33A8
18844  33A9
18845  33AA
18846  33AB
18847  33AC
18848  33AD
18849  33AE
18850  33AF
18851  33B0
18852  33B1
18853  33B2
18854  33B3
18855  33B4
18856  33B5
18857  33B6
18858  33B7
18859  33B8
18860  33B9
18861  33BA
18862  33BB
18863  33BC
18864  33BD
18865  33BE
18866  33BF
18867  33C0
18868  33C1
18869  33C2
18870  33C3
18871  33C4
18872  33C5
18873  33C6
18874  33C7
18875  33C8
18876  33C9
18877  33CA
18878  33CB
18879  33CC
18880  33CD
18881  33CE
18882  33CF
18883  33D0
18884  33D1
18885  33D2
18886  33D3
18887  33D4
18888  33D5
18889  33D6
18890  33D7
018891  000675  // Start P2.inc
018892  000676  var oObjects[MaxTotObjects+1] ;                 // address of objects
018893  000677  var CurrentForm ;
018894  000678  var TouchXpos, TouchYpos ;
018895  000679  var InputType, TouchState, CurInputData, pInputIndex ;
018896  000680  var comRX[40], cmd[CMDLenMAX] ;
018897  000681        
018898  000682  var InputCS, OutputCS ;
018899  000683        
018900  000684        
018901  000685        
018902  000686  func seroutCS(var op)
018903  000687      serout(op) ;
018904  000688      OutputCS ^= op ;
018905  000689  endfunc
018906  000690        
018907  000691  func nak0()
018908  000692      serout(NAK) ;
018909  000693      InputCS := 0 ;
018910  000694  endfunc
018911  000695        
018912  000696  func seroutOcs()
018913  000697      serout(OutputCS) ;
018914  000698      OutputCS := 0 ;
018915  000699  endfunc
018916  000700        
018917  000701  func SendReport(var id, var objt, var objn, var val)
018918  000702      seroutCS(id) ;
018919  000703      seroutCS(objt) ;
018920  000704      seroutCS(objn) ;
018921  000705      seroutCS(val >> 8) ; // first 8 bits
018922  000706      seroutCS(val) ;
018923  000707      seroutOcs() ;
018924  000708  endfunc
018925  000709        
018926  000710        
018927  000711  func ReadObject(var ObjectType, var ObjectIdx)
018928  000712      var j, k, Objects ;
018929  000713      Objects := *(oObjects+ObjectType) ;
018930  000714        
018931  000715      j := 2 + ObjectIdx * 2 + Objects ;
018932  000716       if (ObjectType == tForm)
018933  000717          k := CurrentForm ;
018934  000718      else if (ObjectType == tStrings)
018935  000719          k := stringsCV[ObjectIdx];
018936  000720          else
018937  000721          k := img_GetWord(hndl, *j, IMAGE_INDEX);
018938  000722          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
018939  000723                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
018940  000724      endif
018941  000725      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
018942  000726  endfunc
018943  000727        
018944  000728        
018945  000729  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
018946  000730      var i, j, k, Objects ;
018947  000731      ObjectType &= 0x3f ;
018948  000732      if (ObjectType == tForm)
018949  000733          ActivateForm(ObjectIdx) ;
018950  000734      else
018951  000735          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
018952  000736          i := *(Objects) ;
018953  000737          switch (ObjectType)
018954  000738              case tUserButton :
018955  000739                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
018956  000740                  break ;
018957  000741              default : j := -1 ;
018958  000742          endswitch
018959  000743          if (j != -1)
018960  000744              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
018961  000745              NewVal := NewVal << 1 ;
018962  000746              if (OVF())      // button group index change
018963  000747                  if (*(j+InputData+Ofs_IPD_P1))
018964  000748                      k &= 1 ;    // mask off old group index for momentary
018965  000749                  else
018966  000750                      k &= 3 ;    // mask off old group index for toggle
018967  000751                  endif
018968  000752              else            // normal set
018969  000753                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
018970  000754                  k &= 0xfffc ;    // retain only group index for state set
018971  000755              endif
018972  000756              NewVal |= k ;
018973  000757          endif
018974  000758           if (ObjectType == tStrings)
018975  000759              PrintStrings(ObjectIdx, NewVal, 0);
018976  000760          else
018977  000761              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
018978  000762              img_Show(hndl, i) ; // will only display if form is current
018979  000763          endif
018980  000764      endif
018981  000765  endfunc
018982  000766        
018983  000767  func TurnOffButtons(var group)
018984  000768      var j, k, l;
018985  000769      for (j := 0; j < nInputs; j++)
018986  000770          k := j*IPDatasize ;
018987  000771          if (*(InputData+k+Ofs_IPD_P2) == group)
018988  000772              l := -1 ;
018989  000773               if (*(InputData+k) == tUserButton)
018990  000774                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
018991  000775                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
018992  000776                  img_Show(hndl, l);      // only shows on current form
018993  000777              endif
018994  000778          endif
018995  000779      next
018996  000780  endfunc
018997  000781        
018998  000782        
018999  000783        
019000  000784        
019001  000785  func ActivateForm(var newform)
019002  000786      var i, j, *p ;
019003  000787        
019004  000788      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
019005  000789          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
019006  000790              if (img_GetWord(hndl, i, IMAGE_TAG))
019007  000791                  img_Disable(hndl,i) ;
019008  000792              endif
019009  000793          next
019010  000794      endif
019011  000795      CurrentForm := newform ;
019012  000796      // display newform image or clear to image color
019013  000797      if (FormBGcolors[CurrentForm] != ColorBGimage)
019014  000798          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
019015  000799          gfx_Cls() ;
019016  000800          DoGFXObjects() ;                                    // display GFX 'widgets'
019017  000801      endif
019018  000802        
019019  000803      // enable inputs
019020  000804      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
019021  000805          j := img_GetWord(hndl, i, IMAGE_TAG) ;
019022  000806          if (j)
019023  000807              j-- ;
019024  000808              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
019025  000809              //if (j != tKeyboard)
019026  000810              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
019027  000811                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
019028  000812              endif
019029  000813              img_Show(hndl,i) ; // show initialy, if required
019030  000814              if (j == tForm)
019031  000815                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
019032  000816              endif
019033  000817          endif
019034  000818      next
019035  000819      for (i := 0; i < nStrings; i++)
019036  000820          if (stringsCV[i] != -1)
019037  000821              WriteObject(tStrings, i, stringsCV[i]) ;
019038  000822          endif
019039  000823      next
019040  000824        
019041  000825  endfunc
019042  000826        
019043  000827  func UpdateObjects(var newval)
019044  000828      var IPidx, otherOBJ ;
019045  000829      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
019046  000830        
019047  000831          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
019048  000832              img_Show(hndl, *(pInputIndex));      // only shows on current form
019049  000833          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
019050  000834              if (*(CurInputData+Ofs_IPD_P1))
019051  000835                  newval &= 1;
019052  000836              else
019053  000837                  newval &= 3;
019054  000838              endif
019055  000839              if (newval > 1) newval := 1;
019056  000840          endif
019057  000841          IPidx := *(CurInputData+TouchState) ;
019058  000842          while(IPidx != 0)
019059  000843              otherOBJ := IPidx + InputData;
019060  000844              if (*(otherOBJ) == OT_REPORT)
019061  000845          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
019062  000846              else if (*(otherOBJ) == OT_MAGIC)
019063  000847                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
019064  000848                  IPidx(newval) ;
019065  000849              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
019066  000850                  if (*(otherOBJ) == OT_ACTIVATE)
019067  000851                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
019068  000852                      InputType := tForm ;
019069  000853                  else if (*(otherOBJ) == OT_SETCONST)
019070  000854                      newval := *(otherOBJ+Ofs_IPD_P3) ;
019071  000855                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019072  000856                  else if (*(otherOBJ) == OT_SETANOTHER)
019073  000857                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019074  000858                  else if (*(otherOBJ) == OT_PREVFRAME)
019075  000859                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
019076  000860                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
019077  000861                      endif
019078  000862                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019079  000863                  else if (*(otherOBJ) == OT_NEXTFRAME)
019080  000864                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
019081  000865                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
019082  000866                      endif
019083  000867                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019084  000868                  else if (*(otherOBJ) == OT_PREVSTRING)
019085  000869                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
019086  000870                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
019087  000871                      endif
019088  000872                  else if (*(otherOBJ) == OT_NEXTSTRING)
019089  000873                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
019090  000874                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
019091  000875                      endif
019092  000876                  endif
019093  000877              endif
019094  000878              IPidx := *(otherOBJ+TouchState) ;
019095  000879          wend
019096  000880      endif
019097  000881  endfunc
019098  000882        
019099  000883  // End P2.inc
019100  000884  func DoGFXObjects()
019101  000885  endfunc
019102  000886        
019103  000887  // Start P3.inc
019104  000888  func main()
019105  000889      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
019106  000890        
019107  000891      putstr("Mounting...\n");
019108  000892      if (!(file_Mount()))
019109  000893          while(!(file_Mount()))
019110  000894              putstr("Drive not mounted...");
019111  000895              pause(200);
019112  000896              gfx_Cls();
019113  000897              pause(200);
019114  000898          wend
019115  000899      endif
019116  000900  //    gfx_MoveTo(0, 0);
019117  000901  //    print(mem_Heap()," ") ;
019118  000902  //    gfx_TransparentColour(0x0020);
019119  000903  //    gfx_Transparency(ON);
019120  000904        
019121  000905      gfx_ScreenMode(LANDSCAPE_R) ;
019122  000906        
019123  000907      // open image control
019124  000908      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
019125  000909        
019126  000910      // init 'constants'
019127  000911  // End P3.inc
019128  000912        
019129  000913      oObjects[tDipSwitch] := oDipSwitchs ;
019130  000914      oObjects[tKnob] := oKnobs ;
019131  000915      oObjects[tRockerSwitch] := oRockerSwitchs ;
019132  000916      oObjects[tRotarySwitch] := oRotarySwitchs ;
019133  000917      oObjects[tGSlider] := oGSliders ;
019134  000918      oObjects[tTrackbar] := oTrackbars ;
019135  000919      oObjects[tWinButton] := oWinButtons ;
019136  000920      oObjects[tAngularmeter] := oAngularmeters ;
019137  000921      oObjects[tCoolgauge] := oCoolgauges ;
019138  000922      oObjects[tCustomdigits] := oCustomdigitss ;
019139  000923      oObjects[tForm] := oForms ;
019140  000924      oObjects[tGauge] := oGauges ;
019141  000925      oObjects[tImage] := oImages ;
019142  000926      oObjects[tKeyboard] := oKeyboards ;
019143  000927      oObjects[tLed] := oLeds ;
019144  000928      oObjects[tLeddigits] := oLeddigitss ;
019145  000929      oObjects[tMeter] := oMeters ;
019146  000930      oObjects[tStrings] := oStringss ;
019147  000931      oObjects[tThermometer] := oThermometers ;
019148  000932      oObjects[tUserled] := oUserleds ;
019149  000933      oObjects[tVideo] := oVideos ;
019150  000934      oObjects[tStaticText] := oStaticTexts ;
019151  000935      oObjects[tSounds] := oSoundss ;
019152  000936      oObjects[tTimer] := oTimers ;
019153  000937      oObjects[tSpectrum] := oSpectrums ;
019154  000938      oObjects[tTank] := oTanks ;
019155  000939      oObjects[tUserImages] := oUserImagess ;
019156  000940      oObjects[tPinOutput] := oPinOutputs ;
019157  000941      oObjects[tPinInput] := oPinInputs ;
019158  000942      oObjects[t4Dbutton] := o4Dbuttons ;
019159  000943      oObjects[tAniButton] := oAniButtons ;
019160  000944      oObjects[tColorPicker] := oColorPickers ;
019161  000945      oObjects[tUserButton] := oUserButtons ;
019162  000946      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
019163  000947      hFonts[2] := file_LoadImageControl("BCN3D_~1.d03", "BCN3D_~1.g03", 1)  ;
019164  000948      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
019165  000949      hFonts[5] := file_LoadImageControl("BCN3D_~1.d05", "BCN3D_~1.g05", 1)  ;
019166  000950      hFonts[28] := file_LoadImageControl("BCN3D_~1.d06", "BCN3D_~1.g06", 1)  ;
019167  000951      hFonts[40] := file_LoadImageControl("BCN3D_~1.d04", "BCN3D_~1.g04", 1)  ;
019168  000952      hFonts[46] := file_LoadImageControl("BCN3D_~1.d07", "BCN3D_~1.g07", 1)  ;
019169  000953      hFonts[0] := hFonts[2] ;
019170  000954      hFonts[4] := hFonts[2] ;
019171  000955      hFonts[6] := hFonts[2] ;
019172  000956      hFonts[7] := hFonts[1] ;
019173  000957      hFonts[8] := hFonts[1] ;
019174  000958      hFonts[9] := hFonts[2] ;
019175  000959      hFonts[10] := hFonts[5] ;
019176  000960      hFonts[11] := hFonts[2] ;
019177  000961      hFonts[12] := hFonts[1] ;
019178  000962      hFonts[13] := hFonts[2] ;
019179  000963      hFonts[14] := hFonts[2] ;
019180  000964      hFonts[15] := hFonts[2] ;
019181  000965      hFonts[16] := hFonts[1] ;
019182  000966      hFonts[17] := hFonts[5] ;
019183  000967      hFonts[18] := hFonts[2] ;
019184  000968      hFonts[19] := hFonts[2] ;
019185  000969      hFonts[20] := hFonts[2] ;
019186  000970      hFonts[21] := hFonts[2] ;
019187  000971      hFonts[22] := hFonts[2] ;
019188  000972      hFonts[23] := hFonts[1] ;
019189  000973      hFonts[24] := hFonts[1] ;
019190  000974      hFonts[25] := hFonts[1] ;
019191  000975      hFonts[26] := hFonts[1] ;
019192  000976      hFonts[27] := hFonts[2] ;
019193  000977      hFonts[29] := hFonts[2] ;
019194  000978      hFonts[30] := hFonts[1] ;
019195  000979      hFonts[31] := hFonts[2] ;
019196  000980      hFonts[32] := hFonts[2] ;
019197  000981      hFonts[33] := hFonts[2] ;
019198  000982      hFonts[34] := hFonts[2] ;
019199  000983      hFonts[35] := hFonts[2] ;
019200  000984      hFonts[36] := hFonts[2] ;
019201  000985      hFonts[37] := hFonts[2] ;
019202  000986      hFonts[38] := hFonts[2] ;
019203  000987      hFonts[39] := hFonts[2] ;
019204  000988      hFonts[41] := hFonts[40] ;
019205  000989      hFonts[42] := hFonts[40] ;
019206  000990      hFonts[43] := hFonts[46] ;
019207  000991      hFonts[44] := hFonts[2] ;
019208  000992      hFonts[45] := hFonts[46] ;
019209  000993      hFonts[47] := hFonts[46] ;
019210  000994      hFonts[49] := hFonts[2] ;
019211  000995      hFonts[50] := hFonts[1] ;
019212  000996      hFonts[51] := hFonts[1] ;
019213  000997      hFonts[52] := hFonts[2] ;
019214  000998  // Start P4.inc
019215  000999      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
019216  001000      // init comms
019217  001001      com_Init(comRX,CMDLenMAX,0);
019218  001002      com_SetBaud(COM0,19886);
019219  001003      com_TXbuffer(comTX, 100, 0);
019220  001004      snd_BufSize(2) ;
019221  001005      // tag 'real' objects
019222  001006      for (i := 0; i <= MaxTotObjects; i++)
019223  001007          if (   (i != tSounds)
019224  001008              && (i != tTimer)
019225  001009              && (i != tPinOutput)
019226  001010              && (i != tPinInput) )
019227  001011              TouchXpos := oObjects[i] ;
019228  001012              TouchYpos := *(TouchXpos) ;
019229  001013              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
019230  001014                  oldn := *(TouchXpos+ImageTouched*2) ;
019231  001015                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
019232  001016                  if (oldn != -1)
019233  001017                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
019234  001018                      img_Disable(hndl, oldn) ;
019235  001019                  endif
019236  001020              next
019237  001021          endif
019238  001022      next
019239  001023        
019240  001024      // display initial form
019241  001025      CurrentForm := -1 ;
019242  001026      ActivateForm(0) ; // need to change this according to first actual form
019243  001027        
019244  001028  // End P4.inc
019245  001029  // Start P5.inc
019246  001030      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
019247  001031      oldn := -1 ;
019248  001032      repeat
019249  001033        
019250  001034          // check comms for command, how to NAK invalid command
019251  001035          if (com_Count() != 0)
019252  001036              i := serin() ;
019253  001037              InputCS ^= i ;               // update checksum
019254  001038              if (   (cmdi > 2)
019255  001039                  && (cmd[0] == WRITE_STRU) )
019256  001040                  j := (cmdi-1) >> 1 + 2 ;
019257  001041                  if (j == CMDLenMAX)    // max length exceeded
019258  001042                      nak0() ;
019259  001043                      cmdi := -1 ;
019260  001044                  else if (cmdi & 1)
019261  001045                      cmd[j] := i ;
019262  001046                      if (cmd[2] == 0)    // if string complete
019263  001047                          if (InputCS)
019264  001048                              nak0() ;
019265  001049                          else
019266  001050                              if (cmd[0] == WRITE_STRU)
019267  001051                              cmd[j] := 0 ;                     // terminate it
019268  001052                              PrintStrings(cmd[1], &cmd[3], 1) ;
019269  001053                              serout(ACK) ;
019270  001054                              else
019271  001055                              endif
019272  001056                          endif
019273  001057                          cmdi := -1 ;
019274  001058                      endif
019275  001059                  else
019276  001060                      cmd[j] := cmd[j] << 8 + i ;
019277  001061                      cmd[2]-- ;          // dec length
019278  001062                  endif
019279  001063                  cmdi++ ;
019280  001064              else // not unicode string
019281  001065                  cmd[cmdi++] := i ;
019282  001066                   if (cmd[0] == WRITE_STR)                  // Ansi String
019283  001067                      if (cmdi == CMDLenMAX)      // max length exceeded
019284  001068                          nak0() ;
019285  001069                          cmdi := 0 ;
019286  001070                      else if (cmdi > 2)
019287  001071                          if (cmd[2] == -1)
019288  001072                              if (InputCS)
019289  001073                                  nak0() ;
019290  001074                              else
019291  001075                                  if (cmd[0] == WRITE_STR)
019292  001076                                  cmd[cmdi-1] := 0 ;                     // terminate it
019293  001077                                  PrintStrings(cmd[1], &cmd[3], 1) ;
019294  001078                                  serout(ACK) ;
019295  001079                                  else
019296  001080                                  endif
019297  001081                              endif
019298  001082                              cmdi := 0 ;
019299  001083                          else
019300  001084                              cmd[2]-- ;          // dec length
019301  001085                          endif
019302  001086                      endif
019303  001087                  else if (   (cmd[0] == READ_OBJ)
019304  001088                           && (cmdi == 4)         )
019305  001089                      if (InputCS)
019306  001090                          nak0() ;
019307  001091                      else
019308  001092                          ReadObject(cmd[1], cmd[2]) ;
019309  001093                      endif
019310  001094                      cmdi := 0 ;
019311  001095                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
019312  001096                           && (cmdi == 6)          )
019313  001097                      if (InputCS)
019314  001098                          nak0() ;
019315  001099                      else
019316  001100                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
019317  001101                          serout(ACK) ;
019318  001102                      endif
019319  001103                      cmdi := 0 ;
019320  001104                  else if (   (cmd[0] == WRITE_CONTRAST)
019321  001105                           && (cmdi == 3)         )
019322  001106                      if (InputCS)
019323  001107                          nak0() ;
019324  001108                      else
019325  001109                          gfx_Contrast(cmd[1]) ;
019326  001110                          serout(ACK) ;
019327  001111                      endif
019328  001112                      cmdi := 0 ;
019329  001113                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
019330  001114                      nak0() ;
019331  001115                      cmdi := 0 ;
019332  001116                  endif
019333  001117              endif   // not unicode string
019334  001118          endif   // a character is available
019335  001119        
019336  001120        
019337  001121      // touch code processing
019338  001122        
019339  001123          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
019340  001124          ImageTouched := img_Touched(hndl,-1) ;
019341  001125          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
019342  001126              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
019343  001127                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
019344  001128              endif
019345  001129              if (TouchStatus != TOUCH_RELEASED)        // if not released
019346  001130                  if (oldn != -1)
019347  001131                      ImageTouched := oldn ;
019348  001132                  else
019349  001133                      if (oldn != ImageTouched)
019350  001134                  oldn := ImageTouched ;
019351  001135                          TouchStatus := TOUCH_PRESSED ;
019352  001136                      endif
019353  001137                  endif
019354  001138                  TouchXpos  := touch_Get(TOUCH_GETX);
019355  001139                  TouchYpos  := touch_Get(TOUCH_GETY);
019356  001140                  TouchState := Ofs_IPD_DOWN ;
019357  001141              else
019358  001142                  ImageTouched := oldn ;                     // simulate release of what we touched
019359  001143                  oldn := -1 ;                    // prevent double release
019360  001144                  TouchState := Ofs_IPD_RELEASE ;
019361  001145              endif
019362  001146              if (ImageTouched != -1)
019363  001147                          CurInputData := InputControls[ImageTouched] + InputData;
019364  001148                          InputType := *(CurInputData) ;
019365  001149                          i := InputType ;
019366  001150                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
019367  001151                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
019368  001152              endif
019369  001153          endif
019370  001154   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
019371  001155        
019372  001156          sys_EventsResume() ;
019373  001157      forever
019374  001158        
019375  001159  cDipswitch:
019376  001160        
019377  001161  cKnob:
019378  001162        
019379  001163  cRockerswitch:
019380  001164        
019381  001165  cRotaryswitch:
019382  001166        
019383  001167  cSlider:
019384  001168  cTrackbar:
019385  001169        
019386  001170  c4DButton:
019387  001171  cUserButton:
019388  001172      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
019389  001173      goto gbutton ;
019390  001174  cWinbutton:
019391  001175  gbutton:
019392  001176      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
019393  001177      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
019394  001178          if (TouchStatus == TOUCH_RELEASED)
019395  001179              i &= 0xfffe ;
019396  001180              TouchState == Ofs_IPD_DOWN ;
019397  001181          else
019398  001182              i |= 1 ;
019399  001183              TouchState == Ofs_IPD_RELEASE ;
019400  001184          endif
019401  001185      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
019402  001186          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
019403  001187              if ((i & 3) == 3)
019404  001188                  i &= 0xfffc ;
019405  001189              else
019406  001190                  i++ ;
019407  001191              endif
019408  001192          else
019409  001193              i |= 1 ;                                      // make down regardless of current state
019410  001194          endif
019411  001195      else                        // group action, up all other buttons on touch press, reports 0 for button down
019412  001196          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
019413  001197              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
019414  001198          endif
019415  001199          i := (i & 0xfffc) | 2 ;
019416  001200      endif
019417  001201        
019418  001202      UpdateObjects(i) ;
019419  001203  endsub ;
019420  001204        
019421  001205  cAniButton:
019422  001206        
019423  001207  cColorPicker:
019424  001208        
019425  001209  endfunc
019426  001210  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 848 file:BCN3D_SIGMA.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 786 file:BCN3D_SIGMA.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       16069  0x00003ec5 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 114)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS    2805  0x00000af5 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 228)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 24)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       15437  0x00003c4d (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       12907  0x0000326bFormBGcolors                       12907  0x0000326b (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         157  0x0000009dFormEndIndex                         157  0x0000009d (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[75] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
Gen4_ULCD_35DCT_CLB_DIABLO16_GFX       0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 294)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 87)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm11                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm12                              171  0x000000ab (const ??? 0)  (usage 3)
iForm13                              121  0x00000079 (const ??? 0)  (usage 3)
iForm14                               37  0x00000025 (const ??? 0)  (usage 3)
iForm15                              173  0x000000ad (const ??? 0)  (usage 3)
iForm16                              103  0x00000067 (const ??? 0)  (usage 3)
iForm17                              127  0x0000007f (const ??? 0)  (usage 3)
iForm18                              187  0x000000bb (const ??? 0)  (usage 3)
iForm19                               41  0x00000029 (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                               43  0x0000002b (const ??? 0)  (usage 3)
iForm21                               52  0x00000034 (const ??? 0)  (usage 3)
iForm22                              203  0x000000cb (const ??? 0)  (usage 3)
iForm23                              218  0x000000da (const ??? 0)  (usage 3)
iForm24                              249  0x000000f9 (const ??? 0)  (usage 3)
iForm25                              129  0x00000081 (const ??? 0)  (usage 3)
iForm26                              300  0x0000012c (const ??? 0)  (usage 3)
iForm27                               55  0x00000037 (const ??? 0)  (usage 3)
iForm28                               67  0x00000043 (const ??? 0)  (usage 3)
iForm29                              195  0x000000c3 (const ??? 0)  (usage 3)
iForm3                               117  0x00000075 (const ??? 0)  (usage 3)
iForm30                              303  0x0000012f (const ??? 0)  (usage 3)
iForm31                               75  0x0000004b (const ??? 0)  (usage 3)
iForm32                               78  0x0000004e (const ??? 0)  (usage 3)
iForm33                               81  0x00000051 (const ??? 0)  (usage 3)
iForm34                               93  0x0000005d (const ??? 0)  (usage 3)
iForm35                               98  0x00000062 (const ??? 0)  (usage 3)
iForm36                              193  0x000000c1 (const ??? 0)  (usage 3)
iForm37                              208  0x000000d0 (const ??? 0)  (usage 3)
iForm38                              210  0x000000d2 (const ??? 0)  (usage 3)
iForm39                              212  0x000000d4 (const ??? 0)  (usage 3)
iForm4                                17  0x00000011 (const ??? 0)  (usage 3)
iForm40                              284  0x0000011c (const ??? 0)  (usage 3)
iForm41                              246  0x000000f6 (const ??? 0)  (usage 3)
iForm42                              221  0x000000dd (const ??? 0)  (usage 3)
iForm43                              226  0x000000e2 (const ??? 0)  (usage 3)
iForm44                              107  0x0000006b (const ??? 0)  (usage 3)
iForm45                              306  0x00000132 (const ??? 0)  (usage 3)
iForm46                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm47                              125  0x0000007d (const ??? 0)  (usage 3)
iForm48                              136  0x00000088 (const ??? 0)  (usage 3)
iForm49                              143  0x0000008f (const ??? 0)  (usage 3)
iForm5                                22  0x00000016 (const ??? 0)  (usage 3)
iForm50                              231  0x000000e7 (const ??? 0)  (usage 3)
iForm51                              236  0x000000ec (const ??? 0)  (usage 3)
iForm52                              148  0x00000094 (const ??? 0)  (usage 3)
iForm53                              159  0x0000009f (const ??? 0)  (usage 3)
iForm54                              239  0x000000ef (const ??? 0)  (usage 3)
iForm55                              242  0x000000f2 (const ??? 0)  (usage 3)
iForm56                              251  0x000000fb (const ??? 0)  (usage 3)
iForm57                              253  0x000000fd (const ??? 0)  (usage 3)
iForm58                              258  0x00000102 (const ??? 0)  (usage 3)
iForm59                              270  0x0000010e (const ??? 0)  (usage 3)
iForm6                                27  0x0000001b (const ??? 0)  (usage 3)
iForm60                              260  0x00000104 (const ??? 0)  (usage 3)
iForm61                              263  0x00000107 (const ??? 0)  (usage 3)
iForm62                              265  0x00000109 (const ??? 0)  (usage 3)
iForm63                              268  0x0000010c (const ??? 0)  (usage 3)
iForm64                              281  0x00000119 (const ??? 0)  (usage 3)
iForm65                              286  0x0000011e (const ??? 0)  (usage 3)
iForm66                              291  0x00000123 (const ??? 0)  (usage 3)
iForm67                              294  0x00000126 (const ??? 0)  (usage 3)
iForm68                              297  0x00000129 (const ??? 0)  (usage 3)
iForm69                              308  0x00000134 (const ??? 0)  (usage 3)
iForm7                               256  0x00000100 (const ??? 0)  (usage 3)
iForm70                              309  0x00000135 (const ??? 0)  (usage 3)
iForm71                              311  0x00000137 (const ??? 0)  (usage 3)
iForm72                              313  0x00000139 (const ??? 0)  (usage 3)
iForm73                              315  0x0000013b (const ??? 0)  (usage 3)
iForm74                              317  0x0000013d (const ??? 0)  (usage 3)
iForm8                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm9                                33  0x00000021 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 39)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 12)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 15)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        307  0x00000133InputControls                        307  0x00000133 (mem) word[320] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 6)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            947  0x000003b3InputData                            947  0x000003b3 (mem) word[4895] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 24)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          10737  0x000029f1iStrings0                          10737  0x000029f1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings1                          10763  0x00002a0biStrings1                          10763  0x00002a0b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings10                         10997  0x00002af5iStrings10                         10997  0x00002af5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings11                         11023  0x00002b0fiStrings11                         11023  0x00002b0f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings12                         11049  0x00002b29iStrings12                         11049  0x00002b29 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings13                         11075  0x00002b43iStrings13                         11075  0x00002b43 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings14                         11101  0x00002b5diStrings14                         11101  0x00002b5d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings15                         11127  0x00002b77iStrings15                         11127  0x00002b77 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings16                         11153  0x00002b91iStrings16                         11153  0x00002b91 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings17                         11179  0x00002babiStrings17                         11179  0x00002bab (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings18                         11205  0x00002bc5iStrings18                         11205  0x00002bc5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings19                         11231  0x00002bdfiStrings19                         11231  0x00002bdf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings2                          10789  0x00002a25iStrings2                          10789  0x00002a25 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings20                         11257  0x00002bf9iStrings20                         11257  0x00002bf9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings21                         11283  0x00002c13iStrings21                         11283  0x00002c13 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings22                         11309  0x00002c2diStrings22                         11309  0x00002c2d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings23                         11335  0x00002c47iStrings23                         11335  0x00002c47 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings24                         11361  0x00002c61iStrings24                         11361  0x00002c61 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings25                         11387  0x00002c7biStrings25                         11387  0x00002c7b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings26                         11413  0x00002c95iStrings26                         11413  0x00002c95 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings27                         11439  0x00002cafiStrings27                         11439  0x00002caf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings28                         11465  0x00002cc9iStrings28                         11465  0x00002cc9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings29                         11491  0x00002ce3iStrings29                         11491  0x00002ce3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings3                          10815  0x00002a3fiStrings3                          10815  0x00002a3f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings30                         11517  0x00002cfdiStrings30                         11517  0x00002cfd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings31                         11543  0x00002d17iStrings31                         11543  0x00002d17 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings32                         11569  0x00002d31iStrings32                         11569  0x00002d31 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings33                         11595  0x00002d4biStrings33                         11595  0x00002d4b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings34                         11621  0x00002d65iStrings34                         11621  0x00002d65 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings35                         11647  0x00002d7fiStrings35                         11647  0x00002d7f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings36                         11673  0x00002d99iStrings36                         11673  0x00002d99 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings37                         11699  0x00002db3iStrings37                         11699  0x00002db3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings38                         11725  0x00002dcdiStrings38                         11725  0x00002dcd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings39                         11751  0x00002de7iStrings39                         11751  0x00002de7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings4                          10841  0x00002a59iStrings4                          10841  0x00002a59 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings40                         11777  0x00002e01iStrings40                         11777  0x00002e01 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings41                         11803  0x00002e1biStrings41                         11803  0x00002e1b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings42                         11829  0x00002e35iStrings42                         11829  0x00002e35 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings43                         11855  0x00002e4fiStrings43                         11855  0x00002e4f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings44                         11881  0x00002e69iStrings44                         11881  0x00002e69 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings45                         11907  0x00002e83iStrings45                         11907  0x00002e83 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings46                         11933  0x00002e9diStrings46                         11933  0x00002e9d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings47                         11959  0x00002eb7iStrings47                         11959  0x00002eb7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings49                         11985  0x00002ed1iStrings49                         11985  0x00002ed1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings5                          10867  0x00002a73iStrings5                          10867  0x00002a73 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings50                         12011  0x00002eebiStrings50                         12011  0x00002eeb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings51                         12037  0x00002f05iStrings51                         12037  0x00002f05 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings52                         12063  0x00002f1fiStrings52                         12063  0x00002f1f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings6                          10893  0x00002a8diStrings6                          10893  0x00002a8d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings7                          10919  0x00002aa7iStrings7                          10919  0x00002aa7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings8                          10945  0x00002ac1iStrings8                          10945  0x00002ac1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
iStrings9                          10971  0x00002adbiStrings9                          10971  0x00002adb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          28  0x0000001c (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        269  0x0000010d (const ??? 0)  (usage 3)
iUserbutton100                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton101                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton102                        82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton103                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton104                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton105                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton106                        86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton107                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton108                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton109                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton11                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton110                        90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton111                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton112                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton113                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton114                        96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton115                        99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton116                       100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton117                       101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton118                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton119                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton12                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton120                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton121                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton122                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton123                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton124                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton125                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton126                        51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton127                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton128                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton129                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton13                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton130                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton131                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton132                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton133                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton134                       290  0x00000122 (const ??? 0)  (usage 3)
iUserbutton135                       115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton136                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton137                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton138                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton139                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton14                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton140                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton141                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton142                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton143                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton144                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton145                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton146                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton147                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton148                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton149                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton151                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton152                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton153                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton154                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton155                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton156                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton157                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton158                       105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton159                        31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton16                         36  0x00000024 (const ??? 0)  (usage 3)
iUserbutton160                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton161                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton162                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton163                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton164                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton165                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton166                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton167                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton168                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton169                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton17                         38  0x00000026 (const ??? 0)  (usage 3)
iUserbutton170                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton171                       229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton172                       302  0x0000012e (const ??? 0)  (usage 3)
iUserbutton173                       304  0x00000130 (const ??? 0)  (usage 3)
iUserbutton174                       305  0x00000131 (const ??? 0)  (usage 3)
iUserbutton175                       310  0x00000136 (const ??? 0)  (usage 3)
iUserbutton176                       312  0x00000138 (const ??? 0)  (usage 3)
iUserbutton177                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton178                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton179                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton18                         34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton180                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton181                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton182                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton183                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton184                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton185                       245  0x000000f5 (const ??? 0)  (usage 3)
iUserbutton186                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton187                       241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton188                       248  0x000000f8 (const ??? 0)  (usage 3)
iUserbutton189                       252  0x000000fc (const ??? 0)  (usage 3)
iUserbutton19                         35  0x00000023 (const ??? 0)  (usage 3)
iUserbutton190                       255  0x000000ff (const ??? 0)  (usage 3)
iUserbutton191                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton192                       257  0x00000101 (const ??? 0)  (usage 3)
iUserbutton193                       271  0x0000010f (const ??? 0)  (usage 3)
iUserbutton194                       261  0x00000105 (const ??? 0)  (usage 3)
iUserbutton195                       262  0x00000106 (const ??? 0)  (usage 3)
iUserbutton196                       272  0x00000110 (const ??? 0)  (usage 3)
iUserbutton197                       287  0x0000011f (const ??? 0)  (usage 3)
iUserbutton198                       288  0x00000120 (const ??? 0)  (usage 3)
iUserbutton199                       273  0x00000111 (const ??? 0)  (usage 3)
iUserbutton2                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton20                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton200                       274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton201                       275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton202                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton203                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton204                       278  0x00000116 (const ??? 0)  (usage 3)
iUserbutton205                       279  0x00000117 (const ??? 0)  (usage 3)
iUserbutton206                       282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton207                       283  0x0000011b (const ??? 0)  (usage 3)
iUserbutton208                       318  0x0000013e (const ??? 0)  (usage 3)
iUserbutton209                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton21                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton210                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton211                       295  0x00000127 (const ??? 0)  (usage 3)
iUserbutton212                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton213                       299  0x0000012b (const ??? 0)  (usage 3)
iUserbutton214                       319  0x0000013f (const ??? 0)  (usage 3)
iUserbutton215                       293  0x00000125 (const ??? 0)  (usage 3)
iUserbutton216                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton22                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton23                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton24                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton25                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton26                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton27                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton28                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton29                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton3                         179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton30                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton31                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton32                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton33                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton34                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton35                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton36                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton37                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton38                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton39                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton4                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton40                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton41                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton44                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton45                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton46                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton47                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton48                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton49                        254  0x000000fe (const ??? 0)  (usage 3)
iUserbutton5                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton50                         30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton51                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton52                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton53                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton54                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton55                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton56                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton57                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton58                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton59                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton6                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton60                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton63                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton64                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton65                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton66                        219  0x000000db (const ??? 0)  (usage 3)
iUserbutton67                        247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton68                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton69                        250  0x000000fa (const ??? 0)  (usage 3)
iUserbutton7                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton70                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton71                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton72                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton73                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton74                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton75                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton76                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton77                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton78                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton79                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton8                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton80                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton81                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton82                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton83                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton84                        202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton85                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton86                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton87                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                         32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton9                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton90                        204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton91                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton92                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton93                        301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton94                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton95                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton96                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton97                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton98                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton99                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages0                         201  0x000000c9 (const ??? 0)  (usage 3)
iUserimages1                          15  0x0000000f (const ??? 0)  (usage 3)
iUserimages2                         280  0x00000118 (const ??? 0)  (usage 3)
iUserimages4                          77  0x0000004d (const ??? 0)  (usage 3)
iUserimages5                          80  0x00000050 (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              177  0x000000b1 (const ??? 0)  (usage 3)
iVideo10                             106  0x0000006a (const ??? 0)  (usage 3)
iVideo11                              54  0x00000036 (const ??? 0)  (usage 3)
iVideo12                             220  0x000000dc (const ??? 0)  (usage 3)
iVideo13                             267  0x0000010b (const ??? 0)  (usage 3)
iVideo14                              16  0x00000010 (const ??? 0)  (usage 3)
iVideo15                             186  0x000000ba (const ??? 0)  (usage 3)
iVideo16                              97  0x00000061 (const ??? 0)  (usage 3)
iVideo17                             102  0x00000066 (const ??? 0)  (usage 3)
iVideo18                             296  0x00000128 (const ??? 0)  (usage 3)
iVideo19                             259  0x00000103 (const ??? 0)  (usage 3)
iVideo2                              194  0x000000c2 (const ??? 0)  (usage 3)
iVideo20                             116  0x00000074 (const ??? 0)  (usage 3)
iVideo21                             307  0x00000133 (const ??? 0)  (usage 3)
iVideo22                             314  0x0000013a (const ??? 0)  (usage 3)
iVideo23                             316  0x0000013c (const ??? 0)  (usage 3)
iVideo3                               72  0x00000048 (const ??? 0)  (usage 3)
iVideo4                               73  0x00000049 (const ??? 0)  (usage 3)
iVideo5                               74  0x0000004a (const ??? 0)  (usage 3)
iVideo6                              128  0x00000080 (const ??? 0)  (usage 3)
iVideo7                              264  0x00000108 (const ??? 0)  (usage 3)
iVideo8                              285  0x0000011d (const ??? 0)  (usage 3)
iVideo9                              230  0x000000e6 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                13057  0x00003301kKeyboardKeystrokes                13057  0x00003301 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               13457  0x00003491 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               17035  0x0000428b (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (usage 15)
nInputs                              445  0x000001bd (const dword)  (usage 3)
nObjects                             320  0x00000140 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         12459  0x000030abo4Dbuttons                         12459  0x000030ab (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAngularmeters                     12103  0x00002f47oAngularmeters                     12103  0x00002f47 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oAniButtons                        12461  0x000030adoAniButtons                        12461  0x000030ad (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      12463  0x000030afoColorPickers                      12463  0x000030af (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCoolgauges                        12105  0x00002f49oCoolgauges                        12105  0x00002f49 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oCustomdigitss                     12107  0x00002f4boCustomdigitss                     12107  0x00002f4b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oDipSwitchs                        12089  0x00002f39oDipSwitchs                        12089  0x00002f39 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                             12109  0x00002f4doForms                             12109  0x00002f4d (mem) word[76] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 9)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            12261  0x00002fe5oGauges                            12261  0x00002fe5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oGSliders                          12097  0x00002f41oGSliders                          12097  0x00002f41 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oImages                            12263  0x00002fe7oImages                            12263  0x00002fe7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKeyboards                         12265  0x00002fe9oKeyboards                         12265  0x00002fe9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oKnobs                             12091  0x00002f3boKnobs                             12091  0x00002f3b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                        12269  0x00002fedoLeddigitss                        12269  0x00002fed (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oLeds                              12267  0x00002feboLeds                              12267  0x00002feb (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                            12271  0x00002fefoMeters                            12271  0x00002fef (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         12457  0x000030a9oPinInputs                         12457  0x000030a9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oPinOutputs                        12905  0x00003269oPinOutputs                        12905  0x00003269 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     12093  0x00002f3doRockerSwitchs                     12093  0x00002f3d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oRotarySwitchs                     12095  0x00002f3foRotarySwitchs                     12095  0x00002f3f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oScopes                            12439  0x00003097oScopes                            12439  0x00003097 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
oSoundss                           12903  0x00003267oSoundss                           12903  0x00003267 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oSpectrums                         12437  0x00003095oSpectrums                         12437  0x00003095 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStaticTexts                       12435  0x00003093oStaticTexts                       12435  0x00003093 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oStringss                          12273  0x00002ff1oStringss                          12273  0x00002ff1 (mem) word[54] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 69)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 621)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             12441  0x00003099oTanks                             12441  0x00003099 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oThermometers                      12381  0x0000305doThermometers                      12381  0x0000305d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTimers                            12901  0x00003265oTimers                            12901  0x00003265 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oTrackbars                         12099  0x00002f43oTrackbars                         12099  0x00002f43 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserButtons                       12465  0x000030b1oUserButtons                       12465  0x000030b1 (mem) word[218] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 12)
oUserImagess                       12443  0x0000309boUserImagess                       12443  0x0000309b (mem) word[7] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
oUserleds                          12383  0x0000305foUserleds                          12383  0x0000305f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            12385  0x00003061oVideos                            12385  0x00003061 (mem) word[25] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        12101  0x00002f45oWinButtons                        12101  0x00002f45 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 15)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       17070  0x000042ae (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         16820  0x000041b4 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  13059  0x00003303rKeyboardRoutines                  13059  0x00003303 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\Firmware\BCN3DSigma-Firmware\Project Files LCD v122\BCN3D_SIGMA.4DWork\BCN3D_SIGMA.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 15)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         16968  0x00004248 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           17051  0x0000429b (User func) args[1] r=0  (usage 15)
seroutOcs                          17018  0x0000427a (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           4  0x00000004 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          7  0x00000007 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          9  0x00000009 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          9  0x00000009 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          9  0x00000009 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          9  0x00000009 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         19  0x00000013 (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     3072  0x00000c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         37  0x00000025 (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         37  0x00000025 (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         22  0x00000016 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                          4  0x00000004 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         37  0x00000025 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          4  0x00000004 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                          4  0x00000004 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                          4  0x00000004 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings34Count                         1  0x00000001 (const dword)  (not used)
Strings34Size                          4  0x00000004 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                          4  0x00000004 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings36Count                         1  0x00000001 (const dword)  (not used)
Strings36Size                          4  0x00000004 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings37Count                         1  0x00000001 (const dword)  (not used)
Strings37Size                          4  0x00000004 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings38Count                         1  0x00000001 (const dword)  (not used)
Strings38Size                          4  0x00000004 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         16  0x00000010 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings41Count                         0  0x00000000 (const dword)  (not used)
Strings41Size                          1  0x00000001 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings42Count                         0  0x00000000 (const dword)  (not used)
Strings42Size                          1  0x00000001 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                           4  0x00000004 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      8704  0x00002200 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                           7  0x00000007 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           4  0x00000004 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     17920  0x00004600 (const dword)  (usage 3)
Strings7Count                          1  0x00000001 (const dword)  (not used)
Strings7Size                          37  0x00000025 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                           4  0x00000004 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     16390  0x00004006 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 666)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      15438  0x00003c4e (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 6)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        16527  0x0000408f (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
